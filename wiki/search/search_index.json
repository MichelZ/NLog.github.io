{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"All-Event-Properties-Layout-Renderer/","text":"Log event all context data. Platforms Supported: All Introduced in NLog v4.0. To log one property, use ${event-properties} . See also NLog Context . Configuration Syntax ${all-event-properties:format=String:separator=String:includeCallerInformation=Boolean:includeEmptyValues=boolean} Parameters Rendering Options format - How key/value pairs will be formatted. The placeholder used to define placement of the key is, [key] , and the placeholder for value is, [value] . Default value: [key]=[value] separator - The string that will be used to separate key/value pairs. Default value: , includeCallerInformation - Also render the caller information attributes? Introduced in NLog 4.1 (Net45 required) Default value: false includeEmptyValues - include empty values? A value is empty when null or in case of a string, null or empty string. Introduced in NLog 4.6.4. Default value: false exclude - LogEvent property-key-names to exclude from output. List of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced in NLog 4.6.8 includeScopeProperties - Include ScopeContext Properties together with LogEvent Properties. Introduced in NLog 5.0 Examples See EventProperties-Layout-Renderer","title":"All Event Properties Layout Renderer"},{"location":"All-Event-Properties-Layout-Renderer/#configuration-syntax","text":"${all-event-properties:format=String:separator=String:includeCallerInformation=Boolean:includeEmptyValues=boolean}","title":"Configuration Syntax"},{"location":"All-Event-Properties-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"All-Event-Properties-Layout-Renderer/#rendering-options","text":"format - How key/value pairs will be formatted. The placeholder used to define placement of the key is, [key] , and the placeholder for value is, [value] . Default value: [key]=[value] separator - The string that will be used to separate key/value pairs. Default value: , includeCallerInformation - Also render the caller information attributes? Introduced in NLog 4.1 (Net45 required) Default value: false includeEmptyValues - include empty values? A value is empty when null or in case of a string, null or empty string. Introduced in NLog 4.6.4. Default value: false exclude - LogEvent property-key-names to exclude from output. List of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced in NLog 4.6.8 includeScopeProperties - Include ScopeContext Properties together with LogEvent Properties. Introduced in NLog 5.0","title":"Rendering Options"},{"location":"All-Event-Properties-Layout-Renderer/#examples","text":"See EventProperties-Layout-Renderer","title":"Examples"},{"location":"AppDomain-Layout-Renderer/","text":"Render the application domain name. Platforms Supported: All (Fake AppDomain used for NetStandard) Configuration Syntax ${appdomain:format=Format} Parameters Rendering Options format - The formating. Default to Long . possible options: Long - default. The id as four number digit, colon, friendlyname. E.g. 0003:NLog.UnitTests Short - Only the id as two number digit, like \"03\". or custom like {0} - {1}. The first parameter is the\"AppDomain.Id\", the second is the \"AppDomain.FriendlyName\". Note: use escaping of the brackets. See examples. Example Examples in the .config ```xml ${appdomain} //e.g. 0003:NLog.UnitTests ${appdomain:format=short} //e.g. 03 ${appdomain:format=long} //e.g. 0003:NLog.UnitTests ${appdomain:format={1} - {0}} //e.g. NLog.UnitTests - 3","title":"AppDomain Layout Renderer"},{"location":"AppDomain-Layout-Renderer/#configuration-syntax","text":"${appdomain:format=Format}","title":"Configuration Syntax"},{"location":"AppDomain-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AppDomain-Layout-Renderer/#rendering-options","text":"format - The formating. Default to Long . possible options: Long - default. The id as four number digit, colon, friendlyname. E.g. 0003:NLog.UnitTests Short - Only the id as two number digit, like \"03\". or custom like {0} - {1}. The first parameter is the\"AppDomain.Id\", the second is the \"AppDomain.FriendlyName\". Note: use escaping of the brackets. See examples.","title":"Rendering Options"},{"location":"AppDomain-Layout-Renderer/#example","text":"Examples in the .config ```xml ${appdomain} //e.g. 0003:NLog.UnitTests ${appdomain:format=short} //e.g. 03 ${appdomain:format=long} //e.g. 0003:NLog.UnitTests ${appdomain:format={1} - {0}} //e.g. NLog.UnitTests - 3","title":"Example"},{"location":"AppSetting-Layout-Renderer/","text":"Value from the App Settings configuration (app.config / web.config) Platforms Supported: Limited (.NetFramework only and not .NetStandard) NLog 4.6 has this included in the core NLog.dll for NetFramework (.NET Core ${configsetting} supports appsettings.json ) NLog 3.0+ requires additional dependency on NLog.Extended Configuration Syntax ${appsetting:item=String:default=String} Parameters Rendering Options item - Key in the apps setting. Required Introduced with NLog v4.5, and replaces the Name -option. Default - Default value if not present. Optional. Example AppSettings Example .config <configuration> <appSettings> <add key=\"MyKey\" value=\"MyApplication\" /> </appSettings> </configuration> Example renderer: produces MyApplication is this case: ${appsetting:item=MyKey:default=mydefault} Example#2 renderer: produces mydefault is this case: ${appsetting:item=MyKey2:default=mydefault} Example ConnectionStrings Introduced with NLog 4.6.5 <configuration> <appSettings> <add key=\"MyKey\" value=\"MyApplication\" /> </appSettings> <connectionStrings> <add name=\"ElasticUrl\" connectionString=\"http://localhost:9200\"/> </connectionStrings> </configuration> Example#3 renderer: produces http://localhost:9200 is this case: ${appsetting:item=connectionStrings.ElasticUrl}","title":"AppSetting Layout Renderer"},{"location":"AppSetting-Layout-Renderer/#configuration-syntax","text":"${appsetting:item=String:default=String}","title":"Configuration Syntax"},{"location":"AppSetting-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AppSetting-Layout-Renderer/#rendering-options","text":"item - Key in the apps setting. Required Introduced with NLog v4.5, and replaces the Name -option. Default - Default value if not present. Optional.","title":"Rendering Options"},{"location":"AppSetting-Layout-Renderer/#example-appsettings","text":"Example .config <configuration> <appSettings> <add key=\"MyKey\" value=\"MyApplication\" /> </appSettings> </configuration> Example renderer: produces MyApplication is this case: ${appsetting:item=MyKey:default=mydefault} Example#2 renderer: produces mydefault is this case: ${appsetting:item=MyKey2:default=mydefault}","title":"Example AppSettings"},{"location":"AppSetting-Layout-Renderer/#example-connectionstrings","text":"Introduced with NLog 4.6.5 <configuration> <appSettings> <add key=\"MyKey\" value=\"MyApplication\" /> </appSettings> <connectionStrings> <add name=\"ElasticUrl\" connectionString=\"http://localhost:9200\"/> </connectionStrings> </configuration> Example#3 renderer: produces http://localhost:9200 is this case: ${appsetting:item=connectionStrings.ElasticUrl}","title":"Example ConnectionStrings"},{"location":"AspNet-AppBasePath-layout-renderer/","text":"ASP.NET AppBasePath (Content Root) Platforms Supported: All (Supported in Asp.NET and Asp.NetCore ) Introduced with NLog.Web.AspNetCore v4.5.0 and NLog.Web v4.5.2 Configuration Syntax ${aspnet-appbasepath} Remarks Application base path is also known as the content root, while wwwroot -path is root directory for static content.","title":"AspNet AppBasePath layout renderer"},{"location":"AspNet-AppBasePath-layout-renderer/#configuration-syntax","text":"${aspnet-appbasepath}","title":"Configuration Syntax"},{"location":"AspNet-AppBasePath-layout-renderer/#remarks","text":"Application base path is also known as the content root, while wwwroot -path is root directory for static content.","title":"Remarks"},{"location":"AspNet-Environment-layout-renderer/","text":"ASP.NET EnvironmentName ( ASPNETCORE_ENVIRONMENT ) Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v4.4.0 Configuration Syntax ${aspnet-environment} Remarks The host automatically sets this property to the value of the ASPNETCORE_ENVIRONMENT environment variable, or \"environment\" as specified in any other configuration source.","title":"AspNet Environment layout renderer"},{"location":"AspNet-Environment-layout-renderer/#configuration-syntax","text":"${aspnet-environment}","title":"Configuration Syntax"},{"location":"AspNet-Environment-layout-renderer/#remarks","text":"The host automatically sets this property to the value of the ASPNETCORE_ENVIRONMENT environment variable, or \"environment\" as specified in any other configuration source.","title":"Remarks"},{"location":"AspNet-HttpContext-Item-Layout-Renderer/","text":"ASP.NET Item variable from HttpContext.Items dictionary. Useful for storing state per request basis. Platforms Supported: All Configuration Syntax ${aspnet-item:variable=String:objectpath=String:format=String} Parameters Rendering Options item - Key for lookup in Items-dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2 and replaces EvaluateAsNestedProperties -option Examples You can set the value of an ASP.NET Item variable by using the following code: Example usage of ${aspnet-item} HttpContext.Items[\"myvariable\"] = 123; HttpContext.Items[\"stringvariable\"] = \"aaa BBB\"; HttpContext.Items[\"anothervariable\"] = DateTime.Now; ${aspnet-item:variable=myvariable} - produces \"123\" ${aspnet-item:variable=anothervariable} - produces \"01/01/2006 00:00:00\" ${aspnet-item:variable=anothervariable:culture=pl-PL} - produces \"2006-01-01 00:00:00\" ${aspnet-item:variable=myvariable:padding=5} - produces \" 123\" ${aspnet-item:variable=myvariable:padding=-5} - produces \"123 \" ${aspnet-item:variable=stringvariable:upperCase=true} - produces \"AAA BBB\"","title":"AspNet HttpContext Item Layout Renderer"},{"location":"AspNet-HttpContext-Item-Layout-Renderer/#configuration-syntax","text":"${aspnet-item:variable=String:objectpath=String:format=String}","title":"Configuration Syntax"},{"location":"AspNet-HttpContext-Item-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNet-HttpContext-Item-Layout-Renderer/#rendering-options","text":"item - Key for lookup in Items-dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2 and replaces EvaluateAsNestedProperties -option","title":"Rendering Options"},{"location":"AspNet-HttpContext-Item-Layout-Renderer/#examples","text":"You can set the value of an ASP.NET Item variable by using the following code: Example usage of ${aspnet-item} HttpContext.Items[\"myvariable\"] = 123; HttpContext.Items[\"stringvariable\"] = \"aaa BBB\"; HttpContext.Items[\"anothervariable\"] = DateTime.Now; ${aspnet-item:variable=myvariable} - produces \"123\" ${aspnet-item:variable=anothervariable} - produces \"01/01/2006 00:00:00\" ${aspnet-item:variable=anothervariable:culture=pl-PL} - produces \"2006-01-01 00:00:00\" ${aspnet-item:variable=myvariable:padding=5} - produces \" 123\" ${aspnet-item:variable=myvariable:padding=-5} - produces \"123 \" ${aspnet-item:variable=stringvariable:upperCase=true} - produces \"AAA BBB\"","title":"Examples"},{"location":"AspNet-MVC-Action-Layout-Renderer/","text":"ASP.NET MVC Action-Name by lookup of action -value in HttpContext.Current.GetRouteData Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-mvc-action} Remarks Use this layout renderer to insert the Action Method from MVC Pipeline. See also AspNetRequest-RouteParameters-Layout-Renderer for lookup of other Route-Parameter Values.","title":"AspNet MVC Action Layout Renderer"},{"location":"AspNet-MVC-Action-Layout-Renderer/#configuration-syntax","text":"${aspnet-mvc-action}","title":"Configuration Syntax"},{"location":"AspNet-MVC-Action-Layout-Renderer/#remarks","text":"Use this layout renderer to insert the Action Method from MVC Pipeline. See also AspNetRequest-RouteParameters-Layout-Renderer for lookup of other Route-Parameter Values.","title":"Remarks"},{"location":"AspNet-MVC-Controller-Layout-Renderer/","text":"ASP.NET MVC Controller-Name by lookup of controller -value in HttpContext.Current.GetRouteData Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-mvc-controller} Remarks Use this layout renderer to insert the Controller from MVC Pipeline. See also AspNetRequest-RouteParameters-Layout-Renderer for lookup of other Route-Parameter Values.","title":"AspNet MVC Controller Layout Renderer"},{"location":"AspNet-MVC-Controller-Layout-Renderer/#configuration-syntax","text":"${aspnet-mvc-controller}","title":"Configuration Syntax"},{"location":"AspNet-MVC-Controller-Layout-Renderer/#remarks","text":"Use this layout renderer to insert the Controller from MVC Pipeline. See also AspNetRequest-RouteParameters-Layout-Renderer for lookup of other Route-Parameter Values.","title":"Remarks"},{"location":"AspNet-Request-Bidirectional-Stream-Layout-Renderer/","text":"ASP.NET Request capable of upgrading connection to an opaque, bidirectional stream. 1 = Capable / Upgradable 0 = Not available Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-bidirectional-stream}","title":"AspNet Request Bidirectional Stream Layout Renderer"},{"location":"AspNet-Request-Bidirectional-Stream-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-bidirectional-stream}","title":"Configuration Syntax"},{"location":"AspNet-Request-Client-Certificate-Layout-Renderer/","text":"ASP.NET Request Client Certificate Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-request-client-certificate}","title":"AspNet Request Client Certificate Layout Renderer"},{"location":"AspNet-Request-Client-Certificate-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-client-certificate}","title":"Configuration Syntax"},{"location":"AspNet-Request-ConnectionId-Layout-Renderer/","text":"ASP.NET Http Request Connection Id . The unique identifier that represents the connection. Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-connection-id}","title":"AspNet Request ConnectionId Layout Renderer"},{"location":"AspNet-Request-ConnectionId-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-connection-id}","title":"Configuration Syntax"},{"location":"AspNet-Request-ContentLength-Layout-Renderer/","text":"ASP.NET Request Header Content-Length (Ex. 1234 ) Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.0.0 and NLog.Web v5.0.0 Configuration Syntax ${aspnet-request-contentlength}","title":"AspNet Request ContentLength Layout Renderer"},{"location":"AspNet-Request-ContentLength-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-contentlength}","title":"Configuration Syntax"},{"location":"AspNet-Request-ContentType-layout-renderer/","text":"ASP.NET Content-Type header (Ex. application/json ) Platforms Supported: All Introduced with NLog.Web.AspNetCore v4.4.0 and NLog.Web v4.8.0 Configuration Syntax ${aspnet-request-contenttype}","title":"AspNet Request ContentType layout renderer"},{"location":"AspNet-Request-ContentType-layout-renderer/#configuration-syntax","text":"${aspnet-request-contenttype}","title":"Configuration Syntax"},{"location":"AspNet-Request-Duration-Layout-Renderer/","text":"ASP.NET Request Duration. Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.0.0 and NLog.Web v5.0.0 Configuration Syntax ${aspnet-request-duration} Options format - TimeSpan format. Can be any argument accepted by TimeSpan.ToString(format) . string . Default null (Outputs milliseconds) Culture - The culture used for rendering. Default CultureInfo.InvariantCulture","title":"AspNet Request Duration Layout Renderer"},{"location":"AspNet-Request-Duration-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-duration}","title":"Configuration Syntax"},{"location":"AspNet-Request-Duration-Layout-Renderer/#options","text":"format - TimeSpan format. Can be any argument accepted by TimeSpan.ToString(format) . string . Default null (Outputs milliseconds) Culture - The culture used for rendering. Default CultureInfo.InvariantCulture","title":"Options"},{"location":"AspNet-Request-HTTP-Transport-Type-Layout-Renderer/","text":"ASP.NET supported transport types that the client can use to send HTTP requests (bitwise combination). None (0) - Specifies that no transport is used. WebSockets (1) - Specifies that the web sockets transport is used. ServerSentEvents (2) - Specifies that the server sent events transport is used. LongPolling (4) - Specifies that the long polling transport is used. Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-http-transport-type}","title":"AspNet Request HTTP Transport Type Layout Renderer"},{"location":"AspNet-Request-HTTP-Transport-Type-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-http-transport-type}","title":"Configuration Syntax"},{"location":"AspNet-Request-Has-Posted-Body-Layout-Renderer/","text":"ASP.NET Http Request CanHaveBody . Whether body-payload was posted with the request (ContentLength > 0) Platforms Supported: .NET5 or newer Introduced with NLog.Web.AspNetCore v5.1.1 Configuration Syntax ${aspnet-request-has-posted-body}","title":"AspNet Request Has Posted Body Layout Renderer"},{"location":"AspNet-Request-Has-Posted-Body-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-has-posted-body}","title":"Configuration Syntax"},{"location":"AspNet-Request-IP-Layout-Renderer/","text":"Render Client IP address Platforms Supported: All Introduced in NLog Web.AspNetCore 4.4.0 & NLog.Web 4.5.0 Configuration Syntax ${aspnet-request-ip} Parameters CheckForwardedForHeader - Should check value of X-Forwarded-For header (Default = false) Introduced with NLog Web.AspNetCore 4.7.1 & NLog.Web 4.7.1 CheckForwardedForHeaderOffset - Should check value of X-Forwarded-For header and specify index-offset from comma-separated-split-array (Default = 0) Introduced with NLog Web.AspNetCore 5.2.2 Remarks AspNetCore - Uses underlying connection for this request. See HttpContext.Connection.RemoteIpAddress AspNet - Returns the REMOTE_ADDR -ServerVariables See also AspNetRequest Host Layout Renderer","title":"AspNet Request IP Layout Renderer"},{"location":"AspNet-Request-IP-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-ip}","title":"Configuration Syntax"},{"location":"AspNet-Request-IP-Layout-Renderer/#parameters","text":"CheckForwardedForHeader - Should check value of X-Forwarded-For header (Default = false) Introduced with NLog Web.AspNetCore 4.7.1 & NLog.Web 4.7.1 CheckForwardedForHeaderOffset - Should check value of X-Forwarded-For header and specify index-offset from comma-separated-split-array (Default = 0) Introduced with NLog Web.AspNetCore 5.2.2","title":"Parameters"},{"location":"AspNet-Request-IP-Layout-Renderer/#remarks","text":"AspNetCore - Uses underlying connection for this request. See HttpContext.Connection.RemoteIpAddress AspNet - Returns the REMOTE_ADDR -ServerVariables See also AspNetRequest Host Layout Renderer","title":"Remarks"},{"location":"AspNet-Request-Inherent-KeepAlive-Layout-Renderer/","text":"ASP.NET Request using connection transport capable of \"inherent keep-alive\" 1 - Can inform the client whether connection is still active. 0 = inherent keep-alive not available. The most common example of this feature is the Long Polling HTTP transport Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-inherent-keep-alive}","title":"AspNet Request Inherent KeepAlive Layout Renderer"},{"location":"AspNet-Request-Inherent-KeepAlive-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-inherent-keep-alive}","title":"Configuration Syntax"},{"location":"AspNet-Request-IsWebSocket-Layout-Renderer/","text":"ASP.NET Request HttpContext.WebSockets.IsWebSocketRequest as 1 or 0 Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-request-is-web-socket}","title":"AspNet Request IsWebSocket Layout Renderer"},{"location":"AspNet-Request-IsWebSocket-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-is-web-socket}","title":"Configuration Syntax"},{"location":"AspNet-Request-Local-IP-Layout-Renderer/","text":"ASP.NET Request HttpContext.Connection.LocalIpAddress Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-request-local-ip}","title":"AspNet Request Local IP Layout Renderer"},{"location":"AspNet-Request-Local-IP-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-local-ip}","title":"Configuration Syntax"},{"location":"AspNet-Request-Local-Port-Layout-Renderer/","text":"ASP.NET Request HttpContext.Connection.LocalPort Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-request-local-port}","title":"AspNet Request Local Port Layout Renderer"},{"location":"AspNet-Request-Local-Port-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-local-port}","title":"Configuration Syntax"},{"location":"AspNet-Request-Remote-Port-Layout-Renderer/","text":"ASP.NET Request HttpContext.Connection.RemotePort Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-request-remote-port}","title":"AspNet Request Remote Port Layout Renderer"},{"location":"AspNet-Request-Remote-Port-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-remote-port}","title":"Configuration Syntax"},{"location":"AspNet-Request-ServerVariable-Layout-Renderer/","text":"Render ASP.NET Server Variable (Ex. APP_POOL_ID) Platforms Supported: All Introduced in NLog Web.AspNetCore 5.1.0 & NLog.Web 5.1.0 Configuration Syntax ${aspnet-request-servervariable:item=APP_POOL_ID}","title":"AspNet Request ServerVariable Layout Renderer"},{"location":"AspNet-Request-ServerVariable-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-servervariable:item=APP_POOL_ID}","title":"Configuration Syntax"},{"location":"AspNet-Request-StreamId-Layout-Renderer/","text":"ASP.NET Http Request Stream Id . The unique identifier that represents the reusable socket. Platforms Supported: .NET5 or newer Introduced with NLog.Web.AspNetCore v5.1.1 Configuration Syntax ${aspnet-request-stream-id}","title":"AspNet Request StreamId Layout Renderer"},{"location":"AspNet-Request-StreamId-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-stream-id}","title":"Configuration Syntax"},{"location":"AspNet-Request-TLS-Handshake-Layout-Renderer/","text":"ASP.NET TLS Handshake Features ITlsHandshakeFeature of the connection. Platforms Supported: Limited (Only supported in ASP.NET Core ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-tls-handshake:property=Protocol} Property Enum CipherAlgorithm - Gets the CipherAlgorithmType . CipherStrength - Gets the cipher strength. HashAlgorithm - Gets the HashAlgorithmType . HashStrength - Gets the hash strength. KeyExchangeAlgorithm - Gets the ExchangeAlgorithmType . KeyExchangeStrength - Gets the key exchange algorithm strength. Protocol - Gets the SslProtocols .","title":"AspNet Request TLS Handshake Layout Renderer"},{"location":"AspNet-Request-TLS-Handshake-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-tls-handshake:property=Protocol}","title":"Configuration Syntax"},{"location":"AspNet-Request-TLS-Handshake-Layout-Renderer/#property-enum","text":"CipherAlgorithm - Gets the CipherAlgorithmType . CipherStrength - Gets the cipher strength. HashAlgorithm - Gets the HashAlgorithmType . HashStrength - Gets the hash strength. KeyExchangeAlgorithm - Gets the ExchangeAlgorithmType . KeyExchangeStrength - Gets the key exchange algorithm strength. Protocol - Gets the SslProtocols .","title":"Property Enum"},{"location":"AspNet-Request-TLS-Token-Bindng-Layout-Renderer/","text":"ASP.NET TLS Token Bindings for Provider and Referrer Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-tls-token-binding:property=provider} Options Property - Tls Token Binding Source Provider - Tls Token Binding for Provider Referrer - Tls Token Binding for Referrer Format - Tls Token Binding Format Base64 - Emit the byte array using Convert.ToBase64(byte[]) Hex - Emit the byte array using BitConverter.ToString(byte[])","title":"AspNet Request TLS Token Bindng Layout Renderer"},{"location":"AspNet-Request-TLS-Token-Bindng-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-tls-token-binding:property=provider}","title":"Configuration Syntax"},{"location":"AspNet-Request-TLS-Token-Bindng-Layout-Renderer/#options","text":"Property - Tls Token Binding Source Provider - Tls Token Binding for Provider Referrer - Tls Token Binding for Referrer Format - Tls Token Binding Format Base64 - Emit the byte array using Convert.ToBase64(byte[]) Hex - Emit the byte array using BitConverter.ToString(byte[])","title":"Options"},{"location":"AspNet-Request-Tracking-Consent-Layout-Renderer/","text":"ASP.NET Tracking Consent Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-tracking-consent:property=CanTrack} Options Property - Enum Values: CanTrack - Indicates either if consent has been given ( 1 ), or if consent is not required ( 0 ) HasConsent - Indicates if consent was given. IsConsentNeeded - Indicates if consent is required for the given request.","title":"AspNet Request Tracking Consent Layout Renderer"},{"location":"AspNet-Request-Tracking-Consent-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-tracking-consent:property=CanTrack}","title":"Configuration Syntax"},{"location":"AspNet-Request-Tracking-Consent-Layout-Renderer/#options","text":"Property - Enum Values: CanTrack - Indicates either if consent has been given ( 1 ), or if consent is not required ( 0 ) HasConsent - Indicates if consent was given. IsConsentNeeded - Indicates if consent is required for the given request.","title":"Options"},{"location":"AspNet-Request-Trailers-Layout-Renderer/","text":"ASP.NET Request Trailers Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-request-trailers} Options Rendering Options Items - Trailer names to be rendered. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the TrailerNames -option. Exclude - Trailer names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1","title":"AspNet Request Trailers Layout Renderer"},{"location":"AspNet-Request-Trailers-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-trailers}","title":"Configuration Syntax"},{"location":"AspNet-Request-Trailers-Layout-Renderer/#options","text":"","title":"Options"},{"location":"AspNet-Request-Trailers-Layout-Renderer/#rendering-options","text":"Items - Trailer names to be rendered. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the TrailerNames -option. Exclude - Trailer names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2","title":"Rendering Options"},{"location":"AspNet-Request-Trailers-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1","title":"Formatting options"},{"location":"AspNet-Request-WebSocket-Requested-Protocols-Layout-Renderer/","text":"ASP.NET Request HttpContext.WebSockets.WebSocketRequestedProtocols Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 (NET46) Configuration Syntax ${aspnet-request-web-socket-requested-protocols} Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array itemSeparator Separator between items. Default: , . Only applies when OutputFormat is Flat .","title":"AspNet Request WebSocket Requested Protocols Layout Renderer"},{"location":"AspNet-Request-WebSocket-Requested-Protocols-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-web-socket-requested-protocols}","title":"Configuration Syntax"},{"location":"AspNet-Request-WebSocket-Requested-Protocols-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array itemSeparator Separator between items. Default: , . Only applies when OutputFormat is Flat .","title":"Formatting options"},{"location":"AspNet-Request-posted-body-layout-renderer/","text":"Render the posted body, e.g. FORM or Ajax POST Platforms Supported: All Introduced in NLog.Web.AspNetCore v5.1.0 using NLogRequestPostedBodyMiddleware , and in NLog.Web v5.1.0 using NLogRequestPostedBodyModule . \u26a0\ufe0f All versions before NLog.Web.AspNetCore v5.1.0 should not be used, as ${aspnet-request-posted-body} caused random failures for the Web-Application. Configuration Syntax ${aspnet-request-posted-body} Render example: {username:xyz,password:xyz} Remarks Will buffer the input-stream (if allowed) and capture the posted-body as string-value in the HttpContext Items Dictionary. ASP.NET Core Requirements NLog.Web.AspNetCore 5.1.0+ Register NLogRequestPostedBodyMiddleware as middleware in the Configure method of Startup class The middelware will activate EnablesBuffering when matching the criteria. // needed for ${aspnet-request-posted-body} with an API Controller. // The options default to only logging a maximum of 30KB, since above that the ASP.NET Core framework // uses a temporary file on disk instead of a memory buffer. // Also, only content types starting with \u2018text/\u2018, or those ending with \u2018xml\u2019, \u2018html\u2019, \u2018json\u2019, or content types // that have the word \u2018charset\u2019 are logged, since we desire to log strings and not binary content // Those can be overridden in the options if necessary. But typically the default options should be adequate. app.UseMiddleware<NLog.Web.NLogRequestPostedBodyMiddleware> (new NLog.Web.NLogRequestPostedBodyMiddlewareOptions()); Full Example: public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(\"/Home/Error\"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); // needed for ${aspnet-request-posted-body} with an API Controller. app.UseMiddleware<NLog.Web.NLogRequestPostedBodyMiddleware>( new NLog.Web.NLogRequestPostedBodyMiddlewareOptions()); app.UseEndpoints(endpoints => { endpoints.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); }); NLogRequestPostedBodyMiddleware Options - int MaxContentLength - The maximum request posted body that will be captured. Defaults to 30 KB. - HttpRequest.EnableBuffer() is documented as using memory buffer until 30 KB, then this will use temp files on disk, which could have a performance impact. IList<KeyValuePair<string,string>> AllowContentTypes The Key is the prefix value such as \u2018text\u2019. The Value is the suffix value such as \u2018html\u2019. The default contents of this property are: 'application/', 'json' 'application/', 'xml' 'application/', 'html' 'text/', '' '', 'charset' Predicate<HttpContext> ShouldCapture() By default this method returns true if The content length is not null and is <= MaxContentLength The content type must match one of the entries in the AllowContentTypes List. For a match the ContentType must StartsWith the Key, case insensitive, and also have an IndexOf the Value, case insensitive. An empty string for the Key or for the Value acts as a wildcard match. The method has the HttpContext as the parameter, so a user wishing to override this property should have all the properties required to implement an override. See also: HTTP-Request-Logging","title":"AspNet Request posted body layout renderer"},{"location":"AspNet-Request-posted-body-layout-renderer/#configuration-syntax","text":"${aspnet-request-posted-body} Render example: {username:xyz,password:xyz}","title":"Configuration Syntax"},{"location":"AspNet-Request-posted-body-layout-renderer/#remarks","text":"Will buffer the input-stream (if allowed) and capture the posted-body as string-value in the HttpContext Items Dictionary.","title":"Remarks"},{"location":"AspNet-Request-posted-body-layout-renderer/#aspnet-core-requirements","text":"NLog.Web.AspNetCore 5.1.0+ Register NLogRequestPostedBodyMiddleware as middleware in the Configure method of Startup class The middelware will activate EnablesBuffering when matching the criteria. // needed for ${aspnet-request-posted-body} with an API Controller. // The options default to only logging a maximum of 30KB, since above that the ASP.NET Core framework // uses a temporary file on disk instead of a memory buffer. // Also, only content types starting with \u2018text/\u2018, or those ending with \u2018xml\u2019, \u2018html\u2019, \u2018json\u2019, or content types // that have the word \u2018charset\u2019 are logged, since we desire to log strings and not binary content // Those can be overridden in the options if necessary. But typically the default options should be adequate. app.UseMiddleware<NLog.Web.NLogRequestPostedBodyMiddleware> (new NLog.Web.NLogRequestPostedBodyMiddlewareOptions()); Full Example: public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(\"/Home/Error\"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); // needed for ${aspnet-request-posted-body} with an API Controller. app.UseMiddleware<NLog.Web.NLogRequestPostedBodyMiddleware>( new NLog.Web.NLogRequestPostedBodyMiddlewareOptions()); app.UseEndpoints(endpoints => { endpoints.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); }); NLogRequestPostedBodyMiddleware Options - int MaxContentLength - The maximum request posted body that will be captured. Defaults to 30 KB. - HttpRequest.EnableBuffer() is documented as using memory buffer until 30 KB, then this will use temp files on disk, which could have a performance impact. IList<KeyValuePair<string,string>> AllowContentTypes The Key is the prefix value such as \u2018text\u2019. The Value is the suffix value such as \u2018html\u2019. The default contents of this property are: 'application/', 'json' 'application/', 'xml' 'application/', 'html' 'text/', '' '', 'charset' Predicate<HttpContext> ShouldCapture() By default this method returns true if The content length is not null and is <= MaxContentLength The content type must match one of the entries in the AllowContentTypes List. For a match the ContentType must StartsWith the Key, case insensitive, and also have an IndexOf the Value, case insensitive. An empty string for the Key or for the Value acts as a wildcard match. The method has the HttpContext as the parameter, so a user wishing to override this property should have all the properties required to implement an override. See also: HTTP-Request-Logging","title":"ASP.NET Core Requirements"},{"location":"AspNet-Response-ContentLength-Layout-Renderer/","text":"ASP.NET Response Header Content-Length (Ex. 1234 ) Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.0.0 and NLog.Web v5.0.0 Configuration Syntax ${aspnet-response-contentlength}","title":"AspNet Response ContentLength Layout Renderer"},{"location":"AspNet-Response-ContentLength-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-contentlength}","title":"Configuration Syntax"},{"location":"AspNet-Response-ContentType-Layout-Renderer/","text":"ASP.NET Response Header Content-Type (Ex. application/json ) Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-response-contenttype}","title":"AspNet Response ContentType Layout Renderer"},{"location":"AspNet-Response-ContentType-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-contenttype}","title":"Configuration Syntax"},{"location":"AspNet-Response-Cookie-Layout-Renderer/","text":"Renders the Cookie Name and Values stored in the ASP.NET Response Cookies collection. Platforms Supported: All Introduced in NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 Configuration Syntax ${aspnet-response-cookie:cookieNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean} Parameters Rendering Options items - Cookie key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the cookieNames -option. exclude - Cookie key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary. itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between key and value. Default: = . Only applies when OutputFormat is Flat . objectSeparator - Separator between object-collections of key-value-pair-items. Default: ; . Only applies when OutputFormat is Flat and Verbose is True . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1 Verbose - Render additional properties of the HttpCookie-object (Domain, Path, Expires, Secure, HttpOnly). Examples In C# code: Request.Cookies[\"key1\"] = \"value1\"; Request.Cookies[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\"; Log single cookie in default Flat output format ${aspnet-response-cookie:CookieNames=key1} Will print: \"key1=value1\" Log multiple cookies in default Flat output format ${aspnet-response-cookie:CookieNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\" Log single cookie in JSON output format ${aspnet-response-cookie:CookieNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}] Log multiple cookies in JSON output format ${aspnet-response-cookie:CookieNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}] Log single cookie as JSON dictionary output format ${aspnet-response-cookie:CookieNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"} Log single cookie in Flat output format as value only ${aspnet-response-cookie:CookieNames=key1:ValuesOnly=true} Will print: \"value1\" Log single cookie in JSON output format as value only ${aspnet-response-cookie:CookieNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"] Log multiple cookies in JSON output format as value only ${aspnet-response-cookie:CookieNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"AspNet Response Cookie Layout Renderer"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-cookie:cookieNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#rendering-options","text":"items - Cookie key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the cookieNames -option. exclude - Cookie key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary. itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between key and value. Default: = . Only applies when OutputFormat is Flat . objectSeparator - Separator between object-collections of key-value-pair-items. Default: ; . Only applies when OutputFormat is Flat and Verbose is True . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1 Verbose - Render additional properties of the HttpCookie-object (Domain, Path, Expires, Secure, HttpOnly).","title":"Rendering Options"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#examples","text":"In C# code: Request.Cookies[\"key1\"] = \"value1\"; Request.Cookies[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\";","title":"Examples"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-single-cookie-in-default-flat-output-format","text":"${aspnet-response-cookie:CookieNames=key1} Will print: \"key1=value1\"","title":"Log single cookie in default Flat output format"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-multiple-cookies-in-default-flat-output-format","text":"${aspnet-response-cookie:CookieNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\"","title":"Log multiple cookies in default Flat output format"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-single-cookie-in-json-output-format","text":"${aspnet-response-cookie:CookieNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}]","title":"Log single cookie in JSON output format"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-multiple-cookies-in-json-output-format","text":"${aspnet-response-cookie:CookieNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}]","title":"Log multiple cookies in JSON output format"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-single-cookie-as-json-dictionary-output-format","text":"${aspnet-response-cookie:CookieNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"}","title":"Log single cookie as JSON dictionary output format"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-single-cookie-in-flat-output-format-as-value-only","text":"${aspnet-response-cookie:CookieNames=key1:ValuesOnly=true} Will print: \"value1\"","title":"Log single cookie in Flat output format as value only"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-single-cookie-in-json-output-format-as-value-only","text":"${aspnet-response-cookie:CookieNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"]","title":"Log single cookie in JSON output format as value only"},{"location":"AspNet-Response-Cookie-Layout-Renderer/#log-multiple-cookies-in-json-output-format-as-value-only","text":"${aspnet-response-cookie:CookieNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"Log multiple cookies in JSON output format as value only"},{"location":"AspNet-Response-HTTPS-Compression-Layout-Renderer/","text":"ASP.NET Response HTTPS Compression Mode Default (0) - No value has been specified, use the configured defaults. DoNotCompress (1) - Opts out of compression over HTTPS. Enabling compression on HTTPS requests for remotely manipulable content may expose security problems. Compress (2) - Opts into compression over HTTPS. Enabling compression on HTTPS requests for remotely manipulable content may expose security problems. Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-response-https-compression}","title":"AspNet Response HTTPS Compression Layout Renderer"},{"location":"AspNet-Response-HTTPS-Compression-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-https-compression}","title":"Configuration Syntax"},{"location":"AspNet-Response-HasStarted-Layout-Renderer/","text":"ASP.NET Http Response HasStarted (as 0 or 1 ) Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.1.0 and NLog.Web v5.1.0 NET46 Configuration Syntax ${aspnet-response-has-started}","title":"AspNet Response HasStarted Layout Renderer"},{"location":"AspNet-Response-HasStarted-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-has-started}","title":"Configuration Syntax"},{"location":"AspNet-Response-Headers-Layout-Renderer/","text":"ASP.NET Response Headers key/value pairs. Platforms Supported: All Introduced in NLog.Web 5.1.0 and NLog.Web.AspNetCore 5.1.0 Configuration Syntax ${aspnet-response-headers:headerNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean} Parameters Rendering Options items - Header key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the headerNames -option. exclude - Header key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1 Remarks Use this layout renderer to log the value of the specified headers(s) stored in the ASP.NET Response Headers collection. Examples In C# code: Response.Headers[\"key1\"] = \"value1\"; Response.Headers[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\"; Log single header in default Flat output format ${aspnet-response-headers:HeaderNames=key1} Will print: \"key1=value1\" Log multiple headers in default Flat output format ${aspnet-response-headers:HeaderNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\" Log single header ie in JSON output format ${aspnet-response-headers:HeaderNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}] Log multiple headers in JSON output format ${aspnet-response-headers:HeaderNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}] Log single header as JSON dictionary: ${aspnet-response-headers:HeaderNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"} Log single header in Flat output format as value only ${aspnet-response-headers:HeaderNames=key1:ValuesOnly=true} Will print: \"value1\" Log single header in JSON output format as value only ${aspnet-response-headers:HeaderNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"] Log multiple headers in JSON output format as value only ${aspnet-response-headers:HeaderNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"AspNet Response Headers Layout Renderer"},{"location":"AspNet-Response-Headers-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-headers:headerNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNet-Response-Headers-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNet-Response-Headers-Layout-Renderer/#rendering-options","text":"items - Header key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the headerNames -option. exclude - Header key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2","title":"Rendering Options"},{"location":"AspNet-Response-Headers-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1","title":"Formatting options"},{"location":"AspNet-Response-Headers-Layout-Renderer/#remarks","text":"Use this layout renderer to log the value of the specified headers(s) stored in the ASP.NET Response Headers collection.","title":"Remarks"},{"location":"AspNet-Response-Headers-Layout-Renderer/#examples","text":"In C# code: Response.Headers[\"key1\"] = \"value1\"; Response.Headers[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\";","title":"Examples"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-single-header-in-default-flat-output-format","text":"${aspnet-response-headers:HeaderNames=key1} Will print: \"key1=value1\"","title":"Log single header in default Flat output format"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-multiple-headers-in-default-flat-output-format","text":"${aspnet-response-headers:HeaderNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\"","title":"Log multiple headers in default Flat output format"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-single-header-ie-in-json-output-format","text":"${aspnet-response-headers:HeaderNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}]","title":"Log single header ie in JSON output format"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-multiple-headers-in-json-output-format","text":"${aspnet-response-headers:HeaderNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}]","title":"Log multiple headers in JSON output format"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-single-header-as-json-dictionary","text":"${aspnet-response-headers:HeaderNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"}","title":"Log single header as JSON dictionary:"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-single-header-in-flat-output-format-as-value-only","text":"${aspnet-response-headers:HeaderNames=key1:ValuesOnly=true} Will print: \"value1\"","title":"Log single header in Flat output format as value only"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-single-header-in-json-output-format-as-value-only","text":"${aspnet-response-headers:HeaderNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"]","title":"Log single header in JSON output format as value only"},{"location":"AspNet-Response-Headers-Layout-Renderer/#log-multiple-headers-in-json-output-format-as-value-only","text":"${aspnet-response-headers:HeaderNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"Log multiple headers in JSON output format as value only"},{"location":"AspNet-Response-Trailers-Layout-Renderer/","text":"ASP.NET Response Trailers Platforms Supported: Limited (Only supported in Asp.NetCore ) Introduced with NLog.Web.AspNetCore v5.1.0 Configuration Syntax ${aspnet-response-trailers} Options Rendering Options Items - Trailer names to be rendered. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the TrailerNames -option. Exclude - Trailer names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1","title":"AspNet Response Trailers Layout Renderer"},{"location":"AspNet-Response-Trailers-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-trailers}","title":"Configuration Syntax"},{"location":"AspNet-Response-Trailers-Layout-Renderer/#options","text":"","title":"Options"},{"location":"AspNet-Response-Trailers-Layout-Renderer/#rendering-options","text":"Items - Trailer names to be rendered. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the TrailerNames -option. Exclude - Trailer names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2","title":"Rendering Options"},{"location":"AspNet-Response-Trailers-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1","title":"Formatting options"},{"location":"AspNet-User-Claim-Layout-Renderer/","text":"ASP.NET User Claims authorization values. Platforms Supported: All Introduced with NLog.Web.AspNetCore v4.10.0, and with NLog.Web v5.1.0 for NET46 Configuration Syntax ${aspnet-user-claim:ClaimTypes.Name} Parameters ClaimType - default parameter. Key to lookup using ClaimsIdentity.FindFirst(string) with fallback to ClaimsPrincipal.FindFirst(string) . When value is prefixed with ClaimTypes. (Remember dot) then it will lookup in well-known claim types from ClaimTypes -constants. For example ClaimsTypes.Name Remarks See also ClaimTypes -constants.","title":"AspNet User Claim Layout Renderer"},{"location":"AspNet-User-Claim-Layout-Renderer/#configuration-syntax","text":"${aspnet-user-claim:ClaimTypes.Name}","title":"Configuration Syntax"},{"location":"AspNet-User-Claim-Layout-Renderer/#parameters","text":"ClaimType - default parameter. Key to lookup using ClaimsIdentity.FindFirst(string) with fallback to ClaimsPrincipal.FindFirst(string) . When value is prefixed with ClaimTypes. (Remember dot) then it will lookup in well-known claim types from ClaimTypes -constants. For example ClaimsTypes.Name","title":"Parameters"},{"location":"AspNet-User-Claim-Layout-Renderer/#remarks","text":"See also ClaimTypes -constants.","title":"Remarks"},{"location":"AspNet-User-isAuthenticated-Layout-Renderer/","text":"Render if user is authenticated. Renders 0 or 1 . Platforms Supported: All Introduced in NLog Web.AspNetCore 4.4.0 & NLog.Web 4.5.0 Configuration Syntax ${aspnet-user-isAuthenticated}","title":"AspNet User isAuthenticated Layout Renderer"},{"location":"AspNet-User-isAuthenticated-Layout-Renderer/#configuration-syntax","text":"${aspnet-user-isAuthenticated}","title":"Configuration Syntax"},{"location":"AspNet-WebRootPath-layout-renderer/","text":"ASP.NET WebRootPath (wwwroot) Platforms Supported: All (Supported in Asp.NET and Asp.NetCore ) Introduced with NLog.Web.AspNetCore v4.5.0 and NLog.Web v4.5.2 Configuration Syntax ${aspnet-webrootpath} Remarks The web root (wwwroot) is the root directory from which static content is served, while the content root is the application base path .","title":"AspNet WebRootPath layout renderer"},{"location":"AspNet-WebRootPath-layout-renderer/#configuration-syntax","text":"${aspnet-webrootpath}","title":"Configuration Syntax"},{"location":"AspNet-WebRootPath-layout-renderer/#remarks","text":"The web root (wwwroot) is the root directory from which static content is served, while the content root is the application base path .","title":"Remarks"},{"location":"AspNetApplication-layout-renderer/","text":"ASP.NET Application Dictionary Value. Platforms Support: Limited (Not supported in ASP.NET Core - ServerVariables are non-existing in ASP.NET Core. ) Configuration Syntax ${aspnet-application:variable=String} Parameters item - Key for lookup in Application-Dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2.1 Remarks Use this layout renderer to output the value of the specified variable stored in the ASP.NET Application dictionary","title":"AspNetApplication layout renderer"},{"location":"AspNetApplication-layout-renderer/#configuration-syntax","text":"${aspnet-application:variable=String}","title":"Configuration Syntax"},{"location":"AspNetApplication-layout-renderer/#parameters","text":"item - Key for lookup in Application-Dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2.1","title":"Parameters"},{"location":"AspNetApplication-layout-renderer/#remarks","text":"Use this layout renderer to output the value of the specified variable stored in the ASP.NET Application dictionary","title":"Remarks"},{"location":"AspNetBufferingWrapper-target/","text":"Buffers log events for the duration of ASP.NET request and sends them down to the wrapped target at the end of a request. Platforms Supported: All Introduced with NLog.Web.AspNetCore v5.2.1 and NLog.Web v4.0 Configuration Syntax <targets> <target xsi:type=\"AspNetBufferingWrapper\" name=\"String\" bufferGrowLimit=\"Integer\" growBufferAsNeeded=\"Boolean\" bufferSize=\"Integer\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Buffering Options bufferSize - Initial capacity for the buffering of log events. Integer Default: 100 bufferGrowLimit - Maximum number of log events that the buffer can keep, when growing beyond the limit and overflows then it will drop the oldest logevents. Integer Default: 0 (Disable growing) growBufferAsNeeded - Indicates whether buffer is allow to grow up to bufferGrowLimit . Boolean Default: True Remarks Typically this target is used in cooperation with PostFilteringTargetWrapper to provide verbose logging for failing requests and normal or no logging for successful requests. We need to make the decision of the final filtering rule to apply after all logs for a page have been generated. <targets> <target xsi:type=\"AspNetBufferingWrapper\" name=\"aspnetbuffer\" bufferGrowLimit=\"1000\"> <target xsi:type=\"PostFilteringWrapper\" defaultFilter=\"level &gt;= LogLevel.Info\"> <target xsi:type=\"File\" fileName=\"request-failed-${shortdate}.log\" /> <when exists=\"level &gt;= LogLevel.Warn\" filter=\"level &gt;= LogLevel.Debug\"/> </target> </target> </targets> ASP.NET Setup To use this target with NLog.Web, then you need to add NLogHttpModule to the <httpModules> -section of web.config: <?xml version=\"1.0\" ?> <configuration> <system.web> <httpModules> <add name=\"NLog\" type=\"NLog.Web.NLogHttpModule, NLog.Web\"/> </httpModules> </system.web> </configuration> ASP.NET Core Setup To use this target with NLog.Web.AspNetCore, then you need to enable the NLogBufferingTargetWrapperMiddleware in the Startup.cs file using NLog.Web; app.UseMiddleware<NLogBufferingTargetWrapperMiddleware>(); where app is an IApplicationBuilder.","title":"AspNetBufferingWrapper target"},{"location":"AspNetBufferingWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"AspNetBufferingWrapper\" name=\"String\" bufferGrowLimit=\"Integer\" growBufferAsNeeded=\"Boolean\" bufferSize=\"Integer\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"AspNetBufferingWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"AspNetBufferingWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"AspNetBufferingWrapper-target/#buffering-options","text":"bufferSize - Initial capacity for the buffering of log events. Integer Default: 100 bufferGrowLimit - Maximum number of log events that the buffer can keep, when growing beyond the limit and overflows then it will drop the oldest logevents. Integer Default: 0 (Disable growing) growBufferAsNeeded - Indicates whether buffer is allow to grow up to bufferGrowLimit . Boolean Default: True","title":"Buffering Options"},{"location":"AspNetBufferingWrapper-target/#remarks","text":"Typically this target is used in cooperation with PostFilteringTargetWrapper to provide verbose logging for failing requests and normal or no logging for successful requests. We need to make the decision of the final filtering rule to apply after all logs for a page have been generated. <targets> <target xsi:type=\"AspNetBufferingWrapper\" name=\"aspnetbuffer\" bufferGrowLimit=\"1000\"> <target xsi:type=\"PostFilteringWrapper\" defaultFilter=\"level &gt;= LogLevel.Info\"> <target xsi:type=\"File\" fileName=\"request-failed-${shortdate}.log\" /> <when exists=\"level &gt;= LogLevel.Warn\" filter=\"level &gt;= LogLevel.Debug\"/> </target> </target> </targets>","title":"Remarks"},{"location":"AspNetBufferingWrapper-target/#aspnet-setup","text":"To use this target with NLog.Web, then you need to add NLogHttpModule to the <httpModules> -section of web.config: <?xml version=\"1.0\" ?> <configuration> <system.web> <httpModules> <add name=\"NLog\" type=\"NLog.Web.NLogHttpModule, NLog.Web\"/> </httpModules> </system.web> </configuration>","title":"ASP.NET Setup"},{"location":"AspNetBufferingWrapper-target/#aspnet-core-setup","text":"To use this target with NLog.Web.AspNetCore, then you need to enable the NLogBufferingTargetWrapperMiddleware in the Startup.cs file using NLog.Web; app.UseMiddleware<NLogBufferingTargetWrapperMiddleware>(); where app is an IApplicationBuilder.","title":"ASP.NET Core Setup"},{"location":"AspNetEnvironment-layout-renderer/","text":"See AspNet-Environment-layout-renderer","title":"AspNetEnvironment layout renderer"},{"location":"AspNetItem-layout-renderer/","text":"ASP.NET Item variable from HttpContext.Items dictionary. Useful for storing state per request basis. Platforms Supported: All Configuration Syntax ${aspnet-item:item=String:objectpath=String:format=String} Parameters Rendering Options item - Key for lookup in Items-dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2 and replaces EvaluateAsNestedProperties -option Examples You can set the value of an ASP.NET Item variable by using the following code: Example usage of ${aspnet-item} HttpContext.Items[\"myvariable\"] = 123; HttpContext.Items[\"stringvariable\"] = \"aaa BBB\"; HttpContext.Items[\"anothervariable\"] = DateTime.Now; ${aspnet-item:variable=myvariable} - produces \"123\" ${aspnet-item:variable=anothervariable} - produces \"01/01/2006 00:00:00\" ${aspnet-item:variable=anothervariable:culture=pl-PL} - produces \"2006-01-01 00:00:00\" ${aspnet-item:variable=myvariable:padding=5} - produces \" 123\" ${aspnet-item:variable=myvariable:padding=-5} - produces \"123 \" ${aspnet-item:variable=stringvariable:upperCase=true} - produces \"AAA BBB\"","title":"AspNetItem layout renderer"},{"location":"AspNetItem-layout-renderer/#configuration-syntax","text":"${aspnet-item:item=String:objectpath=String:format=String}","title":"Configuration Syntax"},{"location":"AspNetItem-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetItem-layout-renderer/#rendering-options","text":"item - Key for lookup in Items-dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2 and replaces EvaluateAsNestedProperties -option","title":"Rendering Options"},{"location":"AspNetItem-layout-renderer/#examples","text":"You can set the value of an ASP.NET Item variable by using the following code: Example usage of ${aspnet-item} HttpContext.Items[\"myvariable\"] = 123; HttpContext.Items[\"stringvariable\"] = \"aaa BBB\"; HttpContext.Items[\"anothervariable\"] = DateTime.Now; ${aspnet-item:variable=myvariable} - produces \"123\" ${aspnet-item:variable=anothervariable} - produces \"01/01/2006 00:00:00\" ${aspnet-item:variable=anothervariable:culture=pl-PL} - produces \"2006-01-01 00:00:00\" ${aspnet-item:variable=myvariable:padding=5} - produces \" 123\" ${aspnet-item:variable=myvariable:padding=-5} - produces \"123 \" ${aspnet-item:variable=stringvariable:upperCase=true} - produces \"AAA BBB\"","title":"Examples"},{"location":"AspNetRequest-Cookie-Layout-Renderer/","text":"ASP.NET Request Cookie key/value pairs. Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-cookie:cookieNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean} Parameters Rendering Options items - Cookie key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 . Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the cookieNames -option. With NLog.Web / NLog.Web.AspNetCore v4.9 then all key/value pairs will be rendered, when not specified. * exclude - Cookie key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web / NLog.Web.AspNetCore v4.9 Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 ValuesOnly Only render the values of the key/value pairs. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v4.6 LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1 Remarks Use this layout renderer to log the value of the specified cookie(s) stored in the ASP.NET Request Cookies collection. Examples In C# code: Request.Cookies[\"key1\"] = \"value1\"; Request.Cookies[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\"; Log single cookie in default Flat output format ${aspnet-request-cookie:CookieNames=key1} Will print: \"key1=value1\" Log multiple cookies in default Flat output format ${aspnet-request-cookie:CookieNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\" Log single cookie in JSON output format ${aspnet-request-cookie:CookieNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}] Log multiple cookies in JSON output format ${aspnet-request-cookie:CookieNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}] Log single cookie as JSON dictionary output format ${aspnet-request-cookie:CookieNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"} Log single cookie in Flat output format as value only ${aspnet-request-cookie:CookieNames=key1:ValuesOnly=true} Will print: \"value1\" Log single cookie in JSON output format as value only ${aspnet-request-cookie:CookieNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"] Log multiple cookies in JSON output format as value only ${aspnet-request-cookie:CookieNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"AspNetRequest Cookie Layout Renderer"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-cookie:cookieNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#rendering-options","text":"items - Cookie key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 . Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the cookieNames -option. With NLog.Web / NLog.Web.AspNetCore v4.9 then all key/value pairs will be rendered, when not specified. * exclude - Cookie key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web / NLog.Web.AspNetCore v4.9","title":"Rendering Options"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 ValuesOnly Only render the values of the key/value pairs. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v4.6 LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1","title":"Formatting options"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#remarks","text":"Use this layout renderer to log the value of the specified cookie(s) stored in the ASP.NET Request Cookies collection.","title":"Remarks"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#examples","text":"In C# code: Request.Cookies[\"key1\"] = \"value1\"; Request.Cookies[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\";","title":"Examples"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-single-cookie-in-default-flat-output-format","text":"${aspnet-request-cookie:CookieNames=key1} Will print: \"key1=value1\"","title":"Log single cookie in default Flat output format"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-multiple-cookies-in-default-flat-output-format","text":"${aspnet-request-cookie:CookieNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\"","title":"Log multiple cookies in default Flat output format"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-single-cookie-in-json-output-format","text":"${aspnet-request-cookie:CookieNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}]","title":"Log single cookie in JSON output format"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-multiple-cookies-in-json-output-format","text":"${aspnet-request-cookie:CookieNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}]","title":"Log multiple cookies in JSON output format"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-single-cookie-as-json-dictionary-output-format","text":"${aspnet-request-cookie:CookieNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"}","title":"Log single cookie as JSON dictionary output format"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-single-cookie-in-flat-output-format-as-value-only","text":"${aspnet-request-cookie:CookieNames=key1:ValuesOnly=true} Will print: \"value1\"","title":"Log single cookie in Flat output format as value only"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-single-cookie-in-json-output-format-as-value-only","text":"${aspnet-request-cookie:CookieNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"]","title":"Log single cookie in JSON output format as value only"},{"location":"AspNetRequest-Cookie-Layout-Renderer/#log-multiple-cookies-in-json-output-format-as-value-only","text":"${aspnet-request-cookie:CookieNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"Log multiple cookies in JSON output format as value only"},{"location":"AspNetRequest-Form-Layout-Renderer/","text":"ASP.NET Request Form key/value pairs. Platforms Supported: All Introduced in NLog.Web 4.7 Configuration Syntax ${aspnet-request-form:include=String[]:exclude=String[]:outputFormat=Enum :itemSeparator=Layout:valueSeparator=Layout :valuesOnly=Boolean} Parameters Rendering Options items - Form key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.2, and replaces the include -option. exclude - Form key name(s) to exclude from the output. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 . Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . valuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1 Remarks Use this layout renderer to log the ASP.NET Request Form collection. Examples In C# code: httpContext.Request.Form = new FormCollection(new Dictionary<string, StringValues>{ { \"id\",\"1\" }, { \"name\",\"Test Person\" }, { \"token\",\"86abe8fe-2237-4f87-81af-0a4e522b4140\" } }); Log all Form data from the Request in default Flat output format ${aspnet-request-form} Will print: \"id=1,name=Test Person,token=86abe8fe-2237-4f87-81af-0a4e522b4140\" Log all Form data from the Request in JSON output format ${aspnet-request-form:OutputFormat=JSON} Will print: [{\"id\":\"1\"},{\"name\":\"Test Person\"},{\"token\":\"86abe8fe-2237-4f87-81af-0a4e522b4140\"}] Log only the specified Form keys from the Request in default Flat output format ${aspnet-request-form:Include=id,name} Will print: \"id=1,name=Test Person\" Log all Form data from the Request except for the specified keys in default Flat output format ${aspnet-request-form:Exclude=token} Will print: \"id=1,name=Test Person\" Log all Form data from the Request in Flat output format with each item separated by a new line ${aspnet-request-form:ItemSeparator=${newline}} Will print: \"id=1\\r\\nname=Test Person\\r\\ntoken=86abe8fe-2237-4f87-81af-0a4e522b4140\"","title":"AspNetRequest Form Layout Renderer"},{"location":"AspNetRequest-Form-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-form:include=String[]:exclude=String[]:outputFormat=Enum :itemSeparator=Layout:valueSeparator=Layout :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNetRequest-Form-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetRequest-Form-Layout-Renderer/#rendering-options","text":"items - Form key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.2, and replaces the include -option. exclude - Form key name(s) to exclude from the output. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 .","title":"Rendering Options"},{"location":"AspNetRequest-Form-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . valuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore 5.1.1","title":"Formatting options"},{"location":"AspNetRequest-Form-Layout-Renderer/#remarks","text":"Use this layout renderer to log the ASP.NET Request Form collection.","title":"Remarks"},{"location":"AspNetRequest-Form-Layout-Renderer/#examples","text":"In C# code: httpContext.Request.Form = new FormCollection(new Dictionary<string, StringValues>{ { \"id\",\"1\" }, { \"name\",\"Test Person\" }, { \"token\",\"86abe8fe-2237-4f87-81af-0a4e522b4140\" } });","title":"Examples"},{"location":"AspNetRequest-Form-Layout-Renderer/#log-all-form-data-from-the-request-in-default-flat-output-format","text":"${aspnet-request-form} Will print: \"id=1,name=Test Person,token=86abe8fe-2237-4f87-81af-0a4e522b4140\"","title":"Log all Form data from the Request in default Flat output format"},{"location":"AspNetRequest-Form-Layout-Renderer/#log-all-form-data-from-the-request-in-json-output-format","text":"${aspnet-request-form:OutputFormat=JSON} Will print: [{\"id\":\"1\"},{\"name\":\"Test Person\"},{\"token\":\"86abe8fe-2237-4f87-81af-0a4e522b4140\"}]","title":"Log all Form data from the Request in JSON output format"},{"location":"AspNetRequest-Form-Layout-Renderer/#log-only-the-specified-form-keys-from-the-request-in-default-flat-output-format","text":"${aspnet-request-form:Include=id,name} Will print: \"id=1,name=Test Person\"","title":"Log only the specified Form keys from the Request in default Flat output format"},{"location":"AspNetRequest-Form-Layout-Renderer/#log-all-form-data-from-the-request-except-for-the-specified-keys-in-default-flat-output-format","text":"${aspnet-request-form:Exclude=token} Will print: \"id=1,name=Test Person\"","title":"Log all Form data from the Request except for the specified keys in default Flat output format"},{"location":"AspNetRequest-Form-Layout-Renderer/#log-all-form-data-from-the-request-in-flat-output-format-with-each-item-separated-by-a-new-line","text":"${aspnet-request-form:ItemSeparator=${newline}} Will print: \"id=1\\r\\nname=Test Person\\r\\ntoken=86abe8fe-2237-4f87-81af-0a4e522b4140\"","title":"Log all Form data from the Request in Flat output format with each item separated by a new line"},{"location":"AspNetRequest-Headers-Layout-Renderer/","text":"ASP.NET Request Headers key/value pairs. Platforms Supported: All Introduced in NLog.Web 4.9 and NLog.Web.AspNetCore 4.9 Configuration Syntax ${aspnet-request-headers:headerNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean} Parameters Rendering Options items - Header key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the headerNames -option. exclude - Header key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1 Remarks Use this layout renderer to log the value of the specified headers(s) stored in the ASP.NET Request Headers collection. Examples In C# code: Request.Headers[\"key1\"] = \"value1\"; Request.Headers[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\"; Log single header in default Flat output format ${aspnet-request-headers:HeaderNames=key1} Will print: \"key1=value1\" Log multiple headers in default Flat output format ${aspnet-request-headers:HeaderNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\" Log single header ie in JSON output format ${aspnet-request-headers:HeaderNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}] Log multiple headers in JSON output format ${aspnet-request-headers:HeaderNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}] Log single header as JSON dictionary: ${aspnet-request-headers:HeaderNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"} Log single header in Flat output format as value only ${aspnet-request-headers:HeaderNames=key1:ValuesOnly=true} Will print: \"value1\" Log single header in JSON output format as value only ${aspnet-request-headers:HeaderNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"] Log multiple headers in JSON output format as value only ${aspnet-request-headers:HeaderNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"AspNetRequest Headers Layout Renderer"},{"location":"AspNetRequest-Headers-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-headers:headerNames=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNetRequest-Headers-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetRequest-Headers-Layout-Renderer/#rendering-options","text":"items - Header key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the headerNames -option. exclude - Header key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2","title":"Rendering Options"},{"location":"AspNetRequest-Headers-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1","title":"Formatting options"},{"location":"AspNetRequest-Headers-Layout-Renderer/#remarks","text":"Use this layout renderer to log the value of the specified headers(s) stored in the ASP.NET Request Headers collection.","title":"Remarks"},{"location":"AspNetRequest-Headers-Layout-Renderer/#examples","text":"In C# code: Request.Headers[\"key1\"] = \"value1\"; Request.Headers[\"id\"] = \"d4b20a34-6231-4201-83a6-c72599e41164\";","title":"Examples"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-single-header-in-default-flat-output-format","text":"${aspnet-request-headers:HeaderNames=key1} Will print: \"key1=value1\"","title":"Log single header in default Flat output format"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-multiple-headers-in-default-flat-output-format","text":"${aspnet-request-headers:HeaderNames=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\"","title":"Log multiple headers in default Flat output format"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-single-header-ie-in-json-output-format","text":"${aspnet-request-headers:HeaderNames=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}]","title":"Log single header ie in JSON output format"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-multiple-headers-in-json-output-format","text":"${aspnet-request-headers:HeaderNames=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}]","title":"Log multiple headers in JSON output format"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-single-header-as-json-dictionary","text":"${aspnet-request-headers:HeaderNames=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"}","title":"Log single header as JSON dictionary:"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-single-header-in-flat-output-format-as-value-only","text":"${aspnet-request-headers:HeaderNames=key1:ValuesOnly=true} Will print: \"value1\"","title":"Log single header in Flat output format as value only"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-single-header-in-json-output-format-as-value-only","text":"${aspnet-request-headers:HeaderNames=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"]","title":"Log single header in JSON output format as value only"},{"location":"AspNetRequest-Headers-Layout-Renderer/#log-multiple-headers-in-json-output-format-as-value-only","text":"${aspnet-request-headers:HeaderNames=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"Log multiple headers in JSON output format as value only"},{"location":"AspNetRequest-Host-Layout-Renderer/","text":"ASP.NET Request DNS name of the remote client Platforms Supported: All ( ASP.NET Core + ASP.NET ) Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-host} Remarks ASP.NET Core returns the Host -Header ASP.NET returns the REMOTE_ADDR -ServerVariable See also AspNet Request IP Layout Renderer","title":"AspNetRequest Host Layout Renderer"},{"location":"AspNetRequest-Host-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-host}","title":"Configuration Syntax"},{"location":"AspNetRequest-Host-Layout-Renderer/#remarks","text":"ASP.NET Core returns the Host -Header ASP.NET returns the REMOTE_ADDR -ServerVariable See also AspNet Request IP Layout Renderer","title":"Remarks"},{"location":"AspNetRequest-Method-Layout-Renderer/","text":"ASP.NET HTTP Method. GET/POST/PUT etc. Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-method} Remarks Use this layout renderer to insert the HTTP Request Method.","title":"AspNetRequest Method Layout Renderer"},{"location":"AspNetRequest-Method-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-method}","title":"Configuration Syntax"},{"location":"AspNetRequest-Method-Layout-Renderer/#remarks","text":"Use this layout renderer to insert the HTTP Request Method.","title":"Remarks"},{"location":"AspNetRequest-QueryString-Layout-Renderer/","text":"ASP.NET Request Query String key/value pairs. Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-querystring:queryStringKeys=String[]:outputFormat:Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean} Parameters Rendering Options items - Query String key(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the queryStringKeys -option. With NLog.Web / NLog.Web.AspNetCore v4.3.1 then all key/value pairs will be rendered, when not specified. exclude - Query String key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web v5.2.2 Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 ValuesOnly - Only render the values of the key/value pairs. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v4.6 LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1 Remarks Use this layout renderer to insert the value of the specified query string parameters stored in the ASP.NET Query String collection. Examples In C# code: Response.Redirect(\"myPage.aspx?key1=value1&id=d4b20a34-6231-4201-83a6-c72599e41164\"); Log single query string key/value pair in default Flat output format ${aspnet-request-querystring:QueryStringKeys=key1} Will print: \"key1=value1\" Log multiple query string key/value pairs in default Flat output format ${aspnet-request-querystring:QueryStringKeys=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\" Log single query string key/value pair in JSON output format ${aspnet-request-querystring:QueryStringKeys=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}] Log multiple query string key/value pairs in JSON output format ${aspnet-request-querystring:QueryStringKeys=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}] Log single query string key/value pair as JSON dictionary: ${aspnet-request-querystring:QueryStringKeys=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"} Log single query string key/value pair in Flat output format as value only ${aspnet-request-querystring:QueryStringKeys=key1:ValuesOnly=true} Will print: \"value1\" Log single query string key/value pair in JSON output format as value only ${aspnet-request-querystring:QueryStringKeys=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"] Log multiple query string key/value pairs in JSON output format as value only ${aspnet-request-querystring:QueryStringKeys=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"AspNetRequest QueryString Layout Renderer"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-querystring:queryStringKeys=String[]:outputFormat:Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#rendering-options","text":"items - Query String key(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the queryStringKeys -option. With NLog.Web / NLog.Web.AspNetCore v4.3.1 then all key/value pairs will be rendered, when not specified. exclude - Query String key names to be excluded. A list of keys can be passed as comma separated values, e.g.: Key1,Key2 Introduced with NLog.Web v5.2.2","title":"Rendering Options"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array (Introduced with NLog 5.0, replaces now obsolete Json ) JsonDictionary - Key-value-pair as JSON-dictionary. (Introduced with NLog 5.0, replaces now obsolete singleAsArray ) itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . Introduced in NLog.Web.AspNetCore 4.4 / NLog.Web 4.5 ValuesOnly - Only render the values of the key/value pairs. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v4.6 LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1","title":"Formatting options"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#remarks","text":"Use this layout renderer to insert the value of the specified query string parameters stored in the ASP.NET Query String collection.","title":"Remarks"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#examples","text":"In C# code: Response.Redirect(\"myPage.aspx?key1=value1&id=d4b20a34-6231-4201-83a6-c72599e41164\");","title":"Examples"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-single-query-string-keyvalue-pair-in-default-flat-output-format","text":"${aspnet-request-querystring:QueryStringKeys=key1} Will print: \"key1=value1\"","title":"Log single query string key/value pair in default Flat output format"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-multiple-query-string-keyvalue-pairs-in-default-flat-output-format","text":"${aspnet-request-querystring:QueryStringKeys=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\"","title":"Log multiple query string key/value pairs in default Flat output format"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-single-query-string-keyvalue-pair-in-json-output-format","text":"${aspnet-request-querystring:QueryStringKeys=key1:OutputFormat=JSON} Will print: [{\"key1\":\"value1\"}]","title":"Log single query string key/value pair in JSON output format"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-multiple-query-string-keyvalue-pairs-in-json-output-format","text":"${aspnet-request-querystring:QueryStringKeys=key1,id:OutputFormat=JSON} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}]","title":"Log multiple query string key/value pairs in JSON output format"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-single-query-string-keyvalue-pair-as-json-dictionary","text":"${aspnet-request-querystring:QueryStringKeys=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"}","title":"Log single query string key/value pair as JSON dictionary:"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-single-query-string-keyvalue-pair-in-flat-output-format-as-value-only","text":"${aspnet-request-querystring:QueryStringKeys=key1:ValuesOnly=true} Will print: \"value1\"","title":"Log single query string key/value pair in Flat output format as value only"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-single-query-string-keyvalue-pair-in-json-output-format-as-value-only","text":"${aspnet-request-querystring:QueryStringKeys=key1:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\"]","title":"Log single query string key/value pair in JSON output format as value only"},{"location":"AspNetRequest-QueryString-Layout-Renderer/#log-multiple-query-string-keyvalue-pairs-in-json-output-format-as-value-only","text":"${aspnet-request-querystring:QueryStringKeys=key1,id:OutputFormat=JSON:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"Log multiple query string key/value pairs in JSON output format as value only"},{"location":"AspNetRequest-Referrer-Renderer/","text":"ASP.NET Request HTTP URL Referrer. Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-referrer}","title":"AspNetRequest Referrer Renderer"},{"location":"AspNetRequest-Referrer-Renderer/#configuration-syntax","text":"${aspnet-request-referrer}","title":"Configuration Syntax"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/","text":"ASP.NET Request RouteParameters key/value pairs. Platforms Supported: All Introduced in NLog.Web 5.0 and NLog.Web.AspNetCore 5.0 Configuration Syntax ${aspnet-request-routeparameters:RouteParameterKeys=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean} Parameters Rendering Options items - RouteParameter key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the RouteParameterKeys -option. Formatting options outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1 Remarks Use this layout renderer to log the value of the specified route-parameter(s) stored in the ASP.NET GetRouteData() Values collection. Examples Log single route-parameter in default Flat output format ${aspnet-request-routeparameters:RouteParameterKeys=key1} Will print: \"key1=value1\" Log multiple route-parameters in default Flat output format ${aspnet-request-routeparameters:RouteParameterKeys=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\" Log single route-parameter in JSON output format ${aspnet-request-routeparameters:RouteParameterKeys=key1:OutputFormat=JsonArray} Will print: [{\"key1\":\"value1\"}] Log multiple route-parameters in JSON output format ${aspnet-request-routeparameters:RouteParameterKeys=key1,id:OutputFormat=JsonArray} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}] Log single route-parameter as JSON dictionary: ${aspnet-request-routeparameters:RouteParameterKeys=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"} Log single route-parameter in Flat output format as value only ${aspnet-request-routeparameters:RouteParameterKeys=key1:ValuesOnly=true} Will print: \"value1\" Log single route-parameter in JSON output format as value only ${aspnet-request-routeparameters:RouteParameterKeys=key1:OutputFormat=JsonArray:ValuesOnly=true} Will print: [\"value1\"] Log multiple route-parameters in JSON output format as value only ${aspnet-request-routeparameters:RouteParameterKeys=key1,id:OutputFormat=JsonArray:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"AspNetRequest RouteParameters Layout Renderer"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-routeparameters:RouteParameterKeys=String[]:outputFormat=Enum :itemSeparator=String:valueSeparator=String :valuesOnly=Boolean}","title":"Configuration Syntax"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#rendering-options","text":"items - RouteParameter key name(s). A list of keys can be passed as comma separated values, e.g.: Key1,Key2 (Not specified means all) Introduced with NLog.Web / NLog.Web.AspNetCore v5.2.1, and replaces the RouteParameterKeys -option.","title":"Rendering Options"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#formatting-options","text":"outputFormat - Renders as flat string or as JSON. Default: Flat . Flat - Key-value-pair as standard string JsonArray - Key-value-pair in JSON-array JsonDictionary - Key-value-pair as JSON-dictionary itemSeparator - Separator between items. Default: , . Only applies when OutputFormat is Flat . valueSeparator - Separator between value and key. Default: = . Only applies when OutputFormat is Flat . ValuesOnly - Only render the values of the key/value pairs. Default: false . LowerCaseKeys - Convert Keys to lowercase. Default: false . Introduced in NLog.Web / NLog.Web.AspNetCore v5.1.1","title":"Formatting options"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#remarks","text":"Use this layout renderer to log the value of the specified route-parameter(s) stored in the ASP.NET GetRouteData() Values collection.","title":"Remarks"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#examples","text":"","title":"Examples"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-single-route-parameter-in-default-flat-output-format","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1} Will print: \"key1=value1\"","title":"Log single route-parameter in default Flat output format"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-multiple-route-parameters-in-default-flat-output-format","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1,id} Will print: \"key1=value1,id=d4b20a34-6231-4201-83a6-c72599e41164\"","title":"Log multiple route-parameters in default Flat output format"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-single-route-parameter-in-json-output-format","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1:OutputFormat=JsonArray} Will print: [{\"key1\":\"value1\"}]","title":"Log single route-parameter in JSON output format"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-multiple-route-parameters-in-json-output-format","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1,id:OutputFormat=JsonArray} Will print: [{\"key1\":\"value1\",\"id\":\"d4b20a34-6231-4201-83a6-c72599e41164\"}]","title":"Log multiple route-parameters in JSON output format"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-single-route-parameter-as-json-dictionary","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1:OutputFormat=JsonDictionary} Will print: {\"key1\":\"value1\"}","title":"Log single route-parameter as JSON dictionary:"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-single-route-parameter-in-flat-output-format-as-value-only","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1:ValuesOnly=true} Will print: \"value1\"","title":"Log single route-parameter in Flat output format as value only"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-single-route-parameter-in-json-output-format-as-value-only","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1:OutputFormat=JsonArray:ValuesOnly=true} Will print: [\"value1\"]","title":"Log single route-parameter in JSON output format as value only"},{"location":"AspNetRequest-RouteParameters-Layout-Renderer/#log-multiple-route-parameters-in-json-output-format-as-value-only","text":"${aspnet-request-routeparameters:RouteParameterKeys=key1,id:OutputFormat=JsonArray:ValuesOnly=true} Will print: [\"value1\",\"d4b20a34-6231-4201-83a6-c72599e41164\"]","title":"Log multiple route-parameters in JSON output format as value only"},{"location":"AspNetRequest-Url-Layout-Renderer/","text":"ASP.NET Request URL Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-url:IncludeHost=boolean:IncludePort=boolean:IncludeQueryString=boolean:IncludeScheme=boolean} Parameters Properties - Controls what parts of the Url to output. Default = Scheme, Host, Path Introduced with NLog v5.1.1 Property Enum Values: Scheme Host Port Path Query IncludeHost - Include the host name? Default is true (Assigns Properties |= Host ). IncludePort - Include the port number? Default is false (Assigns Properties |= Port ). IncludeQueryString - include the querystring. Default is false (Assigns Properties |= Query ). IncludeScheme - Includes the sheme? (Ex. http:// or https:// ) (Assigns Properties |= Scheme ). Default is true . Introduced in NLog.Web.AspNetCore v4.4.1 and NLog.Web v4.5.1. IncludePath - Include the path? (Assigns Properties |= Path ). Default is true . Introduced in NLog.Web.AspNetCore v5.0 and NLog.Web v5.0. UseRawTarget - Extract the path from IHttpRequestFeature.RawTarget? Default is false . Introduced in NLog.Web.AspNetCore v4.9.2 (Not supported for NLog.Web) Examples ${aspnet-request-url:IncludeQueryString=true} - produces http://www.exmaple.com/?t=1 ${aspnet-request-url:IncludeQueryString=false} - produces http://www.exmaple.com/ ${aspnet-request-url:IncludePort=true} - produces http://www.exmaple.com:80/ ${aspnet-request-url:IncludePort=false} - produces http://www.exmaple.com/ ${aspnet-request-url:IncludePort=true:IncludeQueryString=true} - produces http://www.exmaple.com:80/?t=1 ${aspnet-request-url:IncludeScheme=false} - produces www.exmaple.com","title":"AspNetRequest Url Layout Renderer"},{"location":"AspNetRequest-Url-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-url:IncludeHost=boolean:IncludePort=boolean:IncludeQueryString=boolean:IncludeScheme=boolean}","title":"Configuration Syntax"},{"location":"AspNetRequest-Url-Layout-Renderer/#parameters","text":"Properties - Controls what parts of the Url to output. Default = Scheme, Host, Path Introduced with NLog v5.1.1 Property Enum Values: Scheme Host Port Path Query IncludeHost - Include the host name? Default is true (Assigns Properties |= Host ). IncludePort - Include the port number? Default is false (Assigns Properties |= Port ). IncludeQueryString - include the querystring. Default is false (Assigns Properties |= Query ). IncludeScheme - Includes the sheme? (Ex. http:// or https:// ) (Assigns Properties |= Scheme ). Default is true . Introduced in NLog.Web.AspNetCore v4.4.1 and NLog.Web v4.5.1. IncludePath - Include the path? (Assigns Properties |= Path ). Default is true . Introduced in NLog.Web.AspNetCore v5.0 and NLog.Web v5.0. UseRawTarget - Extract the path from IHttpRequestFeature.RawTarget? Default is false . Introduced in NLog.Web.AspNetCore v4.9.2 (Not supported for NLog.Web)","title":"Parameters"},{"location":"AspNetRequest-Url-Layout-Renderer/#examples","text":"${aspnet-request-url:IncludeQueryString=true} - produces http://www.exmaple.com/?t=1 ${aspnet-request-url:IncludeQueryString=false} - produces http://www.exmaple.com/ ${aspnet-request-url:IncludePort=true} - produces http://www.exmaple.com:80/ ${aspnet-request-url:IncludePort=false} - produces http://www.exmaple.com/ ${aspnet-request-url:IncludePort=true:IncludeQueryString=true} - produces http://www.exmaple.com:80/?t=1 ${aspnet-request-url:IncludeScheme=false} - produces www.exmaple.com","title":"Examples"},{"location":"AspNetRequest-UserAgent-Layout-Renderer/","text":"ASP.NET UserAgent Renderer. Platforms Supported: All Introduced in NLog.Web 4.3 Configuration Syntax ${aspnet-request-useragent} Remarks Use this layout renderer to insert the UserAgent from HTTP Request.","title":"AspNetRequest UserAgent Layout Renderer"},{"location":"AspNetRequest-UserAgent-Layout-Renderer/#configuration-syntax","text":"${aspnet-request-useragent}","title":"Configuration Syntax"},{"location":"AspNetRequest-UserAgent-Layout-Renderer/#remarks","text":"Use this layout renderer to insert the UserAgent from HTTP Request.","title":"Remarks"},{"location":"AspNetRequest-layout-renderer/","text":"ASP.NET Request variable. Platforms Supported: All ASP.NET Core This layout renderer is broken down to separate layout renders who are more ASP.NET Core compatible / future proof: ${aspnet-HttpContext-Item} - ASP.NET HttpContext Item Value. ${aspnet-Request-Cookie} - ASP.NET Request cookie content. ${aspnet-Request-Host} - ASP.NET Request host. ${aspnet-Request-Ip} - ASP.NET Request Client IP address ${aspnet-Request-Method} - ASP.NET Request method (GET, POST etc). ${aspnet-Request-QueryString} - ASP.NET Request querystring. ${aspnet-Request-Referrer} - ASP.NET Request referrer. ${aspnet-Request-UserAgent} - ASP.NET Request useragent. ${aspnet-Request-Url} - ASP.NET Request URL. ${aspnet-Request-Headers} - ASP.NET Request Headers. ${aspnet-Request-ServerVariable} - ASP.NET Server Variable. ${aspnet-User-Identity} - ASP.NET User Identity (Similar to AUTH_USER / REMOTE_USER / LOGON_USER ) And there are many more NLog LayoutRenderers to choose from Configuration Syntax ${aspnet-request:cookie=String:serverVariable=String:queryString=String :item=String:form=String:header=String} Parameters Rendering Options cookie - Cookie to be rendered. header - Request header. Introduced in NLog.Web 4.2 serverVariable - ServerVariables item to be rendered. See for possible options: msdn . Not supported on ASP.NET Core until NLog.Web.AspNetCore v5.1 queryString - QueryString variable to be rendered. item - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered. form - Form variable to be rendered. Note: The Form property is populated when the HTTP request Content-Type value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\". (see msdn ) Remarks Use this layout renderer to insert the value of the specified parameter of the ASP.NET Request object. This renderer requires the NLog.Web package. Examples Full URL Full URL without domain, eg default.aspx?id=512 ${aspnet-request:serverVariable=HTTP_URL}${aspnet-request:queryString} Referer URL doing the request. Including schema (e.g https:// ) and querystring ${aspnet-request:header=Referer} Content-Type Content-Type like application/json; charset=UTF-8 ${aspnet-request:header=Content-Type} Method Method like PUT, POST, GET etc ${aspnet-request:serverVariable=REQUEST_METHOD} User agent user agent, like Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 ${aspnet-request:serverVariable=HTTP_USER_AGENT}","title":"AspNetRequest layout renderer"},{"location":"AspNetRequest-layout-renderer/#aspnet-core","text":"This layout renderer is broken down to separate layout renders who are more ASP.NET Core compatible / future proof: ${aspnet-HttpContext-Item} - ASP.NET HttpContext Item Value. ${aspnet-Request-Cookie} - ASP.NET Request cookie content. ${aspnet-Request-Host} - ASP.NET Request host. ${aspnet-Request-Ip} - ASP.NET Request Client IP address ${aspnet-Request-Method} - ASP.NET Request method (GET, POST etc). ${aspnet-Request-QueryString} - ASP.NET Request querystring. ${aspnet-Request-Referrer} - ASP.NET Request referrer. ${aspnet-Request-UserAgent} - ASP.NET Request useragent. ${aspnet-Request-Url} - ASP.NET Request URL. ${aspnet-Request-Headers} - ASP.NET Request Headers. ${aspnet-Request-ServerVariable} - ASP.NET Server Variable. ${aspnet-User-Identity} - ASP.NET User Identity (Similar to AUTH_USER / REMOTE_USER / LOGON_USER ) And there are many more NLog LayoutRenderers to choose from","title":"ASP.NET Core"},{"location":"AspNetRequest-layout-renderer/#configuration-syntax","text":"${aspnet-request:cookie=String:serverVariable=String:queryString=String :item=String:form=String:header=String}","title":"Configuration Syntax"},{"location":"AspNetRequest-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetRequest-layout-renderer/#rendering-options","text":"cookie - Cookie to be rendered. header - Request header. Introduced in NLog.Web 4.2 serverVariable - ServerVariables item to be rendered. See for possible options: msdn . Not supported on ASP.NET Core until NLog.Web.AspNetCore v5.1 queryString - QueryString variable to be rendered. item - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered. form - Form variable to be rendered. Note: The Form property is populated when the HTTP request Content-Type value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\". (see msdn )","title":"Rendering Options"},{"location":"AspNetRequest-layout-renderer/#remarks","text":"Use this layout renderer to insert the value of the specified parameter of the ASP.NET Request object. This renderer requires the NLog.Web package.","title":"Remarks"},{"location":"AspNetRequest-layout-renderer/#examples","text":"","title":"Examples"},{"location":"AspNetRequest-layout-renderer/#full-url","text":"Full URL without domain, eg default.aspx?id=512 ${aspnet-request:serverVariable=HTTP_URL}${aspnet-request:queryString}","title":"Full URL"},{"location":"AspNetRequest-layout-renderer/#referer","text":"URL doing the request. Including schema (e.g https:// ) and querystring ${aspnet-request:header=Referer}","title":"Referer"},{"location":"AspNetRequest-layout-renderer/#content-type","text":"Content-Type like application/json; charset=UTF-8 ${aspnet-request:header=Content-Type}","title":"Content-Type"},{"location":"AspNetRequest-layout-renderer/#method","text":"Method like PUT, POST, GET etc ${aspnet-request:serverVariable=REQUEST_METHOD}","title":"Method"},{"location":"AspNetRequest-layout-renderer/#user-agent","text":"user agent, like Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 ${aspnet-request:serverVariable=HTTP_USER_AGENT}","title":"User agent"},{"location":"AspNetResponse-StatusCode-Layout-Renderer/","text":"ASP.NET Response Status Code. Platforms Supported: All Introduced in NLog.Web 4.9 Configuration Syntax ${aspnet-response-statuscode:format=d} Parameters Format - Enumeration Format string specifier. Ex. G for string-value and D for integer-value. Default: D Introduced with NLog.Web 5.2.2","title":"AspNetResponse StatusCode Layout Renderer"},{"location":"AspNetResponse-StatusCode-Layout-Renderer/#configuration-syntax","text":"${aspnet-response-statuscode:format=d}","title":"Configuration Syntax"},{"location":"AspNetResponse-StatusCode-Layout-Renderer/#parameters","text":"Format - Enumeration Format string specifier. Ex. G for string-value and D for integer-value. Default: D Introduced with NLog.Web 5.2.2","title":"Parameters"},{"location":"AspNetSession-Layout-Renderer/","text":"ASP.NET Item Variable from Session Dictionary Platforms Supported: All Configuration Syntax ${aspnet-session:item=String:objectpath=String:format=String:ValueType=String|Int32} Parameters Rendering Options item - Key for lookup in Session-dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2 and replaces EvaluateAsNestedProperties -option ValueType - Only for ASP.NET Core. Type of the value. String (default) or Int32 . Introduced in NLog.Web.AspNetCore 4.9.3. Please note: you won't get an error when retrieving a int (set with Session.SetInt32(..) ) with valuetype string , but an incorrect value. We can't unfortunately recognize the type of the value inside the ASP.NET Core session. Remarks Use this layout renderer to insert the value of the specified variable stored in the ASP.NET Session dictionary. Examples Log the username in the session. In the C# code: Session[\"username\"] = \"JohnDoe\"; Config: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:item=username}\" /> </rules> </nlog> Will print \"JohnDoe\" ObjectPath In the C# code: Session[\"user\"] = new UserInfo { Name= \"JohnDoe\", Id = 100}; Config: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:item=user:ObjectPath=Name}\" /> </rules> </nlog> Will print nested property-value \"JohnDoe\"","title":"AspNetSession Layout Renderer"},{"location":"AspNetSession-Layout-Renderer/#configuration-syntax","text":"${aspnet-session:item=String:objectpath=String:format=String:ValueType=String|Int32}","title":"Configuration Syntax"},{"location":"AspNetSession-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"AspNetSession-Layout-Renderer/#rendering-options","text":"item - Key for lookup in Session-dictionary (Required) Introduced with NLog.Web v5.1, and replaces the Variable -option format - Format-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 culture - Culture-specifier for converting the value as string (Optional) Introduced with NLog.Web v5.0 objectpath - Property path if the value is an object, also supports nested properties (Optional). Introduced with NLog.Web v5.2 and replaces EvaluateAsNestedProperties -option ValueType - Only for ASP.NET Core. Type of the value. String (default) or Int32 . Introduced in NLog.Web.AspNetCore 4.9.3. Please note: you won't get an error when retrieving a int (set with Session.SetInt32(..) ) with valuetype string , but an incorrect value. We can't unfortunately recognize the type of the value inside the ASP.NET Core session.","title":"Rendering Options"},{"location":"AspNetSession-Layout-Renderer/#remarks","text":"Use this layout renderer to insert the value of the specified variable stored in the ASP.NET Session dictionary.","title":"Remarks"},{"location":"AspNetSession-Layout-Renderer/#examples","text":"Log the username in the session. In the C# code: Session[\"username\"] = \"JohnDoe\"; Config: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:item=username}\" /> </rules> </nlog> Will print \"JohnDoe\"","title":"Examples"},{"location":"AspNetSession-Layout-Renderer/#objectpath","text":"In the C# code: Session[\"user\"] = new UserInfo { Name= \"JohnDoe\", Id = 100}; Config: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" layout=\"${aspnet-session:item=user:ObjectPath=Name}\" /> </rules> </nlog> Will print nested property-value \"JohnDoe\"","title":"ObjectPath"},{"location":"AspNetSessionId-Layout-Renderer/","text":"ASP.NET Session ID. Platforms Supported: All Configuration Syntax ${aspnet-sessionid} Enable sessions in ASP.NET Core Add line to ConfigureServices() in Startup.cs public void ConfigureServices(IServiceCollection services) { ... services.AddMvc(); services.AddSession(); // After AddMvc() services.AddHttpContextAccessor(); ... } Add line to Configure() in Startup.cs public void Configure(IApplicationBuilder app, IHostingEnvironment env) { ... app.UseSession(); // Before UseMvc() app.UseMvc(); ... } See also Configure session state","title":"AspNetSessionId Layout Renderer"},{"location":"AspNetSessionId-Layout-Renderer/#configuration-syntax","text":"${aspnet-sessionid}","title":"Configuration Syntax"},{"location":"AspNetSessionId-Layout-Renderer/#enable-sessions-in-aspnet-core","text":"Add line to ConfigureServices() in Startup.cs public void ConfigureServices(IServiceCollection services) { ... services.AddMvc(); services.AddSession(); // After AddMvc() services.AddHttpContextAccessor(); ... } Add line to Configure() in Startup.cs public void Configure(IApplicationBuilder app, IHostingEnvironment env) { ... app.UseSession(); // Before UseMvc() app.UseMvc(); ... } See also Configure session state","title":"Enable sessions in ASP.NET Core"},{"location":"AspNetTrace-target/","text":"Writes log messages to the ASP.NET Trace using TraceContext from HttpContext. Platforms Supported: Limited - .NET Framework only and requires nuget-package NLog.Web Configuration Syntax <targets> <target xsi:type=\"AspNetTrace\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} Remarks Log entries can then be viewed by navigating to http://server/path/Trace.axd. AspNetTrace uses the HttpContext.Current . Therefore async/buffered writing does not works for AspNetTrace due to different thread. Examples In order to use this target, put the following code in the configuration file such as Web.nlog or NLog.config: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"aspnet\" xsi:type=\"ASPNetTrace\" layout=\"${logger} ${message}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"aspnet\" /> </rules> </nlog> You can also configure the target programmatically, by putting the code in Application_Start event handler or similar: using System; using System.Web; using NLog; using NLog.Web.Targets; namespace SomeWebApplication { public class Global : System.Web.HttpApplication { // // this event handler is executed at the very start of the web application // so this is a good place to configure targets programmatically // // alternative you could place this code in a static type constructor // protected void Application_Start(Object sender, EventArgs e) { AspNetTraceTarget target = new AspNetTraceTarget(); target.Layout = \"${logger} ${message}\"; NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); } } }","title":"AspNetTrace target"},{"location":"AspNetTrace-target/#configuration-syntax","text":"<targets> <target xsi:type=\"AspNetTrace\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"AspNetTrace-target/#parameters","text":"","title":"Parameters"},{"location":"AspNetTrace-target/#general-options","text":"name - Name of the target","title":"General Options"},{"location":"AspNetTrace-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message}","title":"Layout Options"},{"location":"AspNetTrace-target/#remarks","text":"Log entries can then be viewed by navigating to http://server/path/Trace.axd. AspNetTrace uses the HttpContext.Current . Therefore async/buffered writing does not works for AspNetTrace due to different thread.","title":"Remarks"},{"location":"AspNetTrace-target/#examples","text":"In order to use this target, put the following code in the configuration file such as Web.nlog or NLog.config: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"aspnet\" xsi:type=\"ASPNetTrace\" layout=\"${logger} ${message}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"aspnet\" /> </rules> </nlog> You can also configure the target programmatically, by putting the code in Application_Start event handler or similar: using System; using System.Web; using NLog; using NLog.Web.Targets; namespace SomeWebApplication { public class Global : System.Web.HttpApplication { // // this event handler is executed at the very start of the web application // so this is a good place to configure targets programmatically // // alternative you could place this code in a static type constructor // protected void Application_Start(Object sender, EventArgs e) { AspNetTraceTarget target = new AspNetTraceTarget(); target.Layout = \"${logger} ${message}\"; NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); } } }","title":"Examples"},{"location":"AspNetTraceIdentifier-Layout-Renderer/","text":"ASP.NET Trace Identifier Platforms Supported: All (Supported in ASP.NET Core and ASP.NET ) Introduced in NLog.Web.AspNetCore ver. 4.3.1 and NLog.Web ver. 4.7.1 Configuration Syntax ${aspnet-TraceIdentifier:ignoreActivityId=boolean} Options: ignoreActivityId : ASP.NET Core 3 only: if true - use HttpContext.TraceIdentifier instead of System.Diagnostics.Activity.Current.Id Notes Which TraceIdentifier is used? ASP.NET Core 3: by default System.Diagnostics.Activity.Current.Id . ASP.NET Core 1+2: HttpContext.TraceIdentifier ASP.NET: HttpWorkerRequest.RequestTraceIdentifier . Requires IIS ETW feature enabled, see Microsoft docs See code","title":"AspNetTraceIdentifier Layout Renderer"},{"location":"AspNetTraceIdentifier-Layout-Renderer/#configuration-syntax","text":"${aspnet-TraceIdentifier:ignoreActivityId=boolean}","title":"Configuration Syntax"},{"location":"AspNetTraceIdentifier-Layout-Renderer/#options","text":"ignoreActivityId : ASP.NET Core 3 only: if true - use HttpContext.TraceIdentifier instead of System.Diagnostics.Activity.Current.Id","title":"Options:"},{"location":"AspNetTraceIdentifier-Layout-Renderer/#notes","text":"","title":"Notes"},{"location":"AspNetTraceIdentifier-Layout-Renderer/#which-traceidentifier-is-used","text":"ASP.NET Core 3: by default System.Diagnostics.Activity.Current.Id . ASP.NET Core 1+2: HttpContext.TraceIdentifier ASP.NET: HttpWorkerRequest.RequestTraceIdentifier . Requires IIS ETW feature enabled, see Microsoft docs See code","title":"Which TraceIdentifier is used?"},{"location":"AspNetUserAuthType-Layout-Renderer/","text":"ASP.NET HttpContext User.Identity.AuthenticationType Platforms Supported: All Configuration Syntax ${aspnet-user-authtype}","title":"AspNetUserAuthType Layout Renderer"},{"location":"AspNetUserAuthType-Layout-Renderer/#configuration-syntax","text":"${aspnet-user-authtype}","title":"Configuration Syntax"},{"location":"AspNetUserIdentity-Layout-Renderer/","text":"ASP.NET HttpContext User.Identity.Name Platforms Supported: All Similar to AUTH_USER / REMOTE_USER / LOGON_USER in Server Variables. Configuration Syntax ${aspnet-user-identity} ASP.NET Core Details Adding Identity in ASP.NET Core 2.2 using IServiceCollection in ConfigureServices : services.AddIdentity<IdentityUser, IdentityRole>() .AddRoles<IdentityRole>() .AddDefaultTokenProviders() .AddDefaultUI(); See also Introduction to Identity on ASP.NET Core (Configuring IdentityOptions ) User Identity Claims For additional details about the user identity, then one can also use ${aspnet-user-claim}","title":"AspNetUserIdentity Layout Renderer"},{"location":"AspNetUserIdentity-Layout-Renderer/#configuration-syntax","text":"${aspnet-user-identity}","title":"Configuration Syntax"},{"location":"AspNetUserIdentity-Layout-Renderer/#aspnet-core-details","text":"Adding Identity in ASP.NET Core 2.2 using IServiceCollection in ConfigureServices : services.AddIdentity<IdentityUser, IdentityRole>() .AddRoles<IdentityRole>() .AddDefaultTokenProviders() .AddDefaultUI(); See also Introduction to Identity on ASP.NET Core (Configuring IdentityOptions )","title":"ASP.NET Core Details"},{"location":"AspNetUserIdentity-Layout-Renderer/#user-identity-claims","text":"For additional details about the user identity, then one can also use ${aspnet-user-claim}","title":"User Identity Claims"},{"location":"AspRequest-layout-renderer/","text":"ASP Request variable. Supported in .NET and Mono Configuration Syntax ${asp-request:cookie=String:serverVariable=String:queryString=String :item=String:form=String} Parameters Rendering Options cookie - Cookie to be rendered. serverVariable - ServerVariables item to be rendered. See msdn queryString - QueryString variable to be rendered. item - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered. form - Form variable to be rendered.","title":"AspRequest layout renderer"},{"location":"AspRequest-layout-renderer/#configuration-syntax","text":"${asp-request:cookie=String:serverVariable=String:queryString=String :item=String:form=String}","title":"Configuration Syntax"},{"location":"AspRequest-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"AspRequest-layout-renderer/#rendering-options","text":"cookie - Cookie to be rendered. serverVariable - ServerVariables item to be rendered. See msdn queryString - QueryString variable to be rendered. item - Item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered. form - Form variable to be rendered.","title":"Rendering Options"},{"location":"AspResponse-target/","text":"Outputs log messages through the ASP Response object. Supported in .NET and Mono Configuration Syntax <targets> <target xsi:type=\"AspResponse\" name=\"String\" addComments=\"Boolean\" layout=\"Layout\" /> </targets> Read more about using the configuration file . Parameters General Options name - Name of the target Layout Options addComments - Indicates whether to add <!-- --> comments around all written texts. Boolean layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Examples This target is usable when using classic ASP (not ASP.NET). In order to use this target, put the following code in the configuration file which is loaded into the web server process: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"aspnet\" xsi:type=\"ASPResponse\" layout=\"${logger} ${message}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"aspnet\" /> </rules> </nlog>","title":"AspResponse target"},{"location":"AspResponse-target/#configuration-syntax","text":"<targets> <target xsi:type=\"AspResponse\" name=\"String\" addComments=\"Boolean\" layout=\"Layout\" /> </targets> Read more about using the configuration file .","title":"Configuration Syntax"},{"location":"AspResponse-target/#parameters","text":"","title":"Parameters"},{"location":"AspResponse-target/#general-options","text":"name - Name of the target","title":"General Options"},{"location":"AspResponse-target/#layout-options","text":"addComments - Indicates whether to add <!-- --> comments around all written texts. Boolean layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}","title":"Layout Options"},{"location":"AspResponse-target/#examples","text":"This target is usable when using classic ASP (not ASP.NET). In order to use this target, put the following code in the configuration file which is loaded into the web server process: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"aspnet\" xsi:type=\"ASPResponse\" layout=\"${logger} ${message}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"aspnet\" /> </rules> </nlog>","title":"Examples"},{"location":"AspSession-layout-renderer/","text":"ASP Session variable. Supported in .NET and Mono Configuration Syntax ${asp-session:variable=String} Parameters Rendering Options variable - Session variable name. Required.","title":"AspSession layout renderer"},{"location":"AspSession-layout-renderer/#configuration-syntax","text":"${asp-session:variable=String}","title":"Configuration Syntax"},{"location":"AspSession-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"AspSession-layout-renderer/#rendering-options","text":"variable - Session variable name. Required.","title":"Rendering Options"},{"location":"AssemblyVersion-Layout-Renderer/","text":"Renders assembly version information from the entry assembly or a named assembly. Platforms Supported: All Introduced for ASP.NET / ASP.NET Core in NLog.Web 4.5.0 / NLog.Web.AspNetCore 4.4.0. Configuration Syntax ${assembly-version:name=string:type=Enum:format=string} Parameters Name - Display name of the assembly to retrieve a version from, as determined by its FullName property. The assembly will be loaded if needed. If not specified, will use the entry assembly (this did not function correctly for .NET Core until NLog.Web.AspNetCore 4.6). Introduced in NLog 4.3.7. Type - Type of the assembly version value to retrieve. Default: Assembly . Introduced with NLog v4.5. Introduced for ASP.NET with NLog.Web / NLog.Web.AspNetCore v4.6. Possible enum values: * Assembly - Assembly version. Value for AssemblyVersion attribute. Note: UWP earlier than .NET Standard 1.5 uses value for `ApplicationVersion` File - File version. Value for AssemblyFileVersion attribute. Notes: - UWP earlier than .NET Standard 1.5 uses Assembly instead unless a value is given for the name parameter Informational - Product Version extracted from AssemblyInformationalVersion attribute. Notes: - UWP earlier than .NET Standard 1.5 uses Assembly instead unless a value is given for the name parameter Format - Custom format of the assembly version output. Default: major.minor.build.revision Supported placeholders are 'major', 'minor', 'build' and 'revision'. The default .NET template for version numbers is 'major.minor.build.revision'. See https://docs.microsoft.com/en-gb/dotnet/api/system.version?view=netframework-4.7.2#remarks for details. Introduced with NLog 4.6 Default - Custom value to output when assembly version cannot be found, is empty or or matches 0.0.0.0 Introduced with NLog 5.0.2 Remarks As this layout renderer uses reflection and version information is unlikely to change during application execution, it is recommended to use it in conjunction with the CachedLayoutRendererWrapper. The entry assembly can't be found in some cases e.g. ASP.NET, unit tests, etc. Examples Retrieve assembly version for entry assembly: ${assembly-version} Retrieve assembly version for assembly name NLogAutloadExtension : ${assembly-version:NLogAutloadExtension} Retrieve file version for entry assembly: ${assembly-version:type=File} Retrieve informational version for assembly name NLogAutloadExtension : ${assembly-version:name=NLogAutloadExtension:type=Informational}","title":"AssemblyVersion Layout Renderer"},{"location":"AssemblyVersion-Layout-Renderer/#configuration-syntax","text":"${assembly-version:name=string:type=Enum:format=string}","title":"Configuration Syntax"},{"location":"AssemblyVersion-Layout-Renderer/#parameters","text":"Name - Display name of the assembly to retrieve a version from, as determined by its FullName property. The assembly will be loaded if needed. If not specified, will use the entry assembly (this did not function correctly for .NET Core until NLog.Web.AspNetCore 4.6). Introduced in NLog 4.3.7. Type - Type of the assembly version value to retrieve. Default: Assembly . Introduced with NLog v4.5. Introduced for ASP.NET with NLog.Web / NLog.Web.AspNetCore v4.6. Possible enum values: * Assembly - Assembly version. Value for AssemblyVersion attribute. Note: UWP earlier than .NET Standard 1.5 uses value for `ApplicationVersion` File - File version. Value for AssemblyFileVersion attribute. Notes: - UWP earlier than .NET Standard 1.5 uses Assembly instead unless a value is given for the name parameter Informational - Product Version extracted from AssemblyInformationalVersion attribute. Notes: - UWP earlier than .NET Standard 1.5 uses Assembly instead unless a value is given for the name parameter Format - Custom format of the assembly version output. Default: major.minor.build.revision Supported placeholders are 'major', 'minor', 'build' and 'revision'. The default .NET template for version numbers is 'major.minor.build.revision'. See https://docs.microsoft.com/en-gb/dotnet/api/system.version?view=netframework-4.7.2#remarks for details. Introduced with NLog 4.6 Default - Custom value to output when assembly version cannot be found, is empty or or matches 0.0.0.0 Introduced with NLog 5.0.2","title":"Parameters"},{"location":"AssemblyVersion-Layout-Renderer/#remarks","text":"As this layout renderer uses reflection and version information is unlikely to change during application execution, it is recommended to use it in conjunction with the CachedLayoutRendererWrapper. The entry assembly can't be found in some cases e.g. ASP.NET, unit tests, etc.","title":"Remarks"},{"location":"AssemblyVersion-Layout-Renderer/#examples","text":"Retrieve assembly version for entry assembly: ${assembly-version} Retrieve assembly version for assembly name NLogAutloadExtension : ${assembly-version:NLogAutloadExtension} Retrieve file version for entry assembly: ${assembly-version:type=File} Retrieve informational version for assembly name NLogAutloadExtension : ${assembly-version:name=NLogAutloadExtension:type=Informational}","title":"Examples"},{"location":"AsyncWrapper-target/","text":"Enables asynchronous logging, so the application-thread will only have the overhead of NLog automatically capturing thread-context (Ex. ${threadi} ) and pushing to a concurrent-queue. Background timer-thread will then write pending LogEvents from the concurrent-queue to the wrapped target. It also activates batch-writing of LogEvents for even better performance. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"AsyncWrapper\" name=\"String\" queueLimit=\"Integer\" timeToSleepBetweenBatches=\"Integer\" batchSize=\"Integer\" overflowAction=\"Enum\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Buffering Options queueLimit - Limit on the number of requests in the lazy writer thread request queue. Integer Default: 10000 timeToSleepBetweenBatches - Time in milliseconds to sleep between batches. Integer Default: 1 (NLog 4.6 changed default from 50 to 1 ). When set to '0' or '1', then it will only trigger timer when something is logged (Less timer activity when idle, Faster logging and improved garbage collection behavior). batchSize - Number of log events that should be processed in a batch by the lazy writer thread. Integer Default: 100 (NLog 4.4.2 and newer has Default: 200) fullBatchSizeWriteLimit - Max number of consecutive full batchSize writes to perform within the same timer event. Integer Default: 5. Introduced in NLog 4.4.2 overflowAction - Action to be taken when in-memory-queue becomes full (Reached queueLimit ). This means the background-writer is falling behind, and cannot keep up with the application-threads logging. Default: Discard Possible values: Discard - The application-thread will discard logevent to avoid becoming blocked or causing out-of-memory issues ( Default ) Block - The application-thread will block until the background-writer-thread has taken the next batch. Avoids loosing important logevents, but can block all application-threads. Grow - The application-thread will ignore the queueLimit , and will just allocate more memory. Can cause the entire application to experience out-of-memory-issues. ForceLockingQueue - Force thread synchronization with monitor-lock, instead of using .NET ConcurrentQueue. Legacy NetFramework application will by default use monitor-lock (Default=true). .NET Standard 2.0 will by default use of the .NET lock-free ConcurrentQueue for improved concurrency (Default=false). Introduced in NLog 4.6 Remarks Remember to Flush Remember to Flush before application exit, is very important when enabling use of the Asynchronous target wrapper. Async attribute Asynchronous target wrapper allows the logger code to execute more quickly, by queuing messages and processing them in a separate thread. You should wrap targets that spend a non-trivial amount of time in their Write() method with asynchronous target to speed up logging. Because asynchronous logging is quite a common scenario, NLog supports a shorthand notation for wrapping all targets with AsyncWrapper. Just add async=\"true\" to the <targets/> element in the configuration file. Example: <targets async=\"true\"> ... your targets go here ... </targets> Async attribute will discard by default The async attribute is a shorthand for: xsi:type=\"AsyncWrapper overflowAction=\"Discard\" queueLimit=\"10000\" batchSize=\"200\" timeToSleepBetweenBatches=\"1\" So if you write a lot of messages (more then 10000) in a short time, it's possible that messages will be lost. This is intended behavior as keeping all the messages or waiting for all the messages to be written, could have impact on the performance of your program. If you need all the log messages, then you can change from <targets async=\"true\"> to using <default-wrapper> : <targets> <default-wrapper xsi:type=\"AsyncWrapper\" overflowAction=\"Block\" /> ... your targets go here ... </targets> Async attribute and AsyncWrapper Avoid explicitly using AsyncWrapper when already having enabled <targets async=\"true\"> . It will actually give a performance hit and slow down processing. AsyncWrapper and <rules> When using the AsyncWrapper , do write to the wrapper in your <rules> section! In the following example: do write to \"target2\". If the <logger> is writing to \"target1\", the messages are not written asynchronously! <targets> <target name=\"target2\" xsi:type=\"AsyncWrapper\"> <target name =\"target1\" xsi:type=\"File\" fileName=\"c:/temp/test.log\" layout=\"${message}\" keepFileOpen=\"true\" /> </target> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"target2\"/> </rules> </targets> Asynchronously writing and custom targets When messages are written asynchronously, this is done in another thread. There can be custom NLog targets that requires writing to happen on the main thread for proper context capture. When used together with AsyncWrapper then asynchronous writing is used and context information can be lost. By default all standard NLog targets supports use of AsyncWrapper. Custom NLog targets that inherits from TargetWithContext should also by default work correctly with AsyncWrapper. BufferingWrapper and Async The BufferingWrapper can also asynchronously when having configured FlushTimeout . AsyncWrapper is intended for improving performance, where BufferingWrapper is intended for throttling or even discarding LogEvents. AsyncWrapper has an internal buffer optimized to handle many concurrent threads.","title":"AsyncWrapper target"},{"location":"AsyncWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"AsyncWrapper\" name=\"String\" queueLimit=\"Integer\" timeToSleepBetweenBatches=\"Integer\" batchSize=\"Integer\" overflowAction=\"Enum\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"AsyncWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"AsyncWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"AsyncWrapper-target/#buffering-options","text":"queueLimit - Limit on the number of requests in the lazy writer thread request queue. Integer Default: 10000 timeToSleepBetweenBatches - Time in milliseconds to sleep between batches. Integer Default: 1 (NLog 4.6 changed default from 50 to 1 ). When set to '0' or '1', then it will only trigger timer when something is logged (Less timer activity when idle, Faster logging and improved garbage collection behavior). batchSize - Number of log events that should be processed in a batch by the lazy writer thread. Integer Default: 100 (NLog 4.4.2 and newer has Default: 200) fullBatchSizeWriteLimit - Max number of consecutive full batchSize writes to perform within the same timer event. Integer Default: 5. Introduced in NLog 4.4.2 overflowAction - Action to be taken when in-memory-queue becomes full (Reached queueLimit ). This means the background-writer is falling behind, and cannot keep up with the application-threads logging. Default: Discard Possible values: Discard - The application-thread will discard logevent to avoid becoming blocked or causing out-of-memory issues ( Default ) Block - The application-thread will block until the background-writer-thread has taken the next batch. Avoids loosing important logevents, but can block all application-threads. Grow - The application-thread will ignore the queueLimit , and will just allocate more memory. Can cause the entire application to experience out-of-memory-issues. ForceLockingQueue - Force thread synchronization with monitor-lock, instead of using .NET ConcurrentQueue. Legacy NetFramework application will by default use monitor-lock (Default=true). .NET Standard 2.0 will by default use of the .NET lock-free ConcurrentQueue for improved concurrency (Default=false). Introduced in NLog 4.6","title":"Buffering Options"},{"location":"AsyncWrapper-target/#remarks","text":"","title":"Remarks"},{"location":"AsyncWrapper-target/#remember-to-flush","text":"Remember to Flush before application exit, is very important when enabling use of the Asynchronous target wrapper.","title":"Remember to Flush"},{"location":"AsyncWrapper-target/#async-attribute","text":"Asynchronous target wrapper allows the logger code to execute more quickly, by queuing messages and processing them in a separate thread. You should wrap targets that spend a non-trivial amount of time in their Write() method with asynchronous target to speed up logging. Because asynchronous logging is quite a common scenario, NLog supports a shorthand notation for wrapping all targets with AsyncWrapper. Just add async=\"true\" to the <targets/> element in the configuration file. Example: <targets async=\"true\"> ... your targets go here ... </targets>","title":"Async attribute"},{"location":"AsyncWrapper-target/#async-attribute-will-discard-by-default","text":"The async attribute is a shorthand for: xsi:type=\"AsyncWrapper overflowAction=\"Discard\" queueLimit=\"10000\" batchSize=\"200\" timeToSleepBetweenBatches=\"1\" So if you write a lot of messages (more then 10000) in a short time, it's possible that messages will be lost. This is intended behavior as keeping all the messages or waiting for all the messages to be written, could have impact on the performance of your program. If you need all the log messages, then you can change from <targets async=\"true\"> to using <default-wrapper> : <targets> <default-wrapper xsi:type=\"AsyncWrapper\" overflowAction=\"Block\" /> ... your targets go here ... </targets>","title":"Async attribute will discard by default"},{"location":"AsyncWrapper-target/#async-attribute-and-asyncwrapper","text":"Avoid explicitly using AsyncWrapper when already having enabled <targets async=\"true\"> . It will actually give a performance hit and slow down processing.","title":"Async attribute and AsyncWrapper"},{"location":"AsyncWrapper-target/#asyncwrapper-and-rules","text":"When using the AsyncWrapper , do write to the wrapper in your <rules> section! In the following example: do write to \"target2\". If the <logger> is writing to \"target1\", the messages are not written asynchronously! <targets> <target name=\"target2\" xsi:type=\"AsyncWrapper\"> <target name =\"target1\" xsi:type=\"File\" fileName=\"c:/temp/test.log\" layout=\"${message}\" keepFileOpen=\"true\" /> </target> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"target2\"/> </rules> </targets>","title":"AsyncWrapper and &lt;rules&gt;"},{"location":"AsyncWrapper-target/#asynchronously-writing-and-custom-targets","text":"When messages are written asynchronously, this is done in another thread. There can be custom NLog targets that requires writing to happen on the main thread for proper context capture. When used together with AsyncWrapper then asynchronous writing is used and context information can be lost. By default all standard NLog targets supports use of AsyncWrapper. Custom NLog targets that inherits from TargetWithContext should also by default work correctly with AsyncWrapper.","title":"Asynchronously writing and custom targets"},{"location":"AsyncWrapper-target/#bufferingwrapper-and-async","text":"The BufferingWrapper can also asynchronously when having configured FlushTimeout . AsyncWrapper is intended for improving performance, where BufferingWrapper is intended for throttling or even discarding LogEvents. AsyncWrapper has an internal buffer optimized to handle many concurrent threads.","title":"BufferingWrapper and Async"},{"location":"AutoFlushWrapper-target/","text":"Causes a flush on a wrapped target if LogEvent satisfies provided condition. If condition isn't set, a flush will occur after each successful write. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"AutoFlushWrapper\" name=\"String\" condition=\"Condition\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. condition - Condition is expression used to determine if flush must be executed. Introduced in NLog 4.4 asyncFlush - Delay the flush until the LogEvent has been confirmed as written. Default true . Introduced in NLog 4.4.6 where BufferingWrapper-target defaults to false , to avoid waiting long time (forever) to flush NLog 4.7 implements same behavior for AsyncTaskTarget so it defaults to false , to reduce waiting time for flush. flushOnConditionOnly - Ignores explicit flush operations caused by calling NLog.LogManager.Flush() or NLog.LogManager.Shutdown() . Useful when combined with BufferingWrapper and overflowAction=Discard . Introduced in NLog 4.6.6 Examples Flush into target on each write <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"AutoFlushWrapper\"> <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> Flush into target, if LogEvent level >= Warn ( introduced in NLog 4.4 ) <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Warn\"> <target xsi:type=\"bufferingWrapper\" overflowAction=\"Discard\"> <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" /> </target> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"AutoFlushWrapper target"},{"location":"AutoFlushWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"AutoFlushWrapper\" name=\"String\" condition=\"Condition\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"AutoFlushWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"AutoFlushWrapper-target/#general-options","text":"name - Name of the target. condition - Condition is expression used to determine if flush must be executed. Introduced in NLog 4.4 asyncFlush - Delay the flush until the LogEvent has been confirmed as written. Default true . Introduced in NLog 4.4.6 where BufferingWrapper-target defaults to false , to avoid waiting long time (forever) to flush NLog 4.7 implements same behavior for AsyncTaskTarget so it defaults to false , to reduce waiting time for flush. flushOnConditionOnly - Ignores explicit flush operations caused by calling NLog.LogManager.Flush() or NLog.LogManager.Shutdown() . Useful when combined with BufferingWrapper and overflowAction=Discard . Introduced in NLog 4.6.6","title":"General Options"},{"location":"AutoFlushWrapper-target/#examples","text":"Flush into target on each write <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"AutoFlushWrapper\"> <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> Flush into target, if LogEvent level >= Warn ( introduced in NLog 4.4 ) <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Warn\"> <target xsi:type=\"bufferingWrapper\" overflowAction=\"Discard\"> <target xsi:type=\"File\" fileName=\"${basedir}/file.txt\" /> </target> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"Examples"},{"location":"Basedir-layout-renderer/","text":"The current application domain's base directory. Platforms Supported: All See also ${processdir} , ${specialfolder} , ${currentdir} , ${tempdir} Configuration Syntax ${basedir:dir=String:file=String:processDir=boolean} Parameters Advanced Options dir - Name of the directory to be Path.Combine()'d with the base directory. file - Name of the file to be Path.Combine()'d with the base directory. processDir - Introduced in NLog 4.4.2. Render the base directory of the current process? Default false . Alternative one can use the ${processdir} introduced with NLog v4.7.1 fixTempDir - Enable automatic fallback to processDir when detecting AppDomain.BaseDirectory is temp-directory. Workaround for single-file-publish on NetCore 3.1, and no longer needed with .NET 6. Introduced with NLog v4.6.8 See also: FileTarget FileName Directory","title":"Basedir layout renderer"},{"location":"Basedir-layout-renderer/#configuration-syntax","text":"${basedir:dir=String:file=String:processDir=boolean}","title":"Configuration Syntax"},{"location":"Basedir-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Basedir-layout-renderer/#advanced-options","text":"dir - Name of the directory to be Path.Combine()'d with the base directory. file - Name of the file to be Path.Combine()'d with the base directory. processDir - Introduced in NLog 4.4.2. Render the base directory of the current process? Default false . Alternative one can use the ${processdir} introduced with NLog v4.7.1 fixTempDir - Enable automatic fallback to processDir when detecting AppDomain.BaseDirectory is temp-directory. Workaround for single-file-publish on NetCore 3.1, and no longer needed with .NET 6. Introduced with NLog v4.6.8 See also: FileTarget FileName Directory","title":"Advanced Options"},{"location":"BufferingWrapper-target/","text":"A target that buffers log events and sends them in batches to the wrapped target. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"BufferingWrapper\" name=\"String\" bufferSize=\"Integer\" flushTimeout=\"Integer\" slidingTimeout=\"Boolean\" overflowAction=\"Enum\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Buffering Options bufferSize - Number of log events to be buffered. When the limit is reached, then a synchronous flush is performed. Integer Default: 100 flushTimeout - Timeout (in milliseconds) after a write, until the entire buffer is asynchronously flushed. Use -1 to disable timed flushes. Integer Default: -1 slidingTimeout - Indicates whether to use sliding flushTimeout . Boolean Default: True This value determines how the inactivity period is determined. If sliding timeout is enabled, the inactivity timer is reset after each write, if it is disabled - inactivity timer will count from the first event written to the buffer. overflowAction - Action to be taken when the buffer exceeds the set bufferSize . Enum Default: Flush . Introduced in NLog 4.5 Possible values: Flush - All the log events in the buffer will be written in the wrapped target. Discard - The oldest log event will be removed from the buffer. If this setting is used, the Flush action will need to be triggered manually using another wrapper like the AutoFlushWrapper or by using the flushTimeout option. Remarks Buffering and custom targets When messages are written into the BufferingWrapper, then LogEvents are queued for writing at a later stage. There can be custom NLog targets that requires writing to happen on the main thread for proper context capture (without being queued). When used together with BufferingWrapper then context information can be lost. By default all standard NLog targets supports use of BufferingWrapper. Custom NLog targets that inherits from TargetWithContext should also by default work correctly with BufferingWrapper. Buffer and asynchronously writing If flushTimeout is larger than 0 , then the messages are written asynchronously. If the buffer is filled before the flushTimeout fires and triggers the asynchronous flush, then the logging thread will be performing the flush, and be blocked by the operation. Because the BufferingWrapper is not intended for performance optimization, but for throttling or even discarding LogEvents. Then it can be a good idea to make use of the async attribute or the AsyncWrapper . Send batch when triggered by event This will send the last 50 messages to the myTargetType , when an Error occurs: <target name=\"String\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Error\" flushOnConditionOnly=\"true\"> <target xsi:type=\"BufferingWrapper\" bufferSize=\"50\" overflowAction=\"Discard\"> <target xsi:type=\"myTargetType\" ...target properties... /> </target> </target>","title":"BufferingWrapper target"},{"location":"BufferingWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"BufferingWrapper\" name=\"String\" bufferSize=\"Integer\" flushTimeout=\"Integer\" slidingTimeout=\"Boolean\" overflowAction=\"Enum\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"BufferingWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"BufferingWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"BufferingWrapper-target/#buffering-options","text":"bufferSize - Number of log events to be buffered. When the limit is reached, then a synchronous flush is performed. Integer Default: 100 flushTimeout - Timeout (in milliseconds) after a write, until the entire buffer is asynchronously flushed. Use -1 to disable timed flushes. Integer Default: -1 slidingTimeout - Indicates whether to use sliding flushTimeout . Boolean Default: True This value determines how the inactivity period is determined. If sliding timeout is enabled, the inactivity timer is reset after each write, if it is disabled - inactivity timer will count from the first event written to the buffer. overflowAction - Action to be taken when the buffer exceeds the set bufferSize . Enum Default: Flush . Introduced in NLog 4.5 Possible values: Flush - All the log events in the buffer will be written in the wrapped target. Discard - The oldest log event will be removed from the buffer. If this setting is used, the Flush action will need to be triggered manually using another wrapper like the AutoFlushWrapper or by using the flushTimeout option.","title":"Buffering Options"},{"location":"BufferingWrapper-target/#remarks","text":"","title":"Remarks"},{"location":"BufferingWrapper-target/#buffering-and-custom-targets","text":"When messages are written into the BufferingWrapper, then LogEvents are queued for writing at a later stage. There can be custom NLog targets that requires writing to happen on the main thread for proper context capture (without being queued). When used together with BufferingWrapper then context information can be lost. By default all standard NLog targets supports use of BufferingWrapper. Custom NLog targets that inherits from TargetWithContext should also by default work correctly with BufferingWrapper.","title":"Buffering and custom targets"},{"location":"BufferingWrapper-target/#buffer-and-asynchronously-writing","text":"If flushTimeout is larger than 0 , then the messages are written asynchronously. If the buffer is filled before the flushTimeout fires and triggers the asynchronous flush, then the logging thread will be performing the flush, and be blocked by the operation. Because the BufferingWrapper is not intended for performance optimization, but for throttling or even discarding LogEvents. Then it can be a good idea to make use of the async attribute or the AsyncWrapper .","title":"Buffer and asynchronously writing"},{"location":"BufferingWrapper-target/#send-batch-when-triggered-by-event","text":"This will send the last 50 messages to the myTargetType , when an Error occurs: <target name=\"String\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Error\" flushOnConditionOnly=\"true\"> <target xsi:type=\"BufferingWrapper\" bufferSize=\"50\" overflowAction=\"Discard\"> <target xsi:type=\"myTargetType\" ...target properties... /> </target> </target>","title":"Send batch when triggered by event"},{"location":"Cached-Layout-Renderer/","text":"Applies caching to another layout output. Platforms Supported: All Configuration Syntax ${cached:cached=Boolean:clearCache=ClearCacheOption:inner=Layout:cacheKey=Layout} or by using ambient property to modify output of other layout renderer: ${other:cached=Boolean} Parameters Caching Options cached - Indicates whether this CachedLayoutRendererWrapper is enabled. Boolean Default: True clearCache - Indicates when the cache is cleared. Possible options: None, OnInit, Onclose . ClearCacheOption Default: OnInit, OnClose . Introduced in NLog 4.2. cacheKey - the layout to be checked if the cache is still valid. For example, the current day. Default: null . Introduced in NLog 4.3.9 cachedSeconds - Cached value will expire after timeout. Default: infinite Introduced in NLog 4.6.8 Transformation Options inner - Wrapped layout. Layout Examples ${cached:cached=true:clearCache=OnInit,OnClose:inner=l} : The value of l is cached and the cache will be cleared when the layout renderer is initialized or when it is closed. This is the same as ${cached:cached=true:inner=l} . ${cached:cached=true:clearCache=None:inner=l} : The value of l is cached and the cache will not be cleared. filename=\"${cached:cached=true:Inner=${date:format=yyyy-MM-dd hh.mm.ss}:CacheKey=${shortdate}}.log\" - Use the first logtime and day in the file name, only one file per day. Remarks The value of the inner layout will be rendered only once and reused subsequently.","title":"Cached Layout Renderer"},{"location":"Cached-Layout-Renderer/#configuration-syntax","text":"${cached:cached=Boolean:clearCache=ClearCacheOption:inner=Layout:cacheKey=Layout} or by using ambient property to modify output of other layout renderer: ${other:cached=Boolean}","title":"Configuration Syntax"},{"location":"Cached-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Cached-Layout-Renderer/#caching-options","text":"cached - Indicates whether this CachedLayoutRendererWrapper is enabled. Boolean Default: True clearCache - Indicates when the cache is cleared. Possible options: None, OnInit, Onclose . ClearCacheOption Default: OnInit, OnClose . Introduced in NLog 4.2. cacheKey - the layout to be checked if the cache is still valid. For example, the current day. Default: null . Introduced in NLog 4.3.9 cachedSeconds - Cached value will expire after timeout. Default: infinite Introduced in NLog 4.6.8","title":"Caching Options"},{"location":"Cached-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout","title":"Transformation Options"},{"location":"Cached-Layout-Renderer/#examples","text":"${cached:cached=true:clearCache=OnInit,OnClose:inner=l} : The value of l is cached and the cache will be cleared when the layout renderer is initialized or when it is closed. This is the same as ${cached:cached=true:inner=l} . ${cached:cached=true:clearCache=None:inner=l} : The value of l is cached and the cache will not be cleared. filename=\"${cached:cached=true:Inner=${date:format=yyyy-MM-dd hh.mm.ss}:CacheKey=${shortdate}}.log\" - Use the first logtime and day in the file name, only one file per day.","title":"Examples"},{"location":"Cached-Layout-Renderer/#remarks","text":"The value of the inner layout will be rendered only once and reused subsequently.","title":"Remarks"},{"location":"Callsite-file-name-layout-renderer/","text":"The call site source file name. For full callsite use CallSiteLayoutRenderer Introduced in NLog v4.5 Supported in .NET and Mono. Configuration Syntax ${callsite-filename:includeSourcePath=Boolean:skipFrames=Integer} Parameters Rendering Options includeSourcePath - Shows the full path of the source file. Boolean Default: True skipFrames - The number of frames to skip. Integer Default: 0 captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1 Notes Please also note that this infers heavy performance hit when doing lots of logging, as it has to capture full StackTrace for every log message.","title":"Callsite file name layout renderer"},{"location":"Callsite-file-name-layout-renderer/#configuration-syntax","text":"${callsite-filename:includeSourcePath=Boolean:skipFrames=Integer}","title":"Configuration Syntax"},{"location":"Callsite-file-name-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Callsite-file-name-layout-renderer/#rendering-options","text":"includeSourcePath - Shows the full path of the source file. Boolean Default: True skipFrames - The number of frames to skip. Integer Default: 0 captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1","title":"Rendering Options"},{"location":"Callsite-file-name-layout-renderer/#notes","text":"Please also note that this infers heavy performance hit when doing lots of logging, as it has to capture full StackTrace for every log message.","title":"Notes"},{"location":"Callsite-layout-renderer/","text":"CallSite outputs the source-file-name and source-line-number where a LogEvent occurred. NLog scans the callstack and output the stackframe just before the NLog Logger takes over. Platforms Supported: Limited (Not supported on NetStandard 1.3) Configuration Syntax ${callsite:className=Boolean:fileName=Boolean:includeSourcePath=Boolean:methodName=Boolean} Parameters Rendering Options className - Indicates whether to render the class name. Boolean Default: True includeNamespace - Include namespace in class name. Boolean Default: True Introduced with NLog v4.4 fileName - Indicates whether to render the source file name and line number.Boolean Default: False includeSourcePath - Indicates whether to include source file path.Boolean Default: True methodName - Indicates whether to render the method name.Boolean Default: True cleanNamesOfAnonymousDelegates - Indicates whether the method name will be cleaned up if it is detected as an anonymous delegate. Boolean Default: True Introduced with NLog v4.3.9. Before NLog 5.0 the default value was False . cleanNamesOfAsyncContinuations - Indicates whether the method and class names will be cleaned up if it is detected as an async continuation. Boolean Default: True Introduced with NLog v4.5. Before NLog 5.0 the default value was False . skipFrames - The number of frames to skip. Integer Default: 0 captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1 Notes The Callsite-LayoutRenderer infers a heavy performance hit when doing lots of logging, as it has to capture full StackTrace for every log message. NLog 5.0 makes it possible to skip the StackTrace-capture, when using LogEventInfo.SetCallerInfo(...) with input from Caller Information -attributes. NLog 5.0 provides Fluent-Logger-API for easy capture of caller-information, and provides fast logging when using ${callsite:captureStackTrace=false} : _logger.ForInfoEvent() .Message(\"This is a fluent message {0}\", \"test\") .Property(\"PropertyName\", \"PropertyValue\") .Log(); If using Custom wrapper for NLog Logger , then make sure to provide the typeof(OwnWrapper) as input, when calling NLog Logger: Logger.Log(Type wrapperType, LogEventInfo logEvent) Alternative if the custom Logger-wrapper comes from its own dedicated Assembly, then one can exclude the entire Assembly: NLog.LogManager.AddHiddenAssembly(typeof(OwnWrapper).Assembly); If symbol information is not available, then it will not be able to output source-code filename or line-number. Symbol information from PDB files must be deployed with the application to retrieve and output source-code line-number. For applications compiled in release mode, then inlining can occur and cause \"unexpected\" line-numbers. If using Deterministic builds then it will generate symbol information with relative paths: <PropertyGroup> <Deterministic>true</Deterministic> <PathMap>$(SolutionDir)=./</PathMap> <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild> </PropertyGroup>","title":"Callsite layout renderer"},{"location":"Callsite-layout-renderer/#configuration-syntax","text":"${callsite:className=Boolean:fileName=Boolean:includeSourcePath=Boolean:methodName=Boolean}","title":"Configuration Syntax"},{"location":"Callsite-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Callsite-layout-renderer/#rendering-options","text":"className - Indicates whether to render the class name. Boolean Default: True includeNamespace - Include namespace in class name. Boolean Default: True Introduced with NLog v4.4 fileName - Indicates whether to render the source file name and line number.Boolean Default: False includeSourcePath - Indicates whether to include source file path.Boolean Default: True methodName - Indicates whether to render the method name.Boolean Default: True cleanNamesOfAnonymousDelegates - Indicates whether the method name will be cleaned up if it is detected as an anonymous delegate. Boolean Default: True Introduced with NLog v4.3.9. Before NLog 5.0 the default value was False . cleanNamesOfAsyncContinuations - Indicates whether the method and class names will be cleaned up if it is detected as an async continuation. Boolean Default: True Introduced with NLog v4.5. Before NLog 5.0 the default value was False . skipFrames - The number of frames to skip. Integer Default: 0 captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1","title":"Rendering Options"},{"location":"Callsite-layout-renderer/#notes","text":"The Callsite-LayoutRenderer infers a heavy performance hit when doing lots of logging, as it has to capture full StackTrace for every log message. NLog 5.0 makes it possible to skip the StackTrace-capture, when using LogEventInfo.SetCallerInfo(...) with input from Caller Information -attributes. NLog 5.0 provides Fluent-Logger-API for easy capture of caller-information, and provides fast logging when using ${callsite:captureStackTrace=false} : _logger.ForInfoEvent() .Message(\"This is a fluent message {0}\", \"test\") .Property(\"PropertyName\", \"PropertyValue\") .Log(); If using Custom wrapper for NLog Logger , then make sure to provide the typeof(OwnWrapper) as input, when calling NLog Logger: Logger.Log(Type wrapperType, LogEventInfo logEvent) Alternative if the custom Logger-wrapper comes from its own dedicated Assembly, then one can exclude the entire Assembly: NLog.LogManager.AddHiddenAssembly(typeof(OwnWrapper).Assembly); If symbol information is not available, then it will not be able to output source-code filename or line-number. Symbol information from PDB files must be deployed with the application to retrieve and output source-code line-number. For applications compiled in release mode, then inlining can occur and cause \"unexpected\" line-numbers. If using Deterministic builds then it will generate symbol information with relative paths: <PropertyGroup> <Deterministic>true</Deterministic> <PathMap>$(SolutionDir)=./</PathMap> <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild> </PropertyGroup>","title":"Notes"},{"location":"Callsite-line-number-layout-renderer/","text":"The call site source-code line-number. For full callsite use ${callsite} Platforms Supported: Limited (Not supported on NetStandard 1.3) Introduced in NLog v4.1 Configuration Syntax ${callsite-linenumber:skipFrames=Integer} Parameters Rendering Options skipFrames - The number of frames to skip. Integer Default: 0 captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1 Notes Please also note that this infers heavy performance hit when doing lots of logging, as it has to capture full StackTrace for every log message. If symbol symbol information is not available, then it will only output source-code line-number 0 . Symbol information from PDB files must be deployed with the application to retrieve and output source-code line-number. For applications compiled in release mode, then inlining can occur and cause \"unexpected\" line-numbers.","title":"Callsite line number layout renderer"},{"location":"Callsite-line-number-layout-renderer/#configuration-syntax","text":"${callsite-linenumber:skipFrames=Integer}","title":"Configuration Syntax"},{"location":"Callsite-line-number-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Callsite-line-number-layout-renderer/#rendering-options","text":"skipFrames - The number of frames to skip. Integer Default: 0 captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1","title":"Rendering Options"},{"location":"Callsite-line-number-layout-renderer/#notes","text":"Please also note that this infers heavy performance hit when doing lots of logging, as it has to capture full StackTrace for every log message. If symbol symbol information is not available, then it will only output source-code line-number 0 . Symbol information from PDB files must be deployed with the application to retrieve and output source-code line-number. For applications compiled in release mode, then inlining can occur and cause \"unexpected\" line-numbers.","title":"Notes"},{"location":"Chainsaw-target/","text":"Sends log messages to the remote instance of Log4J XML Viewer applications (Like Chainsaw). Platforms Supported: All This target inherits from the Network Target , and so it has also all the properties of the Network Target available. Using the Log4JXmlEventLayout to produce Log4J XML output. Configuration Syntax <targets> <target xsi:type=\"Chainsaw\" name=\"String\" layout=\"Layout\" newLine=\"Boolean\" onOverflow=\"Enum\" maxMessageSize=\"Integer\" encoding=\"Encoding\" connectionCacheSize=\"Integer\" address=\"Layout\" lineEnding=\"CRLF|LF|CR|None\" maxConnections=\"Integer\" maxQueueSize=\"Integer\" keepConnection=\"Boolean\" onConnectionOverflow=\"Enum\" includeSourceInfo=\"Boolean\" includeCallSite=\"Boolean\" appInfo=\"String\" ndcItemSeparator=\"String\" includeNdc=\"Boolean\"> <parameter layout=\"Layout\" name=\"String\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Instance of Log4JXmlEventLayout that is used to format log messages. Layout Default: Log4JXmlEventLayout encoding - Encoding to be used. Encoding Default: utf-8 newLine - Indicates whether to append newline at the end of log message. Boolean Default: False lineEnding - Line Ending to be used if newLine is set to true. LineEndingMode Default: CRLF . Not used if newLine is false . Introduced in 4.3.8. Possible values: CRLF - Carriage Return and Line Feed (ASCII 13, ASCII 10). (default) CR - Carriage Return (ASCII 13). LF - Line Feed (ASCII 10). NULL - Null terminator (ASCII 0) None - No end of line characters. maxMessageSize - Maximum message size in bytes. Integer Default: 65000 onOverflow - Action that should be taken if the message-size is larger than maxMessageSize . Possible values: Discard - Discard the entire message. Error - Report an error. Split - Split the message into smaller pieces (Default) Connection Options connectionCacheSize - Size of the connection cache (number of connections which are kept alive). Integer Default: 5 address - Network address. Layout The network address can be: tcp://host:port - TCP (auto select IPv4/IPv6) tcp4://host:port - force TCP/IPv4 tcp6://host:port - force TCP/IPv6 udp://host:port - UDP (auto select IPv4/IPv6) udp4://host:port - force UDP/IPv4 udp6://host:port - force UDP/IPv6 http://host:port/pageName - HTTP using POST verb https://host:port/pageName - HTTPS using POST verb For SOAP-based webservice support over HTTP use WebService target. keepConnection - Indicates whether to keep connection open whenever possible. Boolean Default: True maxConnections - Maximum current connections. 0 = no maximum. Integer Default: 16 . Not used if keepConnection is true . Introduced with NLog v4.2.1. Default became 16 with NLog v4.5 (Before 0 ) onConnectionOverflow - Action that should be taken when open connections are higher than limit maxConnections . Introduced with NLog v4.2.1. Default became Block with NLog v4.5 (Before AllowNewConnnection ) Possible enum values: * Discard - Discard new messages when reaching limit (Default) (Before NLog 5.0 it was enum value DiscardMessage ) * Grow - Send message and ignore limit (Before NLog 5.0 it was enum value AllowNewConnnection ) * Block - Block until pending connections has beeen freed. maxQueueSize - Maximum queue size for a single connection. 0 means no limit. Integer . Default: 10000 (Before NLog 5.0 the default was 0) NLog 4.6.7 enabled queue-support for http/https and NLog 4.7.1 activated this setting for http/https. NLog 5.0.0 enabled queue-support for UDP. onQueueOverflow - Action that should be taken if pending queue of messages is larger than maxQueueSize . Introduced with NLog 5.0 Discard - Discard the entire message (Default) Grow - Ignore limit and grow the queue. Block - Block until queue is below limit. Payload Options IncludeEventProperties - Include all events properties of a logevent? Default: true . Before NLog 5.0 option was named IncludeAllProperties and had default false . IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc includeSourceInfo - Indicates whether to include source info (file name and line number) in the information sent over the network. Boolean includeCallSite - Indicates whether to include call site (class and method name) in the information sent over the network. Boolean IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 4.5 parameter - Additional context properties that should be included. name - Name of Parameter. Required. layout - The layout for the Parameter-Value. Required. Example <?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"log4j\" xsi:type=\"Chainsaw\" address=\"udp://127.0.0.1:5001\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"log4j\" /> </rules> </nlog> Available Log4J-XML viewers (See also LogViewer Tools ) - Sentinel - Avoid using TCP since not complete. - Log2Console - Logazmic - Loginator - Logbert - LogViewer - Lilith - OtrosLogViewer Notice that most Log4J-XML viewers will drop messages and stall when NLog sends messages at full speed. One can consider to throttle NLog like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"throttle_log4j\" type=\"AsyncWrapper\" timeToSleepBetweenBatches=\"100\" batchSize=\"1\" overflowAction=\"Block\"> <target name=\"log4j\" type=\"Chainsaw\" address=\"tcp://127.0.0.1:5001\" newline=\"true\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"throttle_log4j\" /> </rules> </nlog>","title":"Chainsaw target"},{"location":"Chainsaw-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Chainsaw\" name=\"String\" layout=\"Layout\" newLine=\"Boolean\" onOverflow=\"Enum\" maxMessageSize=\"Integer\" encoding=\"Encoding\" connectionCacheSize=\"Integer\" address=\"Layout\" lineEnding=\"CRLF|LF|CR|None\" maxConnections=\"Integer\" maxQueueSize=\"Integer\" keepConnection=\"Boolean\" onConnectionOverflow=\"Enum\" includeSourceInfo=\"Boolean\" includeCallSite=\"Boolean\" appInfo=\"String\" ndcItemSeparator=\"String\" includeNdc=\"Boolean\"> <parameter layout=\"Layout\" name=\"String\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Chainsaw-target/#parameters","text":"","title":"Parameters"},{"location":"Chainsaw-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Chainsaw-target/#layout-options","text":"layout - Instance of Log4JXmlEventLayout that is used to format log messages. Layout Default: Log4JXmlEventLayout encoding - Encoding to be used. Encoding Default: utf-8 newLine - Indicates whether to append newline at the end of log message. Boolean Default: False lineEnding - Line Ending to be used if newLine is set to true. LineEndingMode Default: CRLF . Not used if newLine is false . Introduced in 4.3.8. Possible values: CRLF - Carriage Return and Line Feed (ASCII 13, ASCII 10). (default) CR - Carriage Return (ASCII 13). LF - Line Feed (ASCII 10). NULL - Null terminator (ASCII 0) None - No end of line characters. maxMessageSize - Maximum message size in bytes. Integer Default: 65000 onOverflow - Action that should be taken if the message-size is larger than maxMessageSize . Possible values: Discard - Discard the entire message. Error - Report an error. Split - Split the message into smaller pieces (Default)","title":"Layout Options"},{"location":"Chainsaw-target/#connection-options","text":"connectionCacheSize - Size of the connection cache (number of connections which are kept alive). Integer Default: 5 address - Network address. Layout The network address can be: tcp://host:port - TCP (auto select IPv4/IPv6) tcp4://host:port - force TCP/IPv4 tcp6://host:port - force TCP/IPv6 udp://host:port - UDP (auto select IPv4/IPv6) udp4://host:port - force UDP/IPv4 udp6://host:port - force UDP/IPv6 http://host:port/pageName - HTTP using POST verb https://host:port/pageName - HTTPS using POST verb For SOAP-based webservice support over HTTP use WebService target. keepConnection - Indicates whether to keep connection open whenever possible. Boolean Default: True maxConnections - Maximum current connections. 0 = no maximum. Integer Default: 16 . Not used if keepConnection is true . Introduced with NLog v4.2.1. Default became 16 with NLog v4.5 (Before 0 ) onConnectionOverflow - Action that should be taken when open connections are higher than limit maxConnections . Introduced with NLog v4.2.1. Default became Block with NLog v4.5 (Before AllowNewConnnection ) Possible enum values: * Discard - Discard new messages when reaching limit (Default) (Before NLog 5.0 it was enum value DiscardMessage ) * Grow - Send message and ignore limit (Before NLog 5.0 it was enum value AllowNewConnnection ) * Block - Block until pending connections has beeen freed. maxQueueSize - Maximum queue size for a single connection. 0 means no limit. Integer . Default: 10000 (Before NLog 5.0 the default was 0) NLog 4.6.7 enabled queue-support for http/https and NLog 4.7.1 activated this setting for http/https. NLog 5.0.0 enabled queue-support for UDP. onQueueOverflow - Action that should be taken if pending queue of messages is larger than maxQueueSize . Introduced with NLog 5.0 Discard - Discard the entire message (Default) Grow - Ignore limit and grow the queue. Block - Block until queue is below limit.","title":"Connection Options"},{"location":"Chainsaw-target/#payload-options","text":"IncludeEventProperties - Include all events properties of a logevent? Default: true . Before NLog 5.0 option was named IncludeAllProperties and had default false . IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc includeSourceInfo - Indicates whether to include source info (file name and line number) in the information sent over the network. Boolean includeCallSite - Indicates whether to include call site (class and method name) in the information sent over the network. Boolean IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 4.5 parameter - Additional context properties that should be included. name - Name of Parameter. Required. layout - The layout for the Parameter-Value. Required.","title":"Payload Options"},{"location":"Chainsaw-target/#example","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"log4j\" xsi:type=\"Chainsaw\" address=\"udp://127.0.0.1:5001\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"log4j\" /> </rules> </nlog> Available Log4J-XML viewers (See also LogViewer Tools ) - Sentinel - Avoid using TCP since not complete. - Log2Console - Logazmic - Loginator - Logbert - LogViewer - Lilith - OtrosLogViewer Notice that most Log4J-XML viewers will drop messages and stall when NLog sends messages at full speed. One can consider to throttle NLog like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"throttle_log4j\" type=\"AsyncWrapper\" timeToSleepBetweenBatches=\"100\" batchSize=\"1\" overflowAction=\"Block\"> <target name=\"log4j\" type=\"Chainsaw\" address=\"tcp://127.0.0.1:5001\" newline=\"true\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"throttle_log4j\" /> </rules> </nlog>","title":"Example"},{"location":"ColoredConsole-target/","text":"Writes log messages to the console with customizable coloring. Platforms Supported: Limited (Not available for NetStandard1.3) There is also the simple Console-Target without any overhead from coloring. Configuration Syntax <targets> <target xsi:type=\"ColoredConsole\" name=\"String\" encoding=\"Encoding\" layout=\"Layout\" header=\"Layout\" footer=\"Layout\" useDefaultRowHighlightingRules=\"Boolean\" errorStream=\"Boolean\" enableAnsiOutput=\"Boolean\" detectConsoleAvailable=\"Boolean\" detectOutputRedirected=\"Boolean\"> <highlight-row condition=\"Condition\" backgroundColor=\"Enum\" foregroundColor=\"Enum\"/><!-- repeated --> <highlight-word text=\"String\" condition=\"Condition\" backgroundColor=\"Enum\" foregroundColor=\"Enum\" ignoreCase=\"Boolean\" regex=\"String\" wholeWords=\"Boolean\" compileRegex=\"Boolean\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. encoding - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN . Defaults to Encoding.Default . Introduced with NLog 4.0 Layout Options layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} header - Header. Layout footer - Footer. Layout Output Options StdErr - Indicates whether the error stream (stderr) should be used instead of the output stream (stdout). Boolean Default: False Before NLog v5.0 the property was named errorStream . detectConsoleAvailable - Indicates whether the console target should disable itself when no console detected. Boolean Default: false Introduced in NLog 4.3.10 with default: true , then NLog 4.4 changed default to false . detectOutputRedirected - Indicates whether the console target should disable coloring when it detects that Console.IsOutputRedirected = true (Skip coloring when pipe to file) Introduced in NLog 4.6.7 enableAnsiOutput - Enables output using ANSI Color Codes. Needed for e.g. Visual Studio Code. Boolean Default: false Introduced in NLog 4.6 autoFlush - Performs explicit flush after every console write. Useful if having redirected to custom console-stream that doesn't has autoflush enabled. Boolean. Default = False. Introduced in NLog 4.6.3 Highlighting Rules useDefaultRowHighlightingRules - Indicates whether to use default row highlighting rules. Boolean Default: True The default rules are using these Colors : Condition Foreground Color Background Color level == LogLevel.Fatal Red NoChange level == LogLevel.Error Yellow NoChange level == LogLevel.Warn Magenta NoChange level == LogLevel.Info White NoChange level == LogLevel.Debug Gray NoChange level == LogLevel.Trace DarkGray NoChange rowHighlightingRules - The row highlighting rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Color Enum Default: NoChange foregroundColor - Foreground color. Color Enum Default: NoChange condition - Condition that must be met in order to set the specified foreground and background color. Condition Required. wordHighlightingRules - The word highlighting rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Color Enum Default: NoChange foregroundColor - Foreground color. Color Enum Default: NoChange text - Text to be matched. You must specify either text or regex. regex - Regular expression to be matched. You must specify either text or regex. ignoreCase - Indicates whether to ignore case when comparing texts. Boolean Default: false wholeWords - Indicates whether to match whole words only. Boolean Default: false compileRegex - Introduced in NLog 4.3. Compiles the Regex. If false , the regex cache is used. Setting this to true can improve performance, but costs memory. Default: false condition - Introduced in NLog 4.7.1. Condition that must be met before scanning for words to highlight. Condition . Colors Color Enum Description HEX Code ANSI Foreground ANSI Background NoChange Don't change the color Black Black Color #000000 \\x1B[30m \\x1B[40m Blue Blue Color #0000FF \\x1B[94m \\x1B[104m Cyan Cyan Color #00FFFF \\x1B[96m \\x1B[106m DarkBlue Dark Blue Color #000080 \\x1B[34m \\x1B[44m DarkCyan Dark Cyan Color #008080 \\x1B[36m \\x1B[46m DarkGray Dark Gray Color #808080 \\x1B[90m \\x1B[100m DarkGreen Dark Green Color #008000 \\x1B[32m \\x1B[42m DarkMagenta Dark Magenta Color #800080 \\x1B[35m \\x1B[45m DarkRed Dark Red Color #800000 \\x1B[31m \\x1B[41m DarkYellow Dark Yellow Color #808000 \\x1B[33m \\x1B[43m Gray Gray Color #C0C0C0 \\x1B[37m \\x1B[47m Green Green Color #00FF00 \\x1B[92m \\x1B[102m Magenta Magenta Color #FF00FF \\x1B[95m \\x1B[105m Red Red Color #FF0000 \\x1B[91m \\x1B[101m White White Color #FFFFFF \\x1b[97m \\x1B[107m Yellow Yellow Color #FFFF00 \\x1B[93m \\x1B[103m Programmatic example var consoleTarget = new ColoredConsoleTarget(); var highlightRule = new ConsoleRowHighlightingRule(); highlightRule.Condition = ConditionParser.ParseExpression(\"level == LogLevel.Info\"); highlightRule.ForegroundColor = ConsoleOutputColor.Green; consoleTarget.RowHighlightingRules.Add(highlightRule); Microsoft Extension Logging AddConsole The NLog Layout of the ColoredConsole-Target can be configured to match the output of the default MEL AddConsole(). See also NLog Console and AddConsole Visual Studio Output window The Visual Studio \"Output Window\" is bit tricky with colors. It is not a real console window - it just displays the console output from the application. You could get colors by prefixing the message in your config (Ex. Layout=\"${level:format=FulleName}: ${message}\" ) \"Error: \" - for errors - red \"Warning: \" - for warnings - orange See Stackoverflow Or use The Visual Studio extension VSColorOutput (VS2015-2019). Then you could also use the regular Console target . Missing colors for dotnet watch run When running application using dotnet watch run then one might experience that console colors are missing. This can be fixed by changing launchSettings.json and removing the entry launchBrowser and the colors should return. See also: https://github.com/dotnet/aspnetcore/issues/25317","title":"ColoredConsole target"},{"location":"ColoredConsole-target/#configuration-syntax","text":"<targets> <target xsi:type=\"ColoredConsole\" name=\"String\" encoding=\"Encoding\" layout=\"Layout\" header=\"Layout\" footer=\"Layout\" useDefaultRowHighlightingRules=\"Boolean\" errorStream=\"Boolean\" enableAnsiOutput=\"Boolean\" detectConsoleAvailable=\"Boolean\" detectOutputRedirected=\"Boolean\"> <highlight-row condition=\"Condition\" backgroundColor=\"Enum\" foregroundColor=\"Enum\"/><!-- repeated --> <highlight-word text=\"String\" condition=\"Condition\" backgroundColor=\"Enum\" foregroundColor=\"Enum\" ignoreCase=\"Boolean\" regex=\"String\" wholeWords=\"Boolean\" compileRegex=\"Boolean\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"ColoredConsole-target/#parameters","text":"","title":"Parameters"},{"location":"ColoredConsole-target/#general-options","text":"name - Name of the target. encoding - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN . Defaults to Encoding.Default . Introduced with NLog 4.0","title":"General Options"},{"location":"ColoredConsole-target/#layout-options","text":"layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} header - Header. Layout footer - Footer. Layout","title":"Layout Options"},{"location":"ColoredConsole-target/#output-options","text":"StdErr - Indicates whether the error stream (stderr) should be used instead of the output stream (stdout). Boolean Default: False Before NLog v5.0 the property was named errorStream . detectConsoleAvailable - Indicates whether the console target should disable itself when no console detected. Boolean Default: false Introduced in NLog 4.3.10 with default: true , then NLog 4.4 changed default to false . detectOutputRedirected - Indicates whether the console target should disable coloring when it detects that Console.IsOutputRedirected = true (Skip coloring when pipe to file) Introduced in NLog 4.6.7 enableAnsiOutput - Enables output using ANSI Color Codes. Needed for e.g. Visual Studio Code. Boolean Default: false Introduced in NLog 4.6 autoFlush - Performs explicit flush after every console write. Useful if having redirected to custom console-stream that doesn't has autoflush enabled. Boolean. Default = False. Introduced in NLog 4.6.3","title":"Output Options"},{"location":"ColoredConsole-target/#highlighting-rules","text":"useDefaultRowHighlightingRules - Indicates whether to use default row highlighting rules. Boolean Default: True The default rules are using these Colors : Condition Foreground Color Background Color level == LogLevel.Fatal Red NoChange level == LogLevel.Error Yellow NoChange level == LogLevel.Warn Magenta NoChange level == LogLevel.Info White NoChange level == LogLevel.Debug Gray NoChange level == LogLevel.Trace DarkGray NoChange rowHighlightingRules - The row highlighting rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Color Enum Default: NoChange foregroundColor - Foreground color. Color Enum Default: NoChange condition - Condition that must be met in order to set the specified foreground and background color. Condition Required. wordHighlightingRules - The word highlighting rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Color Enum Default: NoChange foregroundColor - Foreground color. Color Enum Default: NoChange text - Text to be matched. You must specify either text or regex. regex - Regular expression to be matched. You must specify either text or regex. ignoreCase - Indicates whether to ignore case when comparing texts. Boolean Default: false wholeWords - Indicates whether to match whole words only. Boolean Default: false compileRegex - Introduced in NLog 4.3. Compiles the Regex. If false , the regex cache is used. Setting this to true can improve performance, but costs memory. Default: false condition - Introduced in NLog 4.7.1. Condition that must be met before scanning for words to highlight. Condition .","title":"Highlighting Rules"},{"location":"ColoredConsole-target/#colors","text":"Color Enum Description HEX Code ANSI Foreground ANSI Background NoChange Don't change the color Black Black Color #000000 \\x1B[30m \\x1B[40m Blue Blue Color #0000FF \\x1B[94m \\x1B[104m Cyan Cyan Color #00FFFF \\x1B[96m \\x1B[106m DarkBlue Dark Blue Color #000080 \\x1B[34m \\x1B[44m DarkCyan Dark Cyan Color #008080 \\x1B[36m \\x1B[46m DarkGray Dark Gray Color #808080 \\x1B[90m \\x1B[100m DarkGreen Dark Green Color #008000 \\x1B[32m \\x1B[42m DarkMagenta Dark Magenta Color #800080 \\x1B[35m \\x1B[45m DarkRed Dark Red Color #800000 \\x1B[31m \\x1B[41m DarkYellow Dark Yellow Color #808000 \\x1B[33m \\x1B[43m Gray Gray Color #C0C0C0 \\x1B[37m \\x1B[47m Green Green Color #00FF00 \\x1B[92m \\x1B[102m Magenta Magenta Color #FF00FF \\x1B[95m \\x1B[105m Red Red Color #FF0000 \\x1B[91m \\x1B[101m White White Color #FFFFFF \\x1b[97m \\x1B[107m Yellow Yellow Color #FFFF00 \\x1B[93m \\x1B[103m","title":"Colors"},{"location":"ColoredConsole-target/#programmatic-example","text":"var consoleTarget = new ColoredConsoleTarget(); var highlightRule = new ConsoleRowHighlightingRule(); highlightRule.Condition = ConditionParser.ParseExpression(\"level == LogLevel.Info\"); highlightRule.ForegroundColor = ConsoleOutputColor.Green; consoleTarget.RowHighlightingRules.Add(highlightRule);","title":"Programmatic example"},{"location":"ColoredConsole-target/#microsoft-extension-logging-addconsole","text":"The NLog Layout of the ColoredConsole-Target can be configured to match the output of the default MEL AddConsole(). See also NLog Console and AddConsole","title":"Microsoft Extension Logging AddConsole"},{"location":"ColoredConsole-target/#visual-studio-output-window","text":"The Visual Studio \"Output Window\" is bit tricky with colors. It is not a real console window - it just displays the console output from the application. You could get colors by prefixing the message in your config (Ex. Layout=\"${level:format=FulleName}: ${message}\" ) \"Error: \" - for errors - red \"Warning: \" - for warnings - orange See Stackoverflow Or use The Visual Studio extension VSColorOutput (VS2015-2019). Then you could also use the regular Console target .","title":"Visual Studio Output window"},{"location":"ColoredConsole-target/#missing-colors-for-dotnet-watch-run","text":"When running application using dotnet watch run then one might experience that console colors are missing. This can be fixed by changing launchSettings.json and removing the entry launchBrowser and the colors should return. See also: https://github.com/dotnet/aspnetcore/issues/25317","title":"Missing colors for dotnet watch run"},{"location":"Combine-XML-config-with-C%23-config/","text":"Combining XML config with C# config is tricky, as autoreload/load of the XML file could overwrite the C# config. To combine both, the ConfigurationReloaded event is needed Example We use the nlog.config and We add the console target and rules in C# using System; using NLog; using NLog.Config; using NLog.Targets; class Program { // Define a static logger variable so that it references the logger instanced named \"Scribe\" private static readonly Logger log = LogManager.GetCurrentClassLogger(); static void Main(string[] args) { ExtendNLogConfig(); LogManager.ConfigurationReloaded += LogManager_ConfigurationReloaded; log.Info(\"Entering Application.\"); Console.WriteLine(\"Press any key to exit ...\"); Console.Read(); } private static void LogManager_ConfigurationReloaded(object sender, LoggingConfigurationReloadedEventArgs e) { ExtendNLogConfig(); } /// <summary> /// Extend the logging rules in the nlog.config with programmically rules. /// </summary> private static void ExtendNLogConfig() { //don't set LogManager.Configuration because that will overwrite the nlog.config settings var consoleTarget = new ColoredConsoleTarget(); consoleTarget.Name = \"console\"; LogManager.Configuration.AddTarget(\"console\", consoleTarget); consoleTarget.Layout = @\"${date:format=HH\\:mm\\:ss} ${logger} ${message} ${exception} ${event-properties:item=MyValue}\"; var rule1 = new LoggingRule(\"*\", LogLevel.Debug, consoleTarget); LogManager.Configuration.LoggingRules.Add(rule1); LogManager.ReconfigExistingLoggers(); } }","title":"Combine XML config with C# config"},{"location":"Combine-XML-config-with-C%23-config/#example","text":"We use the nlog.config and We add the console target and rules in C# using System; using NLog; using NLog.Config; using NLog.Targets; class Program { // Define a static logger variable so that it references the logger instanced named \"Scribe\" private static readonly Logger log = LogManager.GetCurrentClassLogger(); static void Main(string[] args) { ExtendNLogConfig(); LogManager.ConfigurationReloaded += LogManager_ConfigurationReloaded; log.Info(\"Entering Application.\"); Console.WriteLine(\"Press any key to exit ...\"); Console.Read(); } private static void LogManager_ConfigurationReloaded(object sender, LoggingConfigurationReloadedEventArgs e) { ExtendNLogConfig(); } /// <summary> /// Extend the logging rules in the nlog.config with programmically rules. /// </summary> private static void ExtendNLogConfig() { //don't set LogManager.Configuration because that will overwrite the nlog.config settings var consoleTarget = new ColoredConsoleTarget(); consoleTarget.Name = \"console\"; LogManager.Configuration.AddTarget(\"console\", consoleTarget); consoleTarget.Layout = @\"${date:format=HH\\:mm\\:ss} ${logger} ${message} ${exception} ${event-properties:item=MyValue}\"; var rule1 = new LoggingRule(\"*\", LogLevel.Debug, consoleTarget); LogManager.Configuration.LoggingRules.Add(rule1); LogManager.ReconfigExistingLoggers(); } }","title":"Example"},{"location":"CompoundLayout/","text":"A layout that contains one or more nested layouts. Platforms Supported: All Introduced in NLog 4.3.6 <target name='file' type='File' fileName='log.txt'> <layout type='CompoundLayout'> <layout type='SimpleLayout' text=\"text1\" /> <layout type='SimpleLayout' text=\" - \" /> <layout type='SimpleLayout' text=\"text2\" /> </layout> </target> text1 - text2 Advanced examples From code var compoundLayout = new CompoundLayout { Layouts = { new SimpleLayout(\"myAmazingText: \"), new JsonLayout { Attributes = { new JsonAttribute(\"time\", \"${longdate}\"), new JsonAttribute(\"level\", \"${level:upperCase=true}\"), } } } }; myAmazingText: { \"time\": \"2016-10-30 13:30:55.0000\", \"level\": \"INFO\" } From XML <nlog> <targets> <target name='file' type='File' fileName='log.txt'> <layout type='CompoundLayout'> <layout type='SimpleLayout' text=\"myAmazingText: \" /> <layout type='JsonLayout'> <attribute name='time' layout='${longdate}' /> <attribute name='level' layout='${level:upperCase=true}'/> </layout> </layout> </target> </targets> <rules> </rules> </nlog> myAmazingText: { \"time\": \"2016-10-30 13:30:55.0000\", \"level\": \"INFO\" }","title":"CompoundLayout"},{"location":"CompoundLayout/#advanced-examples","text":"","title":"Advanced examples"},{"location":"CompoundLayout/#from-code","text":"var compoundLayout = new CompoundLayout { Layouts = { new SimpleLayout(\"myAmazingText: \"), new JsonLayout { Attributes = { new JsonAttribute(\"time\", \"${longdate}\"), new JsonAttribute(\"level\", \"${level:upperCase=true}\"), } } } }; myAmazingText: { \"time\": \"2016-10-30 13:30:55.0000\", \"level\": \"INFO\" }","title":"From code"},{"location":"CompoundLayout/#from-xml","text":"<nlog> <targets> <target name='file' type='File' fileName='log.txt'> <layout type='CompoundLayout'> <layout type='SimpleLayout' text=\"myAmazingText: \" /> <layout type='JsonLayout'> <attribute name='time' layout='${longdate}' /> <attribute name='level' layout='${level:upperCase=true}'/> </layout> </layout> </target> </targets> <rules> </rules> </nlog> myAmazingText: { \"time\": \"2016-10-30 13:30:55.0000\", \"level\": \"INFO\" }","title":"From XML"},{"location":"Conditions/","text":"See https://github.com/NLog/NLog/wiki/When-Filter#conditions","title":"Conditions"},{"location":"ConfigSetting-Layout-Renderer/","text":"Value from the appsettings.json or other configuration in .NET Core Introduced with NLog.Extensions.Logging 1.4.0 and NLog.Web.AspNetCore 4.8.0 Register Configuration When calling UseNLog() from NLog.Web.AspNetCore or NLog.Extensions.Hosting then it will automatically register hosting environment configuration with ConfigSettingLayoutRenderer . But to make ${configsetting} work during startup, before Host has been built, then NLog.Web.AspNetCore makes it easier to load appsettings.json (Since ver. 4.9.3): // Loads appsetting.json and enables ${configsetting} var logger = LogManager.Setup() .LoadConfigurationFromAppSettings() .GetCurrentClassLogger(); Manual loading of appsettings.json with fluent API (Available with NLog v5): IConfigurationRoot config = new ConfigurationBuilder() .AddJsonFile(path: \"AppSettings.json\").Build(); var logger = LogManager.Setup() .LoadConfigurationFromSection(config) .GetCurrentClassLogger(); To manual register the Microsoft Extension IConfiguration with ${configsetting} for NLog v4: IConfigurationRoot config = new ConfigurationBuilder() .AddJsonFile(path: \"AppSettings.json\").Build(); NLog.Extensions.Logging.ConfigSettingLayoutRenderer.DefaultConfiguration = config; Configuration Syntax ${configsetting:item=String:default=String} Parameters Rendering Options item - Key in the config. Required. Use . for nested objects. Default - Default value if not present. Optional. Example Example: appsettings.json: { \"Mode\":\"Prod\", \"Options\":{ \"StorageConnectionString\":\"UseDevelopmentStorage=true\", } } Config Setting Lookup: ${configsetting:item=Mode} // renders \"Prod\" ${configsetting:item=Options.StorageConnectionString} // renders \"UseDevelopmentStorage=true\" ${configsetting:item=Options.TableName:default=MyTable} // renders \"MyTable\" Config Setting Lookup Cached: ${configsetting:cached=True:item=Mode}","title":"ConfigSetting Layout Renderer"},{"location":"ConfigSetting-Layout-Renderer/#register-configuration","text":"When calling UseNLog() from NLog.Web.AspNetCore or NLog.Extensions.Hosting then it will automatically register hosting environment configuration with ConfigSettingLayoutRenderer . But to make ${configsetting} work during startup, before Host has been built, then NLog.Web.AspNetCore makes it easier to load appsettings.json (Since ver. 4.9.3): // Loads appsetting.json and enables ${configsetting} var logger = LogManager.Setup() .LoadConfigurationFromAppSettings() .GetCurrentClassLogger(); Manual loading of appsettings.json with fluent API (Available with NLog v5): IConfigurationRoot config = new ConfigurationBuilder() .AddJsonFile(path: \"AppSettings.json\").Build(); var logger = LogManager.Setup() .LoadConfigurationFromSection(config) .GetCurrentClassLogger(); To manual register the Microsoft Extension IConfiguration with ${configsetting} for NLog v4: IConfigurationRoot config = new ConfigurationBuilder() .AddJsonFile(path: \"AppSettings.json\").Build(); NLog.Extensions.Logging.ConfigSettingLayoutRenderer.DefaultConfiguration = config;","title":"Register Configuration"},{"location":"ConfigSetting-Layout-Renderer/#configuration-syntax","text":"${configsetting:item=String:default=String}","title":"Configuration Syntax"},{"location":"ConfigSetting-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"ConfigSetting-Layout-Renderer/#rendering-options","text":"item - Key in the config. Required. Use . for nested objects. Default - Default value if not present. Optional.","title":"Rendering Options"},{"location":"ConfigSetting-Layout-Renderer/#example","text":"Example: appsettings.json: { \"Mode\":\"Prod\", \"Options\":{ \"StorageConnectionString\":\"UseDevelopmentStorage=true\", } } Config Setting Lookup: ${configsetting:item=Mode} // renders \"Prod\" ${configsetting:item=Options.StorageConnectionString} // renders \"UseDevelopmentStorage=true\" ${configsetting:item=Options.TableName:default=MyTable} // renders \"MyTable\" Config Setting Lookup Cached: ${configsetting:cached=True:item=Mode}","title":"Example"},{"location":"Configuration-API/","text":"moved here: https://github.com/NLog/NLog/wiki/Configure-from-code","title":"Configuration API"},{"location":"Configuration-file/","text":"NLog will only produce output if having configured one (or more) NLog targets. NLog can be configured using XML by adding a NLog.config, that will be described in the page. Everything that could be configured from XML file, could be also configured in code. How to config from code is in short described in Configure from code . Please note that most concepts of configuring (XML or from API) are described here with a XML example. Contents File locations NLog config XML Top-level elements Targets Log levels Rules Variables Layouts and layout renderers Asynchronous processing and wrapper targets Default wrappers Default target parameters Extensions Automatic reconfiguration Include files Content escaping Troubleshooting logging File locations At startup, NLog searches for its configuration in various files as described below. It loads the first nlog configuration found. Search ends when the first nlog configuration is found. NLog will not perform any logging if configuration is not found. For a stand-alone *.exe application, files are searched as follows: * standard application configuration file app.config (Ex. applicationname.exe.config) * applicationname.exe.nlog in application\u2019s directory * NLog.config in application\u2019s directory * NLog.dll.nlog in a directory where NLog.dll is located (only if NLog isn't installed in the GAC) For an ASP.NET application, files are searched as follows: * standard web application configuration file web.config * web.nlog located in the same directory as web.config * NLog.config in application\u2019s directory * NLog.dll.nlog in a directory where NLog.dll is located (only if NLog isn't installed in the GAC) See also Explicit NLog configuration loading (Includes details about assets -folder for Xamarin Android). NLog config XML NLog configuration is formatted as XML and is either embedded in a Visual Studio project config file (app.config or web.config) or is a stand-alone XML file (Remember to configure File Properties: Copy If newer ) Example XML for a stand-alone NLog.config : <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> </rules> </nlog> To embed NLog config XML inside app.config / web.config file, add an nlog section element under configSections and add an nlog element. For example: <configuration> <configSections> <section name=\"nlog\" type=\"NLog.Config.ConfigSectionHandler, NLog\"/> </configSections> ... <nlog> <targets> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> </rules> </nlog> </configuration> The use of an XML namespace is optional, but enables Intellisense in Visual Studio. NLog config XML is case-insensitive for Xml-Nodes and Xml-Attributes, when not using a namespace and is case-sensitive when using a namespace. Top-level elements You can use the following elements as children to nlog . targets and rules are required in any configuration The others are optional and can be useful in advanced scenarios. * targets \u2013 defines log targets/outputs * rules \u2013 defines log routing rules * extensions \u2013 loads NLog extensions from the *.dll file * include \u2013 includes external configuration file * variable \u2013 sets the value of a configuration variable The simplest configuration consists of one target and one rule ( logger ) that routes messages to the target. Targets The targets section defines log Targets . Each target is represented by a target element. There are two attributes required for each target: * name \u2013 target name * type \u2013 target type \u2013 such as \"File\", \"Database\", \"Mail\". When using namespaces this attribute is named xsi:type . In addition to these attributes, targets usually accept other parameters, which impact the way diagnostic traces are written. Each target has a different set of parameters, they are described in detail on project\u2019s homepage and they are context-sensitive. Intellisense is also available in Visual Studio. For example \u2013 the File target accepts the fileName parameter which defines output file name and the Console target has the error parameter which determines whether the diagnostic traces are written to standard error (stderr) instead of standard output (stdout) of the process. This example demonstrates a targets section which defines multiple targets: two files, one network target and OutputDebugString target: <targets> <target name=\"f1\" xsi:type=\"File\" fileName=\"file1.txt\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"file2.txt\"/> <target name=\"n1\" xsi:type=\"Network\" address=\"tcp://localhost:4001\"/> <target name=\"ds\" xsi:type=\"OutputDebugString\"/> </targets> NLog provides many predefined Targets . It\u2019s actually very easy to create your own target - see How to write a custom Target . Log levels Each log entry has a level. And each logger is configured to include or ignore certain levels. A common configuration is to specify the minimum level where that level and higher levels are included. For example, if the minimum level is Info, then Info, Warn, Error and Fatal are logged, but Debug and Trace are ignored. The log levels ordered by severity: LogLevel Ordinal Severity Typical Use Trace 0 Most verbose level. Used for development and seldom enabled in production. Ex. Request-payload, Response-payload, Begin-method-X or End-method-X Debug 1 Debugging the application behavior from internal events of interest. Ex. Executed query, User authenticated, Session expired Info 2 Information that highlights progress or application lifetime events. Warn 3 Warnings about validation issues or temporary failures that can be recovered. Error 4 Errors where functionality has failed or Exception have been caught. Fatal 5 Most critical level. Application is about to abort. There is one more level, Off has the highest ordinal value. It is not used for LogEvents, but can be used for filtering in logging rules . Rules The rules section controls how LogEvents from the Logger-objects are redirected to output targets . Where logger-name and log levels can be used for filtering. When creating a NLog Logger-object then one must provide a logger-name like NLog.LogManager.GetLogger(\"my logger name\") . The logger-name can also be extracted from class-context by using NLog.LogManager.GetCurrentClassLogger() where logger-name becomes \"NameSpace.ClassName\". A single rule is defined with a logger element that filters what Logger-objects to match: name \u2013 Match logger-name of the Logger-object - may include wildcard characters (* and ?) minlevel \u2013 minimal level to log maxlevel \u2013 maximum level to log level \u2013 single level to log levels - comma separated list of levels to log writeTo \u2013 comma separated list of targets to write to final \u2013 no rules are processed after a final rule matches enabled - set to false to disable the rule without deleting it ruleName - rule identifier to allow rule lookup with Configuration.FindRuleByName and Configuration.RemoveRuleByName . Introduced in NLog 4.6.4 finalMinLevel - Loggers matching will be restricted to specified minimum level for following rules. Introduced in NLog 5.0 The example below shows a single rule that will match ALL Logger-objects independent of their logger-name because of name=\"*\" . At the same time it will only match LogEvents with minimum LogLevel = Info (or more severe). LogEvents matching these criterias will be written to the console-target. <targets> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> </rules> Rules are processed in sequential order. Multiple rules may apply to a logger. Use final to stop processing rules after a match is found. Note: Although a rule is named logger , it does not define a logger. It references one or more loggers based on the name-pattern. Logger Name Filter A rule is mapped to a logger by matching the rule name pattern to a logger name. A rule name attribute may include wildcard characters (* and ?) to match logger names by wildcard matching. * * - matches 0 or more characters * ? - matches exactly 1 character When using NLog.LogManager.GetCurrentClassLogger() then the logger name will have the format \"NameSpace.ClassName\". This makes it very convenient to setup filtering for all classes within a namespace: <logger name=\"Name.Space.*\" writeTo=\"target1\" /> By using logger-name filtering then one can also redirect output for a single ClassName-logger: <logger name=\"Name.Space.Class1\" writeTo=\"target2\" /> <!-- Add final=true to stop output to target1 --> <logger name=\"Name.Space.*\" writeTo=\"target1\" /> One can also reduce the logging from a single ClassName-logger: <logger name=\"Name.Space.Class2\" maxlevel=\"Warn\" final=\"true\" /> <!-- Blackhole that stops all but Error + Fatal --> <logger name=\"Name.Space.*\" writeTo=\"target1\" /> One can also completely block a single ClassName-logger: <logger name=\"Name.Space.Class3\" maxlevel=\"Off\" final=\"true\" /> <!-- Blackhole that stops everything --> <logger name=\"Name.Space.*\" writeTo=\"target1\" /> Before NLog 4.6 then one could only use wildcards (*) at the beginning and/or at the end of the pattern: <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> <logger name=\"Name.Space.*\" minlevel=\"Debug\" writeTo=\"f1\" /> <logger name=\"*.Class1\" minlevel=\"Trace\" writeTo=\"f2\" /> <logger name=\"*.Library.*\" minlevel=\"Warn\" writeTo=\"f3\" /> </rules> Since NLog 4.6, wildcards (* and ?) are allowed in any position. <rules> <logger name=\"*TcpTestServer[*].Connection[07].*\" minlevel=\"Trace\" writeTo=\"logconsole\" final=\"true\" /> <logger name=\"*TcpTestServer[*].Connection[??].*\" minlevel=\"Debug\" writeTo=\"logconsole\" final=\"true\" /> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> </rules> Logger Level Filter A rule defines which log entry level(s) are matched. Entries with other levels will not match this rule. A commonly used specifier is minlevel . The other specifiers allow for more advanced configuration. If a rule contains more than one level-declaring attribute ( level , levels , minlevel and maxlevel ) only the first level-declaring attribute or set is used and the rest are ignored. The level-declaring attributes are processed in the following order: level levels minlevel and maxlevel (these have the same priority) none (all levels are logged) For example: if minlevel=\"Warn\" level=\"Info\" is used, the rule will only use Info In case a rule is marked as final and contains any level-declaring attributes, the final attribute applies only to the specified levels. Dynamic Logger Level Filter The logging rules provides high performance because of their static nature. The options for configuration has been very limited. But recent changes has now been made to improve this: NLog 4.6 added support for using NLog Config Variables to configure level attributes. ( level , minlevel etc): <variable name='globalLevel' value='debug'/> <rules> <logger minlevel='${globalLevel}'/> </rules> NLog 4.6.4 added support for lookup of Logging Rules using RuleName using Configuration API NLog 4.6.7 added support for using NLog Layout like ${gdc:globalLevel} to dynamically change level attributes at runtime. See also Semi Dynamic Routing Rules Variables NLog Config Variables allows you to simplify configuration by reducing repeated text. Variable can be used to give a human name to a NLog Layout that is commonly used (or is long and complex). This makes it easier to organize and structure the NLog config. Define a custom variable as follows: <variable name=\"varname\" value=\"xxx\" /> The value of a variable can be inserted into an attribute value via the ${varname} syntax. A variable value can even be used to define the value of another variable. The following example shows using a pre-defined variable shortdate and defining and using a custom variable logDirectory . <nlog> <variable name=\"logDirectory\" value=\"logs/${shortdate}\"/> <targets> <target name=\"file1\" xsi:type=\"File\" fileName=\"${logDirectory}/file1.txt\"/> <target name=\"file2\" xsi:type=\"File\" fileName=\"${logDirectory}/file2.txt\"/> </targets> </nlog> With this syntax, a variable must be defined before use. Otherwise configuration initialization will fail. Note ${gdc} can be used used as an alternative to configuration variables, as they work independent of loading / unloading / reloading different NLog configurations. NLog Config variables can operate in two modes: Constant mode - ${varName} Dynamic mode - ${var:varName} (Introduced with NLog 4.1) Constant mode (or static mode) works for all types of properties independent of their type, but they will not react to runtime changes. Dynamic mode only works for properties of the type NLog Layout , and provides the following abilities: Variables can be changed, deleted and created from the Configuration API A default value can be configured for a variable, e.g. ${var:password:default=unknown} By default all variables assigned at runtime are kept even after configuration reloads. Unless having configured keepVariablesOnReload=\"false\" . NLog 4.4 introduced keepVariablesOnReload and before NLog 5.0 the default value was false NLog 5.0 extends NLog config variables to also handle complex Layout types like JsonLayout + CsvLayout. Ex: <nlog> <variable name=\"myJsonLayout\"> <layout type=\"JsonLayout\"> <attribute name=\"message\" value=\"${messsage}\"> </layout> </variable> <targets> <target name=\"debug\" type=\"Debug\" layout=\"${myJsonLayout}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"debug\" /> </rules> </nlog> Layouts and layout renderers One of NLog\u2019s strongest assets is the ability to use layouts . In the simplest form, layouts are texts with embedded tags delimited by ${ and } . The tags are called Layout Renderers and can be used to insert pieces of contextual information into the text. Layouts can be used in many places, for example they can control the format of information written on the screen or sent to a file, but also to control the file names themselves. This is very powerful, which we\u2019ll see in a moment. Let\u2019s assume, that we want to annotate each message written to the console with: * current date and time * name of the class and method that emitted the log message * log level * message text This is very easy: <target name=\"c\" xsi:type=\"Console\" layout=\"${longdate} ${callsite} ${level} ${message}\"/> We can make each messages for each logger go to a separate file, as in the following example: <target name=\"f\" xsi:type=\"File\" fileName=\"${logger}.txt\"/> As you can see, the ${logger} layout renderer was used in the fileName attribute, which causes each log message to be written to the file whose name includes the logger name. The above example will create the following files: * Name.Space.Class1.txt * Name.Space.Class2.txt * Name.Space.Class3.txt * Other.Name.Space.Class1.txt * Other.Name.Space.Class2.txt * Other.Name.Space.Class3.txt Asynchronous processing and wrapper targets NLog provides wrapper and compound targets which modify other targets\u2019 behavior by adding features like: * asynchronous processing (wrapped target runs in a separate thread) * retry-on-error * load balancing * buffering * filtering * failover (failover) To define a wrapper in the configuration file, simply nest a target node within another target node. You can even wrap a wrapper target - there are no limits on depth. For example, to add asynchronous logging with retry-on-error functionality add this to your configuration file: <targets> <target name=\"n\" xsi:type=\"AsyncWrapper\"> <target xsi:type=\"RetryingWrapper\"> <target xsi:type=\"File\" fileName=\"${file}.txt\" /> </target> </target> </targets> Because asynchronous processing is a common scenario, NLog supports a shorthand notation to enable it for all targets without the need to specify explicit wrappers. You can simply set async=\"true\" on targets element and all your targets within that element will be wrapped with the AsyncWrapper target. <nlog> <targets async=\"true\"> <!-- all targets in this section will automatically be asynchronous --> </targets> </nlog> Remember to Flush is very important, when using asynchronous background writing. It ensures all logging is written before application exit. Default wrappers Sometimes we require ALL targets to be wrapped in the same way, for example to add buffering and/or retrying. NLog provides <default-wrapper /> syntax for that. You simply put this element in the <targets /> section and all your targets will be automatically wrapped with the specified wrapper. Note that <default-wrapper /> applies to the single <targets /> section only and you can have multiple sections so you can define groups of targets that are wrapped in a similar manner. <nlog> <targets> <default-wrapper xsi:type=\"BufferingWrapper\" bufferSize=\"100\"/> <target name=\"f1\" xsi:type=\"File\" fileName=\"f1.txt\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"f2.txt\"/> </targets> <targets> <default-wrapper xsi:type=\"AsyncWrapper\"> <wrapper-target xsi:type=\"RetryingWrapper\"/> </default-wrapper> <target name=\"n1\" xsi:type=\"Network\" address=\"tcp://localhost:4001\"/> <target name=\"n2\" xsi:type=\"Network\" address=\"tcp://localhost:4002\"/> <target name=\"n3\" xsi:type=\"Network\" address=\"tcp://localhost:4003\"/> </targets> </nlog> In the above example we\u2019ve defined two buffered File targets and three asynchronous and retrying Network targets. Default target parameters Similar to default wrappers, NLog provides <default-target-parameters /> which enables you to specify default values of target parameters. For example, if you don\u2019t want files to be kept open, you can either add keepFileOpen=\"false\" to each target, as in the following example: <nlog> <targets> <target name=\"f1\" xsi:type=\"File\" fileName=\"f1.txt\" keepFileOpen=\"false\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"f2.txt\" keepFileOpen=\"false\"/> <target name=\"f3\" xsi:type=\"File\" fileName=\"f3.txt\" keepFileOpen=\"false\"/> </targets> </nlog> Alternatively you can specify a single <default-target-parameters /> that applies to all targets in the <targets /> section. Default parameters are defined on a per-type basis and are applied BEFORE the actual attributes defined in the XML file: <nlog> <targets> <default-target-parameters xsi:type=\"File\" keepFileOpen=\"false\"/> <target name=\"f1\" xsi:type=\"File\" fileName=\"f1.txt\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"f2.txt\"/> <target name=\"f3\" xsi:type=\"File\" fileName=\"f3.txt\"/> </targets> </nlog> Extensions Extensions can be configured to include additional NLog packages or custom ones: Just reference the DLL in the config in the <extensions /> as shown below. The name should not include the .dll Configuration file example: <nlog> <extensions> <add assembly=\"MyAssembly\"/> </extensions> <targets> <target name=\"a1\" type=\"MyTarget\" host=\"localhost\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" appendTo=\"a1\"/> </rules> </nlog> With NLog 5.0 it is also possible to specify fully qualified type-name, instead of needing to update <extensions> -section. This makes the snippets more isolated: <nlog> <targets> <target name=\"a1\" type=\"MyTarget, MyAssembly\" host=\"localhost\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" appendTo=\"a1\"/> </rules> </nlog> NLog 5.0 no longer automatically scans and loads extensions from assemblies with NLog-prefix. Because it introduced overhead during startup, and failed to work with <packagereference> . See also Register-your-custom-component Automatic reconfiguration The configuration file is read automatically at program startup. In a long running process (such as a Windows service or an ASP.NET application) it\u2019s sometimes desirable to temporarily increase the log level without stopping the application. NLog can monitor logging configuration files and re-read them each time they are modified. To enable this mechanism, you simply add autoReload=\"true\" parameter to the configuration file. <nlog autoReload=\"true\"> ... </nlog> Note that automatic reconfiguration supports include files, so each time one of the included files is changed, the entire configuration gets reloaded. Just to make it explicit, automatic reloading will NOT stop/recycle the IIS Application Pool. Include files NLog provides an include file feature so that configuration can be stored in multiple files. <include file=\"nlog-common.config\" /> Like most attributes in NLog config, the file attribute may reference variables. The following example includes a file named the same as the machine that nlog is running on. <include file=\"${machinename}.config\"/> Set the attribute ignoreErrors to true to prevent a startup failure if the include file cannot be loaded -- file not found, invalid XML, .... Use the Troubleshooting logging section to log errors. This attribute is optional and defaults to false . Since NLog 4.4.2, wildcards ( * ) are allowed. E.g. <include file=\"nlog-*.config\"/> A larger example can be found here: XML config <include /> example Content escaping In the configuration file some characters needs to be escaped. Because it XML file, the < and > brackets should be escaped with &lt; and &gt; . This also holds for the attribute values, like a condition. Inside a layout we need to escape the } bracket and the colon : should be escaped because: : is the value separator. } is the end of the layout Nested layout renderers doesn't need escaping. Also the backslash doesn't need an escape. Examples: ${appdomain:format={1\\}{0\\}} (escape of } ) ${rot13:inner=${scopenested:topFrames=3:separator=x}} (no escaping needed) ${when:when=1 == 1:Inner=Test\\: Hello} (escape of : ) Troubleshooting logging Sometimes our application doesn\u2019t write anything to the log files, even though we have supposedly configured logging properly. There can be many reasons for logs not being written. The most common problems are permissions issues, usually in an ASP.NET process, where the aspnet_wp.exe or w3wp.exe process may not have write access to the directory where we want to store logs. NLog is designed to swallow run-time exceptions that may result from logging. The following settings can change this behavior and/or redirect these messages. * <nlog throwExceptions=\"true\" /> - adding the throwExceptions attribute in the config file causes NLog to stop masking exceptions and pass them to the calling application instead. This attribute is useful at deployment time to quickly locate any problems. It is critical that one configure throwExceptions to \"false\" as soon as the application is properly configured to run, so accidental logging problems will not cause application to hang or crash. * <nlog throwConfigExceptions=\"true\" /> - Similar to throwExceptions but isolated to configuration exceptions only. Unlike throwExceptions then it is not dangerous to have enabled, and is recommended for production environments where it is critical that initial setup of logging configuration succeeds. Introduced in NLog 4.3. Default null (Means not configured and instead use value of throwExceptions ) * <nlog internalLogLevel=\"Trace|Debug|Info|Warn|Error|Fatal\" /> \u2013 determines the internal log level. The higher the level, the less verbose the internal log output. The output is usually very helpful when needing to diagnose logging issues. See Internal-logging for options to setup output to File or Console. See also Logging-troubleshooting","title":"Configuration file"},{"location":"Configuration-file/#contents","text":"File locations NLog config XML Top-level elements Targets Log levels Rules Variables Layouts and layout renderers Asynchronous processing and wrapper targets Default wrappers Default target parameters Extensions Automatic reconfiguration Include files Content escaping Troubleshooting logging","title":"Contents"},{"location":"Configuration-file/#file-locations","text":"At startup, NLog searches for its configuration in various files as described below. It loads the first nlog configuration found. Search ends when the first nlog configuration is found. NLog will not perform any logging if configuration is not found. For a stand-alone *.exe application, files are searched as follows: * standard application configuration file app.config (Ex. applicationname.exe.config) * applicationname.exe.nlog in application\u2019s directory * NLog.config in application\u2019s directory * NLog.dll.nlog in a directory where NLog.dll is located (only if NLog isn't installed in the GAC) For an ASP.NET application, files are searched as follows: * standard web application configuration file web.config * web.nlog located in the same directory as web.config * NLog.config in application\u2019s directory * NLog.dll.nlog in a directory where NLog.dll is located (only if NLog isn't installed in the GAC) See also Explicit NLog configuration loading (Includes details about assets -folder for Xamarin Android).","title":"File locations"},{"location":"Configuration-file/#nlog-config-xml","text":"NLog configuration is formatted as XML and is either embedded in a Visual Studio project config file (app.config or web.config) or is a stand-alone XML file (Remember to configure File Properties: Copy If newer ) Example XML for a stand-alone NLog.config : <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> </rules> </nlog> To embed NLog config XML inside app.config / web.config file, add an nlog section element under configSections and add an nlog element. For example: <configuration> <configSections> <section name=\"nlog\" type=\"NLog.Config.ConfigSectionHandler, NLog\"/> </configSections> ... <nlog> <targets> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> </rules> </nlog> </configuration> The use of an XML namespace is optional, but enables Intellisense in Visual Studio. NLog config XML is case-insensitive for Xml-Nodes and Xml-Attributes, when not using a namespace and is case-sensitive when using a namespace.","title":"NLog config XML"},{"location":"Configuration-file/#top-level-elements","text":"You can use the following elements as children to nlog . targets and rules are required in any configuration The others are optional and can be useful in advanced scenarios. * targets \u2013 defines log targets/outputs * rules \u2013 defines log routing rules * extensions \u2013 loads NLog extensions from the *.dll file * include \u2013 includes external configuration file * variable \u2013 sets the value of a configuration variable The simplest configuration consists of one target and one rule ( logger ) that routes messages to the target.","title":"Top-level elements"},{"location":"Configuration-file/#targets","text":"The targets section defines log Targets . Each target is represented by a target element. There are two attributes required for each target: * name \u2013 target name * type \u2013 target type \u2013 such as \"File\", \"Database\", \"Mail\". When using namespaces this attribute is named xsi:type . In addition to these attributes, targets usually accept other parameters, which impact the way diagnostic traces are written. Each target has a different set of parameters, they are described in detail on project\u2019s homepage and they are context-sensitive. Intellisense is also available in Visual Studio. For example \u2013 the File target accepts the fileName parameter which defines output file name and the Console target has the error parameter which determines whether the diagnostic traces are written to standard error (stderr) instead of standard output (stdout) of the process. This example demonstrates a targets section which defines multiple targets: two files, one network target and OutputDebugString target: <targets> <target name=\"f1\" xsi:type=\"File\" fileName=\"file1.txt\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"file2.txt\"/> <target name=\"n1\" xsi:type=\"Network\" address=\"tcp://localhost:4001\"/> <target name=\"ds\" xsi:type=\"OutputDebugString\"/> </targets> NLog provides many predefined Targets . It\u2019s actually very easy to create your own target - see How to write a custom Target .","title":"Targets"},{"location":"Configuration-file/#log-levels","text":"Each log entry has a level. And each logger is configured to include or ignore certain levels. A common configuration is to specify the minimum level where that level and higher levels are included. For example, if the minimum level is Info, then Info, Warn, Error and Fatal are logged, but Debug and Trace are ignored. The log levels ordered by severity: LogLevel Ordinal Severity Typical Use Trace 0 Most verbose level. Used for development and seldom enabled in production. Ex. Request-payload, Response-payload, Begin-method-X or End-method-X Debug 1 Debugging the application behavior from internal events of interest. Ex. Executed query, User authenticated, Session expired Info 2 Information that highlights progress or application lifetime events. Warn 3 Warnings about validation issues or temporary failures that can be recovered. Error 4 Errors where functionality has failed or Exception have been caught. Fatal 5 Most critical level. Application is about to abort. There is one more level, Off has the highest ordinal value. It is not used for LogEvents, but can be used for filtering in logging rules .","title":"Log levels"},{"location":"Configuration-file/#rules","text":"The rules section controls how LogEvents from the Logger-objects are redirected to output targets . Where logger-name and log levels can be used for filtering. When creating a NLog Logger-object then one must provide a logger-name like NLog.LogManager.GetLogger(\"my logger name\") . The logger-name can also be extracted from class-context by using NLog.LogManager.GetCurrentClassLogger() where logger-name becomes \"NameSpace.ClassName\". A single rule is defined with a logger element that filters what Logger-objects to match: name \u2013 Match logger-name of the Logger-object - may include wildcard characters (* and ?) minlevel \u2013 minimal level to log maxlevel \u2013 maximum level to log level \u2013 single level to log levels - comma separated list of levels to log writeTo \u2013 comma separated list of targets to write to final \u2013 no rules are processed after a final rule matches enabled - set to false to disable the rule without deleting it ruleName - rule identifier to allow rule lookup with Configuration.FindRuleByName and Configuration.RemoveRuleByName . Introduced in NLog 4.6.4 finalMinLevel - Loggers matching will be restricted to specified minimum level for following rules. Introduced in NLog 5.0 The example below shows a single rule that will match ALL Logger-objects independent of their logger-name because of name=\"*\" . At the same time it will only match LogEvents with minimum LogLevel = Info (or more severe). LogEvents matching these criterias will be written to the console-target. <targets> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> </rules> Rules are processed in sequential order. Multiple rules may apply to a logger. Use final to stop processing rules after a match is found. Note: Although a rule is named logger , it does not define a logger. It references one or more loggers based on the name-pattern.","title":"Rules"},{"location":"Configuration-file/#logger-name-filter","text":"A rule is mapped to a logger by matching the rule name pattern to a logger name. A rule name attribute may include wildcard characters (* and ?) to match logger names by wildcard matching. * * - matches 0 or more characters * ? - matches exactly 1 character When using NLog.LogManager.GetCurrentClassLogger() then the logger name will have the format \"NameSpace.ClassName\". This makes it very convenient to setup filtering for all classes within a namespace: <logger name=\"Name.Space.*\" writeTo=\"target1\" /> By using logger-name filtering then one can also redirect output for a single ClassName-logger: <logger name=\"Name.Space.Class1\" writeTo=\"target2\" /> <!-- Add final=true to stop output to target1 --> <logger name=\"Name.Space.*\" writeTo=\"target1\" /> One can also reduce the logging from a single ClassName-logger: <logger name=\"Name.Space.Class2\" maxlevel=\"Warn\" final=\"true\" /> <!-- Blackhole that stops all but Error + Fatal --> <logger name=\"Name.Space.*\" writeTo=\"target1\" /> One can also completely block a single ClassName-logger: <logger name=\"Name.Space.Class3\" maxlevel=\"Off\" final=\"true\" /> <!-- Blackhole that stops everything --> <logger name=\"Name.Space.*\" writeTo=\"target1\" /> Before NLog 4.6 then one could only use wildcards (*) at the beginning and/or at the end of the pattern: <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> <logger name=\"Name.Space.*\" minlevel=\"Debug\" writeTo=\"f1\" /> <logger name=\"*.Class1\" minlevel=\"Trace\" writeTo=\"f2\" /> <logger name=\"*.Library.*\" minlevel=\"Warn\" writeTo=\"f3\" /> </rules> Since NLog 4.6, wildcards (* and ?) are allowed in any position. <rules> <logger name=\"*TcpTestServer[*].Connection[07].*\" minlevel=\"Trace\" writeTo=\"logconsole\" final=\"true\" /> <logger name=\"*TcpTestServer[*].Connection[??].*\" minlevel=\"Debug\" writeTo=\"logconsole\" final=\"true\" /> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> </rules>","title":"Logger Name Filter"},{"location":"Configuration-file/#logger-level-filter","text":"A rule defines which log entry level(s) are matched. Entries with other levels will not match this rule. A commonly used specifier is minlevel . The other specifiers allow for more advanced configuration. If a rule contains more than one level-declaring attribute ( level , levels , minlevel and maxlevel ) only the first level-declaring attribute or set is used and the rest are ignored. The level-declaring attributes are processed in the following order: level levels minlevel and maxlevel (these have the same priority) none (all levels are logged) For example: if minlevel=\"Warn\" level=\"Info\" is used, the rule will only use Info In case a rule is marked as final and contains any level-declaring attributes, the final attribute applies only to the specified levels.","title":"Logger Level Filter"},{"location":"Configuration-file/#dynamic-logger-level-filter","text":"The logging rules provides high performance because of their static nature. The options for configuration has been very limited. But recent changes has now been made to improve this: NLog 4.6 added support for using NLog Config Variables to configure level attributes. ( level , minlevel etc): <variable name='globalLevel' value='debug'/> <rules> <logger minlevel='${globalLevel}'/> </rules> NLog 4.6.4 added support for lookup of Logging Rules using RuleName using Configuration API NLog 4.6.7 added support for using NLog Layout like ${gdc:globalLevel} to dynamically change level attributes at runtime. See also Semi Dynamic Routing Rules","title":"Dynamic Logger Level Filter"},{"location":"Configuration-file/#variables","text":"NLog Config Variables allows you to simplify configuration by reducing repeated text. Variable can be used to give a human name to a NLog Layout that is commonly used (or is long and complex). This makes it easier to organize and structure the NLog config. Define a custom variable as follows: <variable name=\"varname\" value=\"xxx\" /> The value of a variable can be inserted into an attribute value via the ${varname} syntax. A variable value can even be used to define the value of another variable. The following example shows using a pre-defined variable shortdate and defining and using a custom variable logDirectory . <nlog> <variable name=\"logDirectory\" value=\"logs/${shortdate}\"/> <targets> <target name=\"file1\" xsi:type=\"File\" fileName=\"${logDirectory}/file1.txt\"/> <target name=\"file2\" xsi:type=\"File\" fileName=\"${logDirectory}/file2.txt\"/> </targets> </nlog> With this syntax, a variable must be defined before use. Otherwise configuration initialization will fail. Note ${gdc} can be used used as an alternative to configuration variables, as they work independent of loading / unloading / reloading different NLog configurations. NLog Config variables can operate in two modes: Constant mode - ${varName} Dynamic mode - ${var:varName} (Introduced with NLog 4.1) Constant mode (or static mode) works for all types of properties independent of their type, but they will not react to runtime changes. Dynamic mode only works for properties of the type NLog Layout , and provides the following abilities: Variables can be changed, deleted and created from the Configuration API A default value can be configured for a variable, e.g. ${var:password:default=unknown} By default all variables assigned at runtime are kept even after configuration reloads. Unless having configured keepVariablesOnReload=\"false\" . NLog 4.4 introduced keepVariablesOnReload and before NLog 5.0 the default value was false NLog 5.0 extends NLog config variables to also handle complex Layout types like JsonLayout + CsvLayout. Ex: <nlog> <variable name=\"myJsonLayout\"> <layout type=\"JsonLayout\"> <attribute name=\"message\" value=\"${messsage}\"> </layout> </variable> <targets> <target name=\"debug\" type=\"Debug\" layout=\"${myJsonLayout}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"debug\" /> </rules> </nlog>","title":"Variables"},{"location":"Configuration-file/#layouts-and-layout-renderers","text":"One of NLog\u2019s strongest assets is the ability to use layouts . In the simplest form, layouts are texts with embedded tags delimited by ${ and } . The tags are called Layout Renderers and can be used to insert pieces of contextual information into the text. Layouts can be used in many places, for example they can control the format of information written on the screen or sent to a file, but also to control the file names themselves. This is very powerful, which we\u2019ll see in a moment. Let\u2019s assume, that we want to annotate each message written to the console with: * current date and time * name of the class and method that emitted the log message * log level * message text This is very easy: <target name=\"c\" xsi:type=\"Console\" layout=\"${longdate} ${callsite} ${level} ${message}\"/> We can make each messages for each logger go to a separate file, as in the following example: <target name=\"f\" xsi:type=\"File\" fileName=\"${logger}.txt\"/> As you can see, the ${logger} layout renderer was used in the fileName attribute, which causes each log message to be written to the file whose name includes the logger name. The above example will create the following files: * Name.Space.Class1.txt * Name.Space.Class2.txt * Name.Space.Class3.txt * Other.Name.Space.Class1.txt * Other.Name.Space.Class2.txt * Other.Name.Space.Class3.txt","title":"Layouts and layout renderers"},{"location":"Configuration-file/#asynchronous-processing-and-wrapper-targets","text":"NLog provides wrapper and compound targets which modify other targets\u2019 behavior by adding features like: * asynchronous processing (wrapped target runs in a separate thread) * retry-on-error * load balancing * buffering * filtering * failover (failover) To define a wrapper in the configuration file, simply nest a target node within another target node. You can even wrap a wrapper target - there are no limits on depth. For example, to add asynchronous logging with retry-on-error functionality add this to your configuration file: <targets> <target name=\"n\" xsi:type=\"AsyncWrapper\"> <target xsi:type=\"RetryingWrapper\"> <target xsi:type=\"File\" fileName=\"${file}.txt\" /> </target> </target> </targets> Because asynchronous processing is a common scenario, NLog supports a shorthand notation to enable it for all targets without the need to specify explicit wrappers. You can simply set async=\"true\" on targets element and all your targets within that element will be wrapped with the AsyncWrapper target. <nlog> <targets async=\"true\"> <!-- all targets in this section will automatically be asynchronous --> </targets> </nlog> Remember to Flush is very important, when using asynchronous background writing. It ensures all logging is written before application exit.","title":"Asynchronous processing and wrapper targets"},{"location":"Configuration-file/#default-wrappers","text":"Sometimes we require ALL targets to be wrapped in the same way, for example to add buffering and/or retrying. NLog provides <default-wrapper /> syntax for that. You simply put this element in the <targets /> section and all your targets will be automatically wrapped with the specified wrapper. Note that <default-wrapper /> applies to the single <targets /> section only and you can have multiple sections so you can define groups of targets that are wrapped in a similar manner. <nlog> <targets> <default-wrapper xsi:type=\"BufferingWrapper\" bufferSize=\"100\"/> <target name=\"f1\" xsi:type=\"File\" fileName=\"f1.txt\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"f2.txt\"/> </targets> <targets> <default-wrapper xsi:type=\"AsyncWrapper\"> <wrapper-target xsi:type=\"RetryingWrapper\"/> </default-wrapper> <target name=\"n1\" xsi:type=\"Network\" address=\"tcp://localhost:4001\"/> <target name=\"n2\" xsi:type=\"Network\" address=\"tcp://localhost:4002\"/> <target name=\"n3\" xsi:type=\"Network\" address=\"tcp://localhost:4003\"/> </targets> </nlog> In the above example we\u2019ve defined two buffered File targets and three asynchronous and retrying Network targets.","title":"Default wrappers"},{"location":"Configuration-file/#default-target-parameters","text":"Similar to default wrappers, NLog provides <default-target-parameters /> which enables you to specify default values of target parameters. For example, if you don\u2019t want files to be kept open, you can either add keepFileOpen=\"false\" to each target, as in the following example: <nlog> <targets> <target name=\"f1\" xsi:type=\"File\" fileName=\"f1.txt\" keepFileOpen=\"false\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"f2.txt\" keepFileOpen=\"false\"/> <target name=\"f3\" xsi:type=\"File\" fileName=\"f3.txt\" keepFileOpen=\"false\"/> </targets> </nlog> Alternatively you can specify a single <default-target-parameters /> that applies to all targets in the <targets /> section. Default parameters are defined on a per-type basis and are applied BEFORE the actual attributes defined in the XML file: <nlog> <targets> <default-target-parameters xsi:type=\"File\" keepFileOpen=\"false\"/> <target name=\"f1\" xsi:type=\"File\" fileName=\"f1.txt\"/> <target name=\"f2\" xsi:type=\"File\" fileName=\"f2.txt\"/> <target name=\"f3\" xsi:type=\"File\" fileName=\"f3.txt\"/> </targets> </nlog>","title":"Default target parameters"},{"location":"Configuration-file/#extensions","text":"Extensions can be configured to include additional NLog packages or custom ones: Just reference the DLL in the config in the <extensions /> as shown below. The name should not include the .dll Configuration file example: <nlog> <extensions> <add assembly=\"MyAssembly\"/> </extensions> <targets> <target name=\"a1\" type=\"MyTarget\" host=\"localhost\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" appendTo=\"a1\"/> </rules> </nlog> With NLog 5.0 it is also possible to specify fully qualified type-name, instead of needing to update <extensions> -section. This makes the snippets more isolated: <nlog> <targets> <target name=\"a1\" type=\"MyTarget, MyAssembly\" host=\"localhost\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" appendTo=\"a1\"/> </rules> </nlog> NLog 5.0 no longer automatically scans and loads extensions from assemblies with NLog-prefix. Because it introduced overhead during startup, and failed to work with <packagereference> . See also Register-your-custom-component","title":"Extensions"},{"location":"Configuration-file/#automatic-reconfiguration","text":"The configuration file is read automatically at program startup. In a long running process (such as a Windows service or an ASP.NET application) it\u2019s sometimes desirable to temporarily increase the log level without stopping the application. NLog can monitor logging configuration files and re-read them each time they are modified. To enable this mechanism, you simply add autoReload=\"true\" parameter to the configuration file. <nlog autoReload=\"true\"> ... </nlog> Note that automatic reconfiguration supports include files, so each time one of the included files is changed, the entire configuration gets reloaded. Just to make it explicit, automatic reloading will NOT stop/recycle the IIS Application Pool.","title":"Automatic reconfiguration"},{"location":"Configuration-file/#include-files","text":"NLog provides an include file feature so that configuration can be stored in multiple files. <include file=\"nlog-common.config\" /> Like most attributes in NLog config, the file attribute may reference variables. The following example includes a file named the same as the machine that nlog is running on. <include file=\"${machinename}.config\"/> Set the attribute ignoreErrors to true to prevent a startup failure if the include file cannot be loaded -- file not found, invalid XML, .... Use the Troubleshooting logging section to log errors. This attribute is optional and defaults to false . Since NLog 4.4.2, wildcards ( * ) are allowed. E.g. <include file=\"nlog-*.config\"/> A larger example can be found here: XML config <include /> example","title":"Include files"},{"location":"Configuration-file/#content-escaping","text":"In the configuration file some characters needs to be escaped. Because it XML file, the < and > brackets should be escaped with &lt; and &gt; . This also holds for the attribute values, like a condition. Inside a layout we need to escape the } bracket and the colon : should be escaped because: : is the value separator. } is the end of the layout Nested layout renderers doesn't need escaping. Also the backslash doesn't need an escape. Examples: ${appdomain:format={1\\}{0\\}} (escape of } ) ${rot13:inner=${scopenested:topFrames=3:separator=x}} (no escaping needed) ${when:when=1 == 1:Inner=Test\\: Hello} (escape of : )","title":"Content escaping"},{"location":"Configuration-file/#troubleshooting-logging","text":"Sometimes our application doesn\u2019t write anything to the log files, even though we have supposedly configured logging properly. There can be many reasons for logs not being written. The most common problems are permissions issues, usually in an ASP.NET process, where the aspnet_wp.exe or w3wp.exe process may not have write access to the directory where we want to store logs. NLog is designed to swallow run-time exceptions that may result from logging. The following settings can change this behavior and/or redirect these messages. * <nlog throwExceptions=\"true\" /> - adding the throwExceptions attribute in the config file causes NLog to stop masking exceptions and pass them to the calling application instead. This attribute is useful at deployment time to quickly locate any problems. It is critical that one configure throwExceptions to \"false\" as soon as the application is properly configured to run, so accidental logging problems will not cause application to hang or crash. * <nlog throwConfigExceptions=\"true\" /> - Similar to throwExceptions but isolated to configuration exceptions only. Unlike throwExceptions then it is not dangerous to have enabled, and is recommended for production environments where it is critical that initial setup of logging configuration succeeds. Introduced in NLog 4.3. Default null (Means not configured and instead use value of throwExceptions ) * <nlog internalLogLevel=\"Trace|Debug|Info|Warn|Error|Fatal\" /> \u2013 determines the internal log level. The higher the level, the less verbose the internal log output. The output is usually very helpful when needing to diagnose logging issues. See Internal-logging for options to setup output to File or Console. See also Logging-troubleshooting","title":"Troubleshooting logging"},{"location":"Configure-NLog/","text":"Moved here https://github.com/NLog/NLog/wiki/Configuration-file","title":"Configure NLog"},{"location":"Configure-component-logging/","text":"The default approach for managing Loggers via the global singleton LogManager class in NLog. It works well for homogeneous applications where the main application and all the extension components are configured via a single configuration file. By including the component class-namespace in the Logger-name (Happens automatically when using NLog.LogManager.GetCurrentClassLogger() ), then it is easy to configure NLog Logging-Rules to route to the wanted destination-target for the plugin (Ex. filename=\"Plugin-${logger}.log\" ). Isolated Logger Property If the component is complex and uses many Logger-instances, then one can consider to also imbue the component Logger-instance with a common LogEvent-PropertyName: var pluginLogger = NLog.LogManager.GetLogger(componentName).WithProperty(\"ComponentName\", componentName); Then it is possible to include the component-identifier in the target output. Ex ${event-properties:ComponentName:whenEmpty=Core} See also ${event-properties} Isolated LogFactory But sometimes you want to create a separate logging configuration, just for a particular component, plugin or extension. Instead of using LogManager (which is global to an application) then one can use isolated LogFactory object-instance that is local to your component/plugin. It allows you to have multiple LogFactory -instances, where each have their own isolated logging configuration. When creating LogFactory you need to explicitly pass the configuration (either from a file or by programmatically constructing targets and rules) as in the following example: internal class MyLogManager { // A Logger dispenser for the current assembly (Remember to call Flush on application exit) public static LogFactory Instance { get { return _instance.Value; } } private static Lazy<LogFactory> _instance = new Lazy<LogFactory>(BuildLogFactory); // // Use a config file located next to our current assembly dll // eg, if the running assembly is c:\\path\\to\\MyComponent.dll // the config filepath will be c:\\path\\to\\MyComponent.nlog // // WARNING: This will not be appropriate for assemblies in the GAC // private static LogFactory BuildLogFactory() { // Use name of current assembly to construct NLog config filename Assembly thisAssembly = Assembly.GetExecutingAssembly(); string configFilePath = Path.ChangeExtension(thisAssembly.Location, \".nlog\"); LogFactory logFactory = new LogFactory(); logFactory.Configuration = new XmlLoggingConfiguration(configFilePath, true, logFactory); return logFactory; } } Then all you need to do is to create loggers with: Logger logger = MyLogManager.Instance.GetLogger(\"name\"); or Logger logger = MyLogManager.Instance.GetCurrentClassLogger(); If you want multiple assemblies to share this MyLogManager \u2013 just make it a public class and get others to use it. You need to make sure that the configuration is properly closed when the process terminates (set MyLogManager.Instance.Configuration to null ) or you may lose some log output. You may want to hook AppDomain.ProcessExit and AppDomain.DomainUnload events to turn off logging automatically. See the code of LogManager.cs for details. See Also: Explicit NLog configuration loading","title":"Configure component logging"},{"location":"Configure-component-logging/#isolated-logger-property","text":"If the component is complex and uses many Logger-instances, then one can consider to also imbue the component Logger-instance with a common LogEvent-PropertyName: var pluginLogger = NLog.LogManager.GetLogger(componentName).WithProperty(\"ComponentName\", componentName); Then it is possible to include the component-identifier in the target output. Ex ${event-properties:ComponentName:whenEmpty=Core} See also ${event-properties}","title":"Isolated Logger Property"},{"location":"Configure-component-logging/#isolated-logfactory","text":"But sometimes you want to create a separate logging configuration, just for a particular component, plugin or extension. Instead of using LogManager (which is global to an application) then one can use isolated LogFactory object-instance that is local to your component/plugin. It allows you to have multiple LogFactory -instances, where each have their own isolated logging configuration. When creating LogFactory you need to explicitly pass the configuration (either from a file or by programmatically constructing targets and rules) as in the following example: internal class MyLogManager { // A Logger dispenser for the current assembly (Remember to call Flush on application exit) public static LogFactory Instance { get { return _instance.Value; } } private static Lazy<LogFactory> _instance = new Lazy<LogFactory>(BuildLogFactory); // // Use a config file located next to our current assembly dll // eg, if the running assembly is c:\\path\\to\\MyComponent.dll // the config filepath will be c:\\path\\to\\MyComponent.nlog // // WARNING: This will not be appropriate for assemblies in the GAC // private static LogFactory BuildLogFactory() { // Use name of current assembly to construct NLog config filename Assembly thisAssembly = Assembly.GetExecutingAssembly(); string configFilePath = Path.ChangeExtension(thisAssembly.Location, \".nlog\"); LogFactory logFactory = new LogFactory(); logFactory.Configuration = new XmlLoggingConfiguration(configFilePath, true, logFactory); return logFactory; } } Then all you need to do is to create loggers with: Logger logger = MyLogManager.Instance.GetLogger(\"name\"); or Logger logger = MyLogManager.Instance.GetCurrentClassLogger(); If you want multiple assemblies to share this MyLogManager \u2013 just make it a public class and get others to use it. You need to make sure that the configuration is properly closed when the process terminates (set MyLogManager.Instance.Configuration to null ) or you may lose some log output. You may want to hook AppDomain.ProcessExit and AppDomain.DomainUnload events to turn off logging automatically. See the code of LogManager.cs for details. See Also: Explicit NLog configuration loading","title":"Isolated LogFactory"},{"location":"Configure-from-code/","text":"NLog can be also configured programmatically. All options match with the attribute names in the XML config, so for all config options you could check https://nlog-project.org/config/ There is also a SHFB docs, see https://nlog-project.org/documentation/ Simple Example var config = new NLog.Config.LoggingConfiguration(); // Targets where to log to: File and Console var logfile = new NLog.Targets.FileTarget(\"logfile\") { FileName = \"file.txt\" }; var logconsole = new NLog.Targets.ConsoleTarget(\"logconsole\"); // Rules for mapping loggers to targets config.AddRule(LogLevel.Info, LogLevel.Fatal, logconsole); config.AddRule(LogLevel.Debug, LogLevel.Fatal, logfile); // Apply config NLog.LogManager.Configuration = config; NLog 5.0 introduces a Fluent-Configuration-API so you can do this instead: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteToConsole(); builder.ForLogger().FilterMinLevel(LogLevel.Debug).WriteToFile(fileName: \"file.txt\"); }); Extended Features Passing Custom Values There are many ways to capture current Context and output it to the final target. Simple example: logger.Info(\"Message with {myProperty}\", \"myValue\"); Render with ${event-properties:myProperty} Add this to Layout, e.g. var fileTarget = new FileTarget(\"target2\") { FileName = \"${basedir}/file.txt\", Layout = \"${longdate} ${level} ${message} ${exception} ${event-properties:myProperty}\" }; For many more examples, see ${event-properties} layout renderer. Creating dynamic Layouts NLog Layout will implicitly convert from string-objects. It will automatically parse the string and compile it into the recognized Layout-Renderers . NLog will perform validation when parsing, but errors detected will be swallowed unless having enabled LogManager.ThrowConfigExceptions . But one can also force NLog to throw parsing error no matter what: var layout = NLog.Layouts.Layout.FromString(\"${evil}\", throwConfigExceptions: true); // will throw NLog 4.7 also allows you to generate a Layout from a simple lambda-method: var unixTime = NLog.Layouts.Layout.FromMethod(logEvent => ((DateTimeOffset)logEvent.TimeStamp).ToUnixTimeSeconds().ToString()); var jsonLayout = NLog.Layouts.JsonLayout() { Attributes = { new NLog.Layouts.JsonAttribute(\"unixtime\", unixTime) { Encode = false } } }; !! NOTICE !! Ensure that custom method given to Layout.FromMethod is very simple. Deadlock or StackOverflow can occur if performing complex logic that triggers new logevents or acquiring locks. Update config in code It is possible to dive into the NLog LoggingConfiguration and assign properties directly. But NLog is much happier about using NLog Layout logic when possible. Example: <target type=\"file\" name=\"logfile\" filename=\"${gdc:CompanyName:whenEmpty=Default}_${shortdate}.log\" /> Then in code one can just update the GDC -item, and it will take effect right away: NLog.GlobalDiagnosticsContext.Set(\"CompanyName\", \"SuperPower\"); This removes the need to know the exact NLog-target names in the NLog.config, so it decouples the logic even further and makes it more resilient. This will also work excellent together with autoReload=\"true\" , as you don't have to re-apply the same settings again, as it will happen automatically. This can also be used for adjusting logging rules dynamically at runtime. But if you really want to get your hands dirty, then here you go: var configuration = LogManager.Configuration; // Update single target var myFileTarget = configuration.FindTargetByName<FileTarget>(\"myTargetName\"); if (myFileTarget != null) myFileTarget.FileName = \"SuperPower\" + \"_${shortdate}.log\"; LogManager.Configuration = configuration; // re-init // Update all targets foreach (var fileTarget = configuration.AllTargets.OfType<FileTarget>()) { fileTarget.FileName = \"SuperPower\" + \"_${shortdate}.log\"; } LogManager.Configuration = configuration; // re-init Combine nlog.config and config from code Please note that combining the config file (nlog.config) and changing it in code, the reload of nlog.config could undo your changes. If you combine both, then reapply the changes on the reload event. E.g. // On start of your program UpdateConfig(); LogManager.ConfigurationReloaded += (sender, e) => { //Re apply if config reloaded UpdateConfig(); }; Where UpdateConfig is public void UpdateConfig() { var configuration = LogManager.Configuration; var fileTarget = configuration.FindTargetByName<FileTarget>(\"myTargetName\"); fileTarget.FileName = \"${basedir}/file.log\"; LogManager.Configuration = configuration; //apply } Instead of trying to perform patching of NLog-configuration, then it is recommended to make use of NLog Layouts for Target configuration by forexample using ${gdc}","title":"Configure from code"},{"location":"Configure-from-code/#simple-example","text":"var config = new NLog.Config.LoggingConfiguration(); // Targets where to log to: File and Console var logfile = new NLog.Targets.FileTarget(\"logfile\") { FileName = \"file.txt\" }; var logconsole = new NLog.Targets.ConsoleTarget(\"logconsole\"); // Rules for mapping loggers to targets config.AddRule(LogLevel.Info, LogLevel.Fatal, logconsole); config.AddRule(LogLevel.Debug, LogLevel.Fatal, logfile); // Apply config NLog.LogManager.Configuration = config; NLog 5.0 introduces a Fluent-Configuration-API so you can do this instead: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteToConsole(); builder.ForLogger().FilterMinLevel(LogLevel.Debug).WriteToFile(fileName: \"file.txt\"); });","title":"Simple Example"},{"location":"Configure-from-code/#extended-features","text":"","title":"Extended Features"},{"location":"Configure-from-code/#passing-custom-values","text":"There are many ways to capture current Context and output it to the final target. Simple example: logger.Info(\"Message with {myProperty}\", \"myValue\"); Render with ${event-properties:myProperty} Add this to Layout, e.g. var fileTarget = new FileTarget(\"target2\") { FileName = \"${basedir}/file.txt\", Layout = \"${longdate} ${level} ${message} ${exception} ${event-properties:myProperty}\" }; For many more examples, see ${event-properties} layout renderer.","title":"Passing Custom Values"},{"location":"Configure-from-code/#creating-dynamic-layouts","text":"NLog Layout will implicitly convert from string-objects. It will automatically parse the string and compile it into the recognized Layout-Renderers . NLog will perform validation when parsing, but errors detected will be swallowed unless having enabled LogManager.ThrowConfigExceptions . But one can also force NLog to throw parsing error no matter what: var layout = NLog.Layouts.Layout.FromString(\"${evil}\", throwConfigExceptions: true); // will throw NLog 4.7 also allows you to generate a Layout from a simple lambda-method: var unixTime = NLog.Layouts.Layout.FromMethod(logEvent => ((DateTimeOffset)logEvent.TimeStamp).ToUnixTimeSeconds().ToString()); var jsonLayout = NLog.Layouts.JsonLayout() { Attributes = { new NLog.Layouts.JsonAttribute(\"unixtime\", unixTime) { Encode = false } } }; !! NOTICE !! Ensure that custom method given to Layout.FromMethod is very simple. Deadlock or StackOverflow can occur if performing complex logic that triggers new logevents or acquiring locks.","title":"Creating dynamic Layouts"},{"location":"Configure-from-code/#update-config-in-code","text":"It is possible to dive into the NLog LoggingConfiguration and assign properties directly. But NLog is much happier about using NLog Layout logic when possible. Example: <target type=\"file\" name=\"logfile\" filename=\"${gdc:CompanyName:whenEmpty=Default}_${shortdate}.log\" /> Then in code one can just update the GDC -item, and it will take effect right away: NLog.GlobalDiagnosticsContext.Set(\"CompanyName\", \"SuperPower\"); This removes the need to know the exact NLog-target names in the NLog.config, so it decouples the logic even further and makes it more resilient. This will also work excellent together with autoReload=\"true\" , as you don't have to re-apply the same settings again, as it will happen automatically. This can also be used for adjusting logging rules dynamically at runtime. But if you really want to get your hands dirty, then here you go: var configuration = LogManager.Configuration; // Update single target var myFileTarget = configuration.FindTargetByName<FileTarget>(\"myTargetName\"); if (myFileTarget != null) myFileTarget.FileName = \"SuperPower\" + \"_${shortdate}.log\"; LogManager.Configuration = configuration; // re-init // Update all targets foreach (var fileTarget = configuration.AllTargets.OfType<FileTarget>()) { fileTarget.FileName = \"SuperPower\" + \"_${shortdate}.log\"; } LogManager.Configuration = configuration; // re-init","title":"Update config in code"},{"location":"Configure-from-code/#combine-nlogconfig-and-config-from-code","text":"Please note that combining the config file (nlog.config) and changing it in code, the reload of nlog.config could undo your changes. If you combine both, then reapply the changes on the reload event. E.g. // On start of your program UpdateConfig(); LogManager.ConfigurationReloaded += (sender, e) => { //Re apply if config reloaded UpdateConfig(); }; Where UpdateConfig is public void UpdateConfig() { var configuration = LogManager.Configuration; var fileTarget = configuration.FindTargetByName<FileTarget>(\"myTargetName\"); fileTarget.FileName = \"${basedir}/file.log\"; LogManager.Configuration = configuration; //apply } Instead of trying to perform patching of NLog-configuration, then it is recommended to make use of NLog Layouts for Target configuration by forexample using ${gdc}","title":"Combine nlog.config and config from code"},{"location":"Console-target/","text":"Writes log messages to the console. Platforms Supported: Limited (Not available for NetStandard1.3) There is also the colorful ColoredConsole-Target that can highlight single words or color entire rows. Configuration Syntax <targets> <target xsi:type=\"Console\" name=\"String\" layout=\"Layout\" footer=\"Layout\" header=\"Layout\" encoding=\"Encoding\" error=\"Boolean\" detectConsoleAvailable=\"Boolean\" writeBuffer=\"Boolean\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} footer - Footer. Layout header - Header. Layout Console Options encoding - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN . Defaults to Encoding.Default . Introduced in NLog 4.0. StdErr - Indicates whether the error stream (stderr) should be used instead of the output stream (stdout). Boolean Default: false Before NLog v5.0 the property was named error . detectConsoleAvailable - Indicates whether the console target should disable itself when no console detected. Boolean Default: false Introduced in NLog 4.3.10 with default: true , then NLog 4.4 changed default to false . autoFlush - Performs explicit flush after every console write. Useful if having redirected to custom console-stream that doesn't has autoflush enabled. Boolean. Default = False. Introduced in NLog 4.6.3 WriteBuffer - Instead of calling Console.WriteLine then it writes buffer directly to Console.Write . When combined with AsyncWrapper it will allow batching and double output performance. Useful when redirecting console in cloud-function. Default: False . Introduced with NLog v4.6.8 Example <target name=\"Console\" xsi:type=\"Console\" layout=\"${longdate} ${callsite} ${level} ${message}\"/>","title":"Console target"},{"location":"Console-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Console\" name=\"String\" layout=\"Layout\" footer=\"Layout\" header=\"Layout\" encoding=\"Encoding\" error=\"Boolean\" detectConsoleAvailable=\"Boolean\" writeBuffer=\"Boolean\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Console-target/#parameters","text":"","title":"Parameters"},{"location":"Console-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Console-target/#layout-options","text":"layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} footer - Footer. Layout header - Header. Layout","title":"Layout Options"},{"location":"Console-target/#console-options","text":"encoding - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN . Defaults to Encoding.Default . Introduced in NLog 4.0. StdErr - Indicates whether the error stream (stderr) should be used instead of the output stream (stdout). Boolean Default: false Before NLog v5.0 the property was named error . detectConsoleAvailable - Indicates whether the console target should disable itself when no console detected. Boolean Default: false Introduced in NLog 4.3.10 with default: true , then NLog 4.4 changed default to false . autoFlush - Performs explicit flush after every console write. Useful if having redirected to custom console-stream that doesn't has autoflush enabled. Boolean. Default = False. Introduced in NLog 4.6.3 WriteBuffer - Instead of calling Console.WriteLine then it writes buffer directly to Console.Write . When combined with AsyncWrapper it will allow batching and double output performance. Useful when redirecting console in cloud-function. Default: False . Introduced with NLog v4.6.8","title":"Console Options"},{"location":"Console-target/#example","text":"<target name=\"Console\" xsi:type=\"Console\" layout=\"${longdate} ${callsite} ${level} ${message}\"/>","title":"Example"},{"location":"Context/","text":"Besides the information included with the log message, then there are several options for capturing additional local context state with the LogEvent: ${logger} - Name of the Logger-object used for writing LogEvent. ${level} - LogEvent Level of importance / severity. ${exception} - Exception object included with the LogEvent. ${event-properties} - LogEvent Properties - From Structured logging or explicity added to LogEventInfo.Properties . ${gdc} - Global Diagnostic Context for application-wide static context assigned at startup. ${activityid} - System.Diagnostics.Trace.CorrelationManager.ActivityId allows you to assign and capture correlation-id / request-id. Alternative one can use ${aspnet-TraceIdentifier} ${scopeproperty} - Provide context properties for the current thread with async Task-support Replaces the legacy ${mdlc} and ${mdc} from before NLog 5.0 ${scopenested} - Provide nested scope details for the current thread with async Task-support Replaces the legacy ${ndlc} and ${ndc} from before NLog 5.0 ${activity:TraceId} - Using System.Diagnostics.Activity.Current for OpenTelemetry spans. ${aspnet-item} - ASP.NET Item variable from HttpContext.Items dictionary. More LayoutRenderers LogEvent Properties See Structured logging for more details of using the log-message to inject additional properties: logger.Info(\"Say hello to {myProperty}\", \"myValue\"); There is also the Fluent-API , or one can provide them directly: var logEvent = LogEventInfo() { Level = LogLevel.Info }; logEvent.Properties[\"myProperty\"] = \"myValue\"; logger.Log(logEvent); It is also possible to inject properties into the Logger-object, so they are always added: logger.WithProperty(\"myProperty\", \"myValue\").Info(\"Hello\"); // NLog 4.6.3+ LogEvent Properties can be rendered with ${event-properties:item=myProperty} , ${all-event-properties} or JsonLayout . ScopeContext Properties Handles thread context properties for a scope. Ex. assigning RequestId for the method-call-scope: using (NLog.ScopeContext.PushProperty(\"myRequestId\", Guid.NewGuid())) { logger.Info(\"myLogEvent\"); } Thread Context Properties can be rendered with ${scopeproperty:item=myRequestId} or JsonLayout with IncludeScopeProperties=true . Note when using Microsoft Extension Logging ILogger.BeginScope with NLog.Extension.Logging, then it will automatically update NLog ScopeContext with provided properties. ScopeContext Nested States Handles thread context naming of a scope. Ex. assigning MethodName for the method-call-scope: using (NLog.ScopeContext.PushNestedState(\"myMethodName\")) { logger.Info(\"myLogEvent\"); } Thread Scope names can be rendered with ${scopenested} . Note when using Microsoft Extension Logging ILogger.BeginScope with NLog.Extension.Logging, then it will automatically update NLog ScopeContext with provided scope-name. .NET Core logging When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : //note: render userId via ${scopeproperty:userid} using (_logger.BeginScope(new[] { new KeyValuePair<string, object>(\"userid\", request.UserId) })) { _logger.LogDebug(\"Start process {OperationName}\", \"Main\"); } Context for Code or HttpContext Need other context from code or from the HttpContext (ASP.NET or ASP.NET Core). You could write a custom layout renderer with a single line, see How to write a custom layout renderer .","title":"Context"},{"location":"Context/#logevent-properties","text":"See Structured logging for more details of using the log-message to inject additional properties: logger.Info(\"Say hello to {myProperty}\", \"myValue\"); There is also the Fluent-API , or one can provide them directly: var logEvent = LogEventInfo() { Level = LogLevel.Info }; logEvent.Properties[\"myProperty\"] = \"myValue\"; logger.Log(logEvent); It is also possible to inject properties into the Logger-object, so they are always added: logger.WithProperty(\"myProperty\", \"myValue\").Info(\"Hello\"); // NLog 4.6.3+ LogEvent Properties can be rendered with ${event-properties:item=myProperty} , ${all-event-properties} or JsonLayout .","title":"LogEvent Properties"},{"location":"Context/#scopecontext-properties","text":"Handles thread context properties for a scope. Ex. assigning RequestId for the method-call-scope: using (NLog.ScopeContext.PushProperty(\"myRequestId\", Guid.NewGuid())) { logger.Info(\"myLogEvent\"); } Thread Context Properties can be rendered with ${scopeproperty:item=myRequestId} or JsonLayout with IncludeScopeProperties=true . Note when using Microsoft Extension Logging ILogger.BeginScope with NLog.Extension.Logging, then it will automatically update NLog ScopeContext with provided properties.","title":"ScopeContext Properties"},{"location":"Context/#scopecontext-nested-states","text":"Handles thread context naming of a scope. Ex. assigning MethodName for the method-call-scope: using (NLog.ScopeContext.PushNestedState(\"myMethodName\")) { logger.Info(\"myLogEvent\"); } Thread Scope names can be rendered with ${scopenested} . Note when using Microsoft Extension Logging ILogger.BeginScope with NLog.Extension.Logging, then it will automatically update NLog ScopeContext with provided scope-name.","title":"ScopeContext Nested States"},{"location":"Context/#net-core-logging","text":"When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : //note: render userId via ${scopeproperty:userid} using (_logger.BeginScope(new[] { new KeyValuePair<string, object>(\"userid\", request.UserId) })) { _logger.LogDebug(\"Start process {OperationName}\", \"Main\"); }","title":".NET Core logging"},{"location":"Context/#context-for-code-or-httpcontext","text":"Need other context from code or from the HttpContext (ASP.NET or ASP.NET Core). You could write a custom layout renderer with a single line, see How to write a custom layout renderer .","title":"Context for Code or HttpContext"},{"location":"Counter-layout-renderer/","text":"A counter value (increases on each layout rendering). Platforms Supported: All Configuration Syntax Starting in NLog v4.0 the sequence options have been changed from String to layout ${counter:increment=Integer:sequence=Layout:value=Integer} The syntax for versions below NLog v4.0 is: ${counter:increment=Integer:sequence=String:value=Integer} Parameters Counter Options increment - Value to be added to the counter after each layout rendering. Integer Default: 1 sequence - Name of the sequence. Different named sequences can have individual values. value - Initial value of the counter. Integer Default: 1","title":"Counter layout renderer"},{"location":"Counter-layout-renderer/#configuration-syntax","text":"Starting in NLog v4.0 the sequence options have been changed from String to layout ${counter:increment=Integer:sequence=Layout:value=Integer} The syntax for versions below NLog v4.0 is: ${counter:increment=Integer:sequence=String:value=Integer}","title":"Configuration Syntax"},{"location":"Counter-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Counter-layout-renderer/#counter-options","text":"increment - Value to be added to the counter after each layout rendering. Integer Default: 1 sequence - Name of the sequence. Different named sequences can have individual values. value - Initial value of the counter. Integer Default: 1","title":"Counter Options"},{"location":"CsvLayout/","text":"A specialized layout that renders CSV-formatted events. Platforms Supported: All Configuration Syntax <targets> <target> <layout xsi:type=\"CsvLayout\"> <!-- Layout Options --> <layout xsi:type=\"layoutType\">Layout</layout> <footer xsi:type=\"layoutType\">Layout</footer> <header xsi:type=\"layoutType\">Layout</header> <!-- CSV Options --> <quoting>Enum</quoting> <quoteChar>String</quoteChar> <withHeader>Boolean</withHeader> <customColumnDelimiter>String</customColumnDelimiter> <delimiter>Enum</delimiter> <column layout=\"Layout\" name=\"String\"/> <!-- repeated --> </layout> </target> </targets> Parameters Layout Options layout - Body layout (can be repeated multiple times). Layout footer - Footer layout. Layout header - Header layout. Layout CSV Options quoting - Default Quoting mode for columns. Default: Auto Possible values: Auto - Quote only whose values contain the quote symbol, the separator or newlines (Slow) All - Quote all column. Useful for data known to be multiline such as Exception-ToString (Fast) Nothing - Quote nothing (Very Fast) Hint: To write logs which has multiline data, such as Exception message, you will need to use quotation mark (\") . quoteChar - Quote Character. Default: \" withHeader - Indicates whether CSV should include header. Boolean . Default true customColumnDelimiter - Custom column delimiter value (valid when ColumnDelimiter is set to Custom ). delimiter - Column delimiter. Default: Auto Possible values: Auto - Automatically detect from regional settings. Comma - Comma (ASCII 44). Custom - Custom string, specified by the CustomDelimiter . Pipe - Pipe character (ASCII 124). Semicolon - Semicolon (ASCII 59). Space - Space character (ASCII 32). Tab - Tab character (ASCII 9). columns - The array of parameters to be passed.Collection Each collection item is represented by <column /> element with the following attributes: layout - Layout of the column.Layout Required. name - Name of the column. quoting - Column specific override of the default column quoting (Ex. for column with multiline exception-outpu) > Introduced with NLog 4.6 Example <target xsi:type=\"File\" name=\"csvFileExample\" fileName=\"./CsvLogExample.csv\"> <layout xsi:type=\"CsvLayout\" delimiter=\"Tab\" withHeader=\"false\"> <column name=\"time\" layout=\"${longdate}\" /> <column name=\"level\" layout=\"${level:upperCase=true}\"/> <column name=\"message\" layout=\"${message}\" /> <column name=\"callsite\" layout=\"${callsite:includeSourcePath=true}\" /> <column name=\"stacktrace\" layout=\"${stacktrace:topFrames=10}\" /> <column name=\"exception\" layout=\"${exception:format=ToString}\"/> <column name=\"property1\" layout=\"${event-properties:property1}\"/> </layout> </target> Performance NLog 4.6 introduces some performance optimizations for the CsvLayout. Reducing memory allocation by better buffer reuse. It is also possible to reduce the overhead of the automatic quoting logic for individual columns: This is example will greatly reduce the overhead of default Auto-quoting, because of the override for the individual columns: <layout xsi:type=\"CsvLayout\" delimiter=\"Tab\" withHeader=\"false\"> <column name=\"time\" layout=\"${longdate}\" quoting=\"Nothing\" /> <column name=\"level\" layout=\"${level:upperCase=true}\" quoting=\"Nothing\"/> <column name=\"message\" layout=\"${message}\" quoting=\"All\" /> <column name=\"exception\" layout=\"${exception:format=ToString}\" quoting=\"All\"/> <column name=\"property1\" layout=\"${event-properties:property1}\"/> </layout>","title":"CsvLayout"},{"location":"CsvLayout/#configuration-syntax","text":"<targets> <target> <layout xsi:type=\"CsvLayout\"> <!-- Layout Options --> <layout xsi:type=\"layoutType\">Layout</layout> <footer xsi:type=\"layoutType\">Layout</footer> <header xsi:type=\"layoutType\">Layout</header> <!-- CSV Options --> <quoting>Enum</quoting> <quoteChar>String</quoteChar> <withHeader>Boolean</withHeader> <customColumnDelimiter>String</customColumnDelimiter> <delimiter>Enum</delimiter> <column layout=\"Layout\" name=\"String\"/> <!-- repeated --> </layout> </target> </targets>","title":"Configuration Syntax"},{"location":"CsvLayout/#parameters","text":"","title":"Parameters"},{"location":"CsvLayout/#layout-options","text":"layout - Body layout (can be repeated multiple times). Layout footer - Footer layout. Layout header - Header layout. Layout","title":"Layout Options"},{"location":"CsvLayout/#csv-options","text":"quoting - Default Quoting mode for columns. Default: Auto Possible values: Auto - Quote only whose values contain the quote symbol, the separator or newlines (Slow) All - Quote all column. Useful for data known to be multiline such as Exception-ToString (Fast) Nothing - Quote nothing (Very Fast) Hint: To write logs which has multiline data, such as Exception message, you will need to use quotation mark (\") . quoteChar - Quote Character. Default: \" withHeader - Indicates whether CSV should include header. Boolean . Default true customColumnDelimiter - Custom column delimiter value (valid when ColumnDelimiter is set to Custom ). delimiter - Column delimiter. Default: Auto Possible values: Auto - Automatically detect from regional settings. Comma - Comma (ASCII 44). Custom - Custom string, specified by the CustomDelimiter . Pipe - Pipe character (ASCII 124). Semicolon - Semicolon (ASCII 59). Space - Space character (ASCII 32). Tab - Tab character (ASCII 9). columns - The array of parameters to be passed.Collection Each collection item is represented by <column /> element with the following attributes: layout - Layout of the column.Layout Required. name - Name of the column. quoting - Column specific override of the default column quoting (Ex. for column with multiline exception-outpu) > Introduced with NLog 4.6","title":"CSV Options"},{"location":"CsvLayout/#example","text":"<target xsi:type=\"File\" name=\"csvFileExample\" fileName=\"./CsvLogExample.csv\"> <layout xsi:type=\"CsvLayout\" delimiter=\"Tab\" withHeader=\"false\"> <column name=\"time\" layout=\"${longdate}\" /> <column name=\"level\" layout=\"${level:upperCase=true}\"/> <column name=\"message\" layout=\"${message}\" /> <column name=\"callsite\" layout=\"${callsite:includeSourcePath=true}\" /> <column name=\"stacktrace\" layout=\"${stacktrace:topFrames=10}\" /> <column name=\"exception\" layout=\"${exception:format=ToString}\"/> <column name=\"property1\" layout=\"${event-properties:property1}\"/> </layout> </target>","title":"Example"},{"location":"CsvLayout/#performance","text":"NLog 4.6 introduces some performance optimizations for the CsvLayout. Reducing memory allocation by better buffer reuse. It is also possible to reduce the overhead of the automatic quoting logic for individual columns: This is example will greatly reduce the overhead of default Auto-quoting, because of the override for the individual columns: <layout xsi:type=\"CsvLayout\" delimiter=\"Tab\" withHeader=\"false\"> <column name=\"time\" layout=\"${longdate}\" quoting=\"Nothing\" /> <column name=\"level\" layout=\"${level:upperCase=true}\" quoting=\"Nothing\"/> <column name=\"message\" layout=\"${message}\" quoting=\"All\" /> <column name=\"exception\" layout=\"${exception:format=ToString}\" quoting=\"All\"/> <column name=\"property1\" layout=\"${event-properties:property1}\"/> </layout>","title":"Performance"},{"location":"CurrentDir-Layout-Renderer/","text":"The current working directory of the application. Platforms Supported: All Introduced in NLog v4.5. See also ${basedir} , ${specialfolder} , ${processdir} , ${tempdir} Configuration Syntax ${currentdir:dir=String:file=String} Parameters Advanced Options dir: Name of the directory to be Path.Combine()'d with the current directory. file: Name of the file to be Path.Combine()'d with the current directory. See also: FileTarget FileName Directory","title":"CurrentDir Layout Renderer"},{"location":"CurrentDir-Layout-Renderer/#configuration-syntax","text":"${currentdir:dir=String:file=String}","title":"Configuration Syntax"},{"location":"CurrentDir-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"CurrentDir-Layout-Renderer/#advanced-options","text":"dir: Name of the directory to be Path.Combine()'d with the current directory. file: Name of the file to be Path.Combine()'d with the current directory. See also: FileTarget FileName Directory","title":"Advanced Options"},{"location":"Custom-extension-of-Logger-interface/","text":"Introduction There can be different reasons for extending the NLog logging interface: Extend logging interface to automatically add relevant context when logging. Create an abstract interface to avoid direct NLog dependency in source-code. Abstract Interface Libraries There already exists several libraries that provides an abstract interface: Microsoft.System.Diagnostics.Trace ( Setup NLogTraceListener ) Common Logging (But seems obsolete) LibLog - Useful for shared libraries (But have become obsolete) Microsoft.Extensions.Logging Extended logging interface There are two ways to extend the NLog Logger. Inherit from the NLog Logger and add your own custom extensions. Create a custom wrapper around the NLog Logger and forward the logevents to the NLog Logger. Custom Wrapper and callsite NLog has a special Callsite feature, that allows it to automatically capture the location in source code that performed the logging. This feature has a huge overhead (logging becomes 20 times slower, together with lots of bonus allocations), because the capture of StackTrace and scanning for source location is expensive. When creating a custom wrapper around the NLog Logger-interface, then the callsite logic will think the custom wrapper is the origin of the log-statement. To avoid this then the custom wrapper should only call this NLog Logger method: public class MyLogger { private readonly NLog.Logger Logger; public MyLogger(string name) { Logger = NLog.LogManager.GetLogger(name); } public void WriteMessage(string message) { NLog.LogEventInfo logEvent = NLog.LogEventInfo.Create(NLog.LogLevel.Info, null, message); Logger.Log(typeof(MyLogger), logEvent); } } The custom wrapper should provide its own Type as wrapperType, and then the callsite logic will not see the custom wrapper as being the origin of the log-statement. If extending the NLog Logger-interface without providing the correct wrapperType , then Callsite will stop working. Note NLog 5.0 adds full support for using Caller Information -attributes that was introduced with .NET 4.5. When having called LogEventInfo.SetCallerInfo(...) then StackTrace capture is not needed for the Callsite feature. public class MyLogger { private readonly NLog.Logger Logger; public MyLogger(string name) { Logger = NLog.LogManager.GetLogger(name); } public void WriteMessage(string message, [CallerMemberName] string callerMemberName = \"\", [CallerFilePath] string callerFilePath = \"\", [CallerLineNumber] int callerLineNumber = 0) { NLog.LogEventInfo logEvent = NLog.LogEventInfo.Create(NLog.LogLevel.Info, null, message); logEvent.SetCallerInfo(null, callerMemberName, callerFilePath, callerLineNumber); Logger.Log(typeof(MyLogger), logEvent); } }","title":"Custom extension of Logger interface"},{"location":"Custom-extension-of-Logger-interface/#introduction","text":"There can be different reasons for extending the NLog logging interface: Extend logging interface to automatically add relevant context when logging. Create an abstract interface to avoid direct NLog dependency in source-code.","title":"Introduction"},{"location":"Custom-extension-of-Logger-interface/#abstract-interface-libraries","text":"There already exists several libraries that provides an abstract interface: Microsoft.System.Diagnostics.Trace ( Setup NLogTraceListener ) Common Logging (But seems obsolete) LibLog - Useful for shared libraries (But have become obsolete) Microsoft.Extensions.Logging","title":"Abstract Interface Libraries"},{"location":"Custom-extension-of-Logger-interface/#extended-logging-interface","text":"There are two ways to extend the NLog Logger. Inherit from the NLog Logger and add your own custom extensions. Create a custom wrapper around the NLog Logger and forward the logevents to the NLog Logger.","title":"Extended logging interface"},{"location":"Custom-extension-of-Logger-interface/#custom-wrapper-and-callsite","text":"NLog has a special Callsite feature, that allows it to automatically capture the location in source code that performed the logging. This feature has a huge overhead (logging becomes 20 times slower, together with lots of bonus allocations), because the capture of StackTrace and scanning for source location is expensive. When creating a custom wrapper around the NLog Logger-interface, then the callsite logic will think the custom wrapper is the origin of the log-statement. To avoid this then the custom wrapper should only call this NLog Logger method: public class MyLogger { private readonly NLog.Logger Logger; public MyLogger(string name) { Logger = NLog.LogManager.GetLogger(name); } public void WriteMessage(string message) { NLog.LogEventInfo logEvent = NLog.LogEventInfo.Create(NLog.LogLevel.Info, null, message); Logger.Log(typeof(MyLogger), logEvent); } } The custom wrapper should provide its own Type as wrapperType, and then the callsite logic will not see the custom wrapper as being the origin of the log-statement. If extending the NLog Logger-interface without providing the correct wrapperType , then Callsite will stop working. Note NLog 5.0 adds full support for using Caller Information -attributes that was introduced with .NET 4.5. When having called LogEventInfo.SetCallerInfo(...) then StackTrace capture is not needed for the Callsite feature. public class MyLogger { private readonly NLog.Logger Logger; public MyLogger(string name) { Logger = NLog.LogManager.GetLogger(name); } public void WriteMessage(string message, [CallerMemberName] string callerMemberName = \"\", [CallerFilePath] string callerFilePath = \"\", [CallerLineNumber] int callerLineNumber = 0) { NLog.LogEventInfo logEvent = NLog.LogEventInfo.Create(NLog.LogLevel.Info, null, message); logEvent.SetCallerInfo(null, callerMemberName, callerFilePath, callerLineNumber); Logger.Log(typeof(MyLogger), logEvent); } }","title":"Custom Wrapper and callsite"},{"location":"DB-null-layout-renderer/","text":"DB null for a database Platforms Supported: All Introduced in NLog 4.6. Most usefull for the Database target Configuration Syntax ${db-null} Render a DbNull value for the database parameter","title":"DB null layout renderer"},{"location":"DB-null-layout-renderer/#configuration-syntax","text":"${db-null} Render a DbNull value for the database parameter","title":"Configuration Syntax"},{"location":"Data-types/","text":"The data types used in NLog Layout : The layout created with Layout-Renderers Boolean : true or false in the XML. Integer : 4 bytes integral number. Long : 8 bytes integral number. Encoding : An encoding name. Possible values are listed in the Name column of the table that appears in the Encoding class topic.","title":"Data types"},{"location":"Database-target/","text":"Writes log messages to the database using an ADO.NET provider. The database operation is always executed outside of a transaction. Platforms Supported: All (Since NLog 5.0 then nuget-package NLog.Database is required) You can use this target with various DB providers, e.g. System.Data, Microsoft.Data, Oracle, MySql, SqlLite etc. see Providers examples \u2139\ufe0f Don't forget to install the needed nuget-package for your DB provider! Configuration Syntax <targets> <target xsi:type=\"Database\" name=\"String\" dbProvider=\"String\" connectionString=\"Layout\" connectionStringName=\"String\" keepConnection=\"Boolean\" isolationLevel=\"System.Data.IsolationLevel\" dbDatabase=\"Layout\" dbUserName=\"Layout\" dbPassword=\"Layout\" dbHost=\"Layout\" commandType=\"Enum\" commandText=\"Layout\" installConnectionString=\"Layout\"> <install-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\" text=\"Layout\"/><!-- repeated --> <uninstall-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\" text=\"Layout\"/><!-- repeated --> <parameter name=\"String\" layout=\"Layout\" precision=\"Byte\" scale=\"Byte\" size=\"Integer\" dbType=\"DbType\" allowDbNull=\"Boolean\" format=\"string\" parameterType=\"Type\" /> <!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Connection Options dbProvider - Name of the database provider. Required. Default: sqlserver Following values are recognized by default: sqlserver, mssql, microsoft or msde - Resolves to System.Data.SqlClient Data Provider odbc - ODBC Data Provider (Not recognized on NetCore) oledb - OLEDB Data Provider (Not recognized on NetCore) Note for .NET Core one should install the Nuget-package for the DbProvider (Ex. System.Data.SqlClient), and instead use the fully qualified name of the provider connection type (class implementing IDbConnection). See also DbProvider Examples Note for .NET Framework then one can also use the invariant name as registered in machine.config or app.config. Common values are (Not supported by NET Core): * System.Data.SqlClient - * System.Data.OracleClient - (deprecated in .NET Framework 4) * Oracle.DataAccess.Client - * System.Data.SQLite - * Npgsql - * MySql.Data.MySqlClient If you get the following error in Internal-Logging then you might have to use the fully qualified name. Error during initialization of Database Target[Database_wrapped] Could not load type '<Name Of DbProvider>' from assembly 'NLog, Version=4.0.0.0, Culture=neutral, PublicKeyToken=5120e14c03d0593c'. connectionString - Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase and DBProvider. Layout connectionStringName - Name of the connection string to lookup in app.config. The ProviderName of the connectionstring will be used to determine the SQL type. Since NLog 4.3 this ProviderName attribute isn't required anymore and the dbProvider will be used as fallback. Not supported on NetCore as app.config has been replaced with appsettings.json. Use ${configsetting} in connectionString instead keepConnection - Indicates whether to keep the database connection open between the log events. Boolean Default: false isolationLevel - Activates transactions when doing batching. This will improve performance as it will write multiple rows in a single transaction. Recommended to use ReadCommitted to enable. Consider adding `;ENLIST=FALSE' to ConnectionString to disable auto-enlist. Default: Not set Introduced with NLog 4.7 dbDatabase - Database name. If the ConnectionString is not provided this value will be used to construct the \"Database=\" part of the connection string. Layout dbUserName - Database user name. If the ConnectionString is not provided this value will be used to construct the \"User ID=\" part of the connection string. Layout dbPassword - Database password. If the ConnectionString is not provided this value will be used to construct the \"Password=\" part of the connection string. Layout dbHost - Database host name. If the ConnectionString is not provided this value will be used to construct the \"Server=\" part of the connection string. Layout useTransactions - This option was removed in NLog 4.0 because the logging code always runs outside of transaction. This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error. SQL Statement commandType - Type of the command. Required. Default: text Possible values: StoredProcedure - The commandText is the stored procedure name. TableDirect - Text - regular query commandText - Text of the SQL command to be run on each log level. Layout Required. Typically this is a SQL INSERT statement or a stored procedure call. It should use the database-specific parameters (marked as @parameter for SQL server or :parameter for Oracle, other data providers have their own notation) and not the layout renderers, because the latter is prone to SQL injection attacks. The layout renderers should be specified as \\ elements instead. parameters - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. Collection Each collection item is represented by \\ element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. Note: there is also ${db-null} name - Database parameter name. Required. precision - Database parameter precision. Byte Default: 0 scale - Database parameter scale. Byte Default: 0 size - Database parameter size. Integer Default: 0 dbType - One of the values of DbType (e.g. \"Int32\", \"Decimal\", \"DateTime\"), or a value of DBType like prefixed with the property name, e.g. \"SqlDbType.NChar\" will set the property \"SqlDbType\" on \"NChar\". Another example: \"NpgsqlDbType.Json\" with NpgsqlParameter. Introduced in NLog 4.6. Since NLog 4.7 not case-sensitive any more parameterType *. Optional parametertype (System.Type), will be recognized from the dbType . When using special DbType like SqlDbType.SmallInt then one can specify parameterType=\"System.Int16\" to help - This will skip the overhead of first rendering to string, and parsing the string into the expected type. Introduced in NLog 4.6 format - format for parsing the value when not using the rawValue, of if the rawValue conversion to has been failed. Introduced in NLog 4.6 culture - culture for parsing the value, analogous as \"format\". Introduced in NLog 4.6 allowDbNull - empty value will be translate into DbNull. Requires database column to allow NULL values. Introduced in NLog 4.7.4. Empty values are null for nullable types and null and '' for strings. Installation Options See Installing targets . installConnectionString - Connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used. Layout InstallDdlCommands - The installation DDL commands. Collection . Each collection item is represented by \\ element with the following attributes: commandType - Type of the command. Required. Default: text Possible values: StoredProcedure - The command-text is the stored procedure name. TableDirect - Text - regular query Text - The command-text (Or stored procedure name) parameters - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. Collection Each collection item is represented by element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. name - Database parameter name. Required. precision - Database parameter precision. Byte Default: 0 scale - Database parameter scale. Byte Default: 0 size - Database parameter size. Integer Default: 0 text - Command text. Layout Required. connectionString - Connection string to run the command against. If not provided, connection string from the target is used. Layout ignoreFailures - Indicates whether to ignore failures. Boolean uninstallDdlCommands - The uninstallation DDL commands. Collection Each collection item is represented by \\ element with the following attributes: commandType - Type of the command. Required. Default: text Possible values: StoredProcedure - The command-text is the stored procedure name. TableDirect - Text - regular query Text - The command-text (Or stored procedure name) parameters - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. Collection Each collection item is represented by \\ element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. name - Database parameter name. Required. precision - Database parameter precision. Byte Default: 0 scale - Database parameter scale. Byte Default: 0 size - Database parameter size. Integer Default: 0 text - Command text. Layout Required. connectionString - Connection string to run the command against. If not provided, connection string from the target is used. Layout ignoreFailures - Indicates whether to ignore failures. Boolean Command and connection properties Introduced in NLog 4.7, you could add properties to the connection (e.g. SqlConnection, OracleConnection) and the Command (e.g. SqlCommand, OracleCommand). this could be useful for the Azure Access Token Examples <commandProperty name=\"CommandTimeout\" layout=\"${gdc:DefaultCommandTimeout}\" propertyType=\"System.Int32\" /> <connectionProperty name=\"AccessToken\" layout=\"${gdc:AccessToken}\" propertyType=\"System.String\" /> Full example: <target name=\"db\" xsi:type=\"Database\" commandType=\"StoredProcedure\" commandText=\"[dbo].[NLog_AddEntry_p]\" > <commandProperty name=\"CommandTimeout\" layout=\"${gdc:DefaultCommandTimeout}\" propertyType=\"System.Int32\" /> <connectionProperty name=\"AccessToken\" layout=\"${gdc:AccessToken}\" propertyType=\"System.String\" /> <parameter name=\"@logged\" layout=\"${date}\" /> <parameter name=\"@level\" layout=\"${level}\" /> <parameter name=\"@message\" layout=\"${message}\" /> <parameter name=\"@logger\" layout=\"${logger}\" /> </target> About DbType and IRawValue The DbType works as follows - NLog tries first if the Layout Renderer support IRawValue to get the non-string type. Then it will use the IPropertyTypeConverter for converting to the desired dbType. - If that fails, NLog will render the layout render to string and then parse it (with usage of the optional format option). Then it will also use the IPropertyTypeConverter for converting to the desired dbType. - NoRawValue layout renderer could be use for forcing to use the string value. Example Configurations NLog and SQL Server Example Configuration <target name=\"database\" xsi:type=\"Database\"> <connectionString>server=localhost;Database=*****;user id=****;password=*****</connectionString> <!-- Script for creating the dbo.Log table. SET ANSI_NULLS ON SET QUOTED_IDENTIFIER ON CREATE TABLE [dbo].[Log] ( [Id] [int] IDENTITY(1,1) NOT NULL, [MachineName] [nvarchar](50) NOT NULL, [Logged] [datetime] NOT NULL, [Level] [nvarchar](50) NOT NULL, [Message] [nvarchar](max) NOT NULL, [Logger] [nvarchar](250) NULL, [Callsite] [nvarchar](max) NULL, [Exception] [nvarchar](max) NULL, CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY] --> <commandText> insert into dbo.Log ( MachineName, Logged, Level, Message, Logger, Callsite, Exception ) values ( @MachineName, @Logged, @Level, @Message, @Logger, @Callsite, @Exception ); </commandText> <parameter name=\"@MachineName\" layout=\"${machinename}\" /> <parameter name=\"@Logged\" layout=\"${date}\" /> <parameter name=\"@Level\" layout=\"${level}\" /> <parameter name=\"@Message\" layout=\"${message}\" /> <parameter name=\"@Logger\" layout=\"${logger}\" /> <parameter name=\"@Callsite\" layout=\"${callsite}\" /> <parameter name=\"@Exception\" layout=\"${exception:tostring}\" /> </target> NLog and SQL Server using a stored procedure This approach keeps the NLog.config file simpler, and helps confine database logic to the database. NLog target configuration <target name=\"db\" xsi:type=\"Database\" connectionString=\"server=localhost;Database=*****;user id=****;password=*****\" commandType=\"StoredProcedure\" commandText=\"[dbo].[NLog_AddEntry_p]\" > <parameter name=\"@machineName\" layout=\"${machinename}\" /> <parameter name=\"@logged\" layout=\"${date}\" /> <parameter name=\"@level\" layout=\"${level}\" /> <parameter name=\"@message\" layout=\"${message}\" /> <parameter name=\"@logger\" layout=\"${logger}\" /> <parameter name=\"@properties\" layout=\"${all-event-properties:separator=|}\" /> <parameter name=\"@callsite\" layout=\"${callsite}\" /> <parameter name=\"@exception\" layout=\"${exception:tostring}\" /> </target> SQL scripts to set up the database objects Remember to grant permissions on the database objects so that the website can execute the stored procedure. CREATE TABLE [dbo].[NLog] ( [ID] [int] IDENTITY(1,1) NOT NULL, [MachineName] [nvarchar](200) NULL, [Logged] [datetime] NOT NULL, [Level] [varchar](5) NOT NULL, [Message] [nvarchar](max) NOT NULL, [Logger] [nvarchar](300) NULL, [Properties] [nvarchar](max) NULL, [Callsite] [nvarchar](300) NULL, [Exception] [nvarchar](max) NULL, CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]; GO CREATE PROCEDURE [dbo].[NLog_AddEntry_p] ( @machineName nvarchar(200), @logged datetime, @level varchar(5), @message nvarchar(max), @logger nvarchar(300), @properties nvarchar(max), @callsite nvarchar(300), @exception nvarchar(max) ) AS BEGIN INSERT INTO [dbo].[NLog] ( [MachineName], [Logged], [Level], [Message], [Logger], [Properties], [Callsite], [Exception] ) VALUES ( @machineName, @logged, @level, @message, @logger, @properties, @callsite, @exception ); END Example: simple logs to database target Logger call: logger.Info(\"my info message\"); config: <target name=\"apiUsageLog\" xsi:type=\"Database\" connectionStringName=\"connStringName\"> <commandText> INSERT INTO Table (message, machinename) VALUES (@message, @machinenameParam) </commandText> <parameter name=\"@messageParam\" layout=\"${message}\" /> <!-- this will be \"my info message\"--> <parameter name=\"@machinenameParam\" layout=\"${machinename}\" /> <!-- defined in NLog, see https://nlog-project.org/config/?tab=layout-renderers--> </target> </targets> This will create a log record in the database with \"my info message\" and the machine name. Example: log with custom properties: Structured logging is used here. See structured logging Logger call: logger.Info(\"my info message with {Property1}\", \"value1\"); config: <target name=\"apiUsageLog\" xsi:type=\"Database\" connectionStringName=\"connStringName\"> <commandText> INSERT INTO Table (message, machinename, property1) VALUES (@message, @machinenameParam, @propertyParam1) </commandText> <parameter name=\"@messageParam\" layout=\"${message}\" /> <!-- this will be: my info message with \"Value1\" --> <parameter name=\"@machinenameParam\" layout=\"${machinename}\" /> <!-- defined in NLog, see https://nlog-project.org/config/?tab=layout-renderers--> <parameter name=\"@propertyParam1\" layout=\"${event-properties:Property1}\" /> <!-- this will be \"value1\" --> </target> </targets> This will create a log record in the database with \"my info message\" , the machine name and the custom property with \"value1\". Example allowDbNull : <parameter name=\"@activityid\" layout=\"${activityid}\" dbType=\"DbType.Guid\" allowDbNull=\"true\" /> Example: log with custom properties, not all in the message This combines structured logging and WithProperty . You need at least NLog 4.6.3 for this. Logger call: logger.WithProperty(\"Property2\", \"value2\") .Info(\"my info message {Property1}\", \"value1\"); config: <target name=\"apiUsageLog\" xsi:type=\"Database\" connectionStringName=\"connStringName\"> <commandText> INSERT INTO Table (message, machinename, property1, property2) VALUES (@message, @machinenameParam, @propertyParam2) </commandText> <parameter name=\"@messageParam\" layout=\"${message}\" /> <!-- this will be: my info message with \"value1\"--> <parameter name=\"@machinenameParam\" layout=\"${machinename}\" /> <!-- defined in NLog, see https://nlog-project.org/config/?tab=layout-renderers--> <parameter name=\"@propertyParam1\" layout=\"${event-properties:Property1}\" /> <!-- this will be \"value1\" --> <parameter name=\"@propertyParam2\" layout=\"${event-properties:Property2}\" /> <!-- this will be \"value2\" --> </target> </targets> This will create a log record in the database with my info message with \"Value1\" , the machine name and the custom properties \"value1\" and \"value2\" Note, now \"value1\" is in the message and \"value2\" isn't. DbProvider Examples MySql and .NET Core Install package: https://www.nuget.org/packages/MySql.Data/ dbProvider=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\" or if using packages: https://www.nuget.org/packages/MySqlConnector/ and https://www.nuget.org/packages/MySqlConnector.Logging.NLog/ dbProvider=\"MySqlConnector.MySqlConnection, MySqlConnector\" System.Data.SQLite and .NET Core Install package: https://www.nuget.org/packages/System.Data.SQLite dbProvider=\"System.Data.SQLite.SQLiteConnection, System.Data.SQLite\" Microsoft.Data.SqlClient and .NET Core Install package: https://www.nuget.org/packages/Microsoft.Data.SqlClient/ dbProvider=\"Microsoft.Data.SqlClient.SqlConnection, Microsoft.Data.SqlClient\" Microsoft.Data.Sqlite and .NET Core Install package: https://www.nuget.org/packages/Microsoft.Data.SQLite/ dbProvider=\"Microsoft.Data.Sqlite.SqliteConnection, Microsoft.Data.Sqlite\" Npgsql and .NET core Install package: https://www.nuget.org/packages/Npgsql/ dbProvider=\"Npgsql.NpgsqlConnection, Npgsql\" Oracle.ManagedDataAccess and .NET dbProvider=\"Oracle.ManagedDataAccess.Client.OracleConnection, Oracle.ManagedDataAccess\" Mono.Data.Sqlite and .NET dbProvider=\"Mono.Data.Sqlite.SqliteConnection, Mono.Data.Sqlite\"","title":"Database target"},{"location":"Database-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Database\" name=\"String\" dbProvider=\"String\" connectionString=\"Layout\" connectionStringName=\"String\" keepConnection=\"Boolean\" isolationLevel=\"System.Data.IsolationLevel\" dbDatabase=\"Layout\" dbUserName=\"Layout\" dbPassword=\"Layout\" dbHost=\"Layout\" commandType=\"Enum\" commandText=\"Layout\" installConnectionString=\"Layout\"> <install-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\" text=\"Layout\"/><!-- repeated --> <uninstall-command commandType=\"Enum\" connectionString=\"Layout\" ignoreFailures=\"Boolean\" text=\"Layout\"/><!-- repeated --> <parameter name=\"String\" layout=\"Layout\" precision=\"Byte\" scale=\"Byte\" size=\"Integer\" dbType=\"DbType\" allowDbNull=\"Boolean\" format=\"string\" parameterType=\"Type\" /> <!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Database-target/#parameters","text":"","title":"Parameters"},{"location":"Database-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Database-target/#connection-options","text":"dbProvider - Name of the database provider. Required. Default: sqlserver Following values are recognized by default: sqlserver, mssql, microsoft or msde - Resolves to System.Data.SqlClient Data Provider odbc - ODBC Data Provider (Not recognized on NetCore) oledb - OLEDB Data Provider (Not recognized on NetCore) Note for .NET Core one should install the Nuget-package for the DbProvider (Ex. System.Data.SqlClient), and instead use the fully qualified name of the provider connection type (class implementing IDbConnection). See also DbProvider Examples Note for .NET Framework then one can also use the invariant name as registered in machine.config or app.config. Common values are (Not supported by NET Core): * System.Data.SqlClient - * System.Data.OracleClient - (deprecated in .NET Framework 4) * Oracle.DataAccess.Client - * System.Data.SQLite - * Npgsql - * MySql.Data.MySqlClient If you get the following error in Internal-Logging then you might have to use the fully qualified name. Error during initialization of Database Target[Database_wrapped] Could not load type '<Name Of DbProvider>' from assembly 'NLog, Version=4.0.0.0, Culture=neutral, PublicKeyToken=5120e14c03d0593c'. connectionString - Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase and DBProvider. Layout connectionStringName - Name of the connection string to lookup in app.config. The ProviderName of the connectionstring will be used to determine the SQL type. Since NLog 4.3 this ProviderName attribute isn't required anymore and the dbProvider will be used as fallback. Not supported on NetCore as app.config has been replaced with appsettings.json. Use ${configsetting} in connectionString instead keepConnection - Indicates whether to keep the database connection open between the log events. Boolean Default: false isolationLevel - Activates transactions when doing batching. This will improve performance as it will write multiple rows in a single transaction. Recommended to use ReadCommitted to enable. Consider adding `;ENLIST=FALSE' to ConnectionString to disable auto-enlist. Default: Not set Introduced with NLog 4.7 dbDatabase - Database name. If the ConnectionString is not provided this value will be used to construct the \"Database=\" part of the connection string. Layout dbUserName - Database user name. If the ConnectionString is not provided this value will be used to construct the \"User ID=\" part of the connection string. Layout dbPassword - Database password. If the ConnectionString is not provided this value will be used to construct the \"Password=\" part of the connection string. Layout dbHost - Database host name. If the ConnectionString is not provided this value will be used to construct the \"Server=\" part of the connection string. Layout useTransactions - This option was removed in NLog 4.0 because the logging code always runs outside of transaction. This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error.","title":"Connection Options"},{"location":"Database-target/#sql-statement","text":"commandType - Type of the command. Required. Default: text Possible values: StoredProcedure - The commandText is the stored procedure name. TableDirect - Text - regular query commandText - Text of the SQL command to be run on each log level. Layout Required. Typically this is a SQL INSERT statement or a stored procedure call. It should use the database-specific parameters (marked as @parameter for SQL server or :parameter for Oracle, other data providers have their own notation) and not the layout renderers, because the latter is prone to SQL injection attacks. The layout renderers should be specified as \\ elements instead. parameters - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. Collection Each collection item is represented by \\ element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. Note: there is also ${db-null} name - Database parameter name. Required. precision - Database parameter precision. Byte Default: 0 scale - Database parameter scale. Byte Default: 0 size - Database parameter size. Integer Default: 0 dbType - One of the values of DbType (e.g. \"Int32\", \"Decimal\", \"DateTime\"), or a value of DBType like prefixed with the property name, e.g. \"SqlDbType.NChar\" will set the property \"SqlDbType\" on \"NChar\". Another example: \"NpgsqlDbType.Json\" with NpgsqlParameter. Introduced in NLog 4.6. Since NLog 4.7 not case-sensitive any more parameterType *. Optional parametertype (System.Type), will be recognized from the dbType . When using special DbType like SqlDbType.SmallInt then one can specify parameterType=\"System.Int16\" to help - This will skip the overhead of first rendering to string, and parsing the string into the expected type. Introduced in NLog 4.6 format - format for parsing the value when not using the rawValue, of if the rawValue conversion to has been failed. Introduced in NLog 4.6 culture - culture for parsing the value, analogous as \"format\". Introduced in NLog 4.6 allowDbNull - empty value will be translate into DbNull. Requires database column to allow NULL values. Introduced in NLog 4.7.4. Empty values are null for nullable types and null and '' for strings.","title":"SQL Statement"},{"location":"Database-target/#installation-options","text":"See Installing targets . installConnectionString - Connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used. Layout InstallDdlCommands - The installation DDL commands. Collection . Each collection item is represented by \\ element with the following attributes: commandType - Type of the command. Required. Default: text Possible values: StoredProcedure - The command-text is the stored procedure name. TableDirect - Text - regular query Text - The command-text (Or stored procedure name) parameters - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. Collection Each collection item is represented by element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. name - Database parameter name. Required. precision - Database parameter precision. Byte Default: 0 scale - Database parameter scale. Byte Default: 0 size - Database parameter size. Integer Default: 0 text - Command text. Layout Required. connectionString - Connection string to run the command against. If not provided, connection string from the target is used. Layout ignoreFailures - Indicates whether to ignore failures. Boolean uninstallDdlCommands - The uninstallation DDL commands. Collection Each collection item is represented by \\ element with the following attributes: commandType - Type of the command. Required. Default: text Possible values: StoredProcedure - The command-text is the stored procedure name. TableDirect - Text - regular query Text - The command-text (Or stored procedure name) parameters - The collection of parameters. Each parameter contains a mapping between NLog layout and a database named or positional parameter. Collection Each collection item is represented by \\ element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. name - Database parameter name. Required. precision - Database parameter precision. Byte Default: 0 scale - Database parameter scale. Byte Default: 0 size - Database parameter size. Integer Default: 0 text - Command text. Layout Required. connectionString - Connection string to run the command against. If not provided, connection string from the target is used. Layout ignoreFailures - Indicates whether to ignore failures. Boolean","title":"Installation Options"},{"location":"Database-target/#command-and-connection-properties","text":"Introduced in NLog 4.7, you could add properties to the connection (e.g. SqlConnection, OracleConnection) and the Command (e.g. SqlCommand, OracleCommand). this could be useful for the Azure Access Token","title":"Command and connection properties"},{"location":"Database-target/#examples","text":"<commandProperty name=\"CommandTimeout\" layout=\"${gdc:DefaultCommandTimeout}\" propertyType=\"System.Int32\" /> <connectionProperty name=\"AccessToken\" layout=\"${gdc:AccessToken}\" propertyType=\"System.String\" /> Full example: <target name=\"db\" xsi:type=\"Database\" commandType=\"StoredProcedure\" commandText=\"[dbo].[NLog_AddEntry_p]\" > <commandProperty name=\"CommandTimeout\" layout=\"${gdc:DefaultCommandTimeout}\" propertyType=\"System.Int32\" /> <connectionProperty name=\"AccessToken\" layout=\"${gdc:AccessToken}\" propertyType=\"System.String\" /> <parameter name=\"@logged\" layout=\"${date}\" /> <parameter name=\"@level\" layout=\"${level}\" /> <parameter name=\"@message\" layout=\"${message}\" /> <parameter name=\"@logger\" layout=\"${logger}\" /> </target>","title":"Examples"},{"location":"Database-target/#about-dbtype-and-irawvalue","text":"The DbType works as follows - NLog tries first if the Layout Renderer support IRawValue to get the non-string type. Then it will use the IPropertyTypeConverter for converting to the desired dbType. - If that fails, NLog will render the layout render to string and then parse it (with usage of the optional format option). Then it will also use the IPropertyTypeConverter for converting to the desired dbType. - NoRawValue layout renderer could be use for forcing to use the string value.","title":"About DbType and IRawValue"},{"location":"Database-target/#example-configurations","text":"","title":"Example Configurations"},{"location":"Database-target/#nlog-and-sql-server-example-configuration","text":"<target name=\"database\" xsi:type=\"Database\"> <connectionString>server=localhost;Database=*****;user id=****;password=*****</connectionString> <!-- Script for creating the dbo.Log table. SET ANSI_NULLS ON SET QUOTED_IDENTIFIER ON CREATE TABLE [dbo].[Log] ( [Id] [int] IDENTITY(1,1) NOT NULL, [MachineName] [nvarchar](50) NOT NULL, [Logged] [datetime] NOT NULL, [Level] [nvarchar](50) NOT NULL, [Message] [nvarchar](max) NOT NULL, [Logger] [nvarchar](250) NULL, [Callsite] [nvarchar](max) NULL, [Exception] [nvarchar](max) NULL, CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY] --> <commandText> insert into dbo.Log ( MachineName, Logged, Level, Message, Logger, Callsite, Exception ) values ( @MachineName, @Logged, @Level, @Message, @Logger, @Callsite, @Exception ); </commandText> <parameter name=\"@MachineName\" layout=\"${machinename}\" /> <parameter name=\"@Logged\" layout=\"${date}\" /> <parameter name=\"@Level\" layout=\"${level}\" /> <parameter name=\"@Message\" layout=\"${message}\" /> <parameter name=\"@Logger\" layout=\"${logger}\" /> <parameter name=\"@Callsite\" layout=\"${callsite}\" /> <parameter name=\"@Exception\" layout=\"${exception:tostring}\" /> </target>","title":"NLog and SQL Server Example Configuration"},{"location":"Database-target/#nlog-and-sql-server-using-a-stored-procedure","text":"This approach keeps the NLog.config file simpler, and helps confine database logic to the database.","title":"NLog and SQL Server using a stored procedure"},{"location":"Database-target/#nlog-target-configuration","text":"<target name=\"db\" xsi:type=\"Database\" connectionString=\"server=localhost;Database=*****;user id=****;password=*****\" commandType=\"StoredProcedure\" commandText=\"[dbo].[NLog_AddEntry_p]\" > <parameter name=\"@machineName\" layout=\"${machinename}\" /> <parameter name=\"@logged\" layout=\"${date}\" /> <parameter name=\"@level\" layout=\"${level}\" /> <parameter name=\"@message\" layout=\"${message}\" /> <parameter name=\"@logger\" layout=\"${logger}\" /> <parameter name=\"@properties\" layout=\"${all-event-properties:separator=|}\" /> <parameter name=\"@callsite\" layout=\"${callsite}\" /> <parameter name=\"@exception\" layout=\"${exception:tostring}\" /> </target>","title":"NLog target configuration"},{"location":"Database-target/#sql-scripts-to-set-up-the-database-objects","text":"Remember to grant permissions on the database objects so that the website can execute the stored procedure. CREATE TABLE [dbo].[NLog] ( [ID] [int] IDENTITY(1,1) NOT NULL, [MachineName] [nvarchar](200) NULL, [Logged] [datetime] NOT NULL, [Level] [varchar](5) NOT NULL, [Message] [nvarchar](max) NOT NULL, [Logger] [nvarchar](300) NULL, [Properties] [nvarchar](max) NULL, [Callsite] [nvarchar](300) NULL, [Exception] [nvarchar](max) NULL, CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]; GO CREATE PROCEDURE [dbo].[NLog_AddEntry_p] ( @machineName nvarchar(200), @logged datetime, @level varchar(5), @message nvarchar(max), @logger nvarchar(300), @properties nvarchar(max), @callsite nvarchar(300), @exception nvarchar(max) ) AS BEGIN INSERT INTO [dbo].[NLog] ( [MachineName], [Logged], [Level], [Message], [Logger], [Properties], [Callsite], [Exception] ) VALUES ( @machineName, @logged, @level, @message, @logger, @properties, @callsite, @exception ); END","title":"SQL scripts to set up the database objects"},{"location":"Database-target/#example-simple-logs-to-database-target","text":"Logger call: logger.Info(\"my info message\"); config: <target name=\"apiUsageLog\" xsi:type=\"Database\" connectionStringName=\"connStringName\"> <commandText> INSERT INTO Table (message, machinename) VALUES (@message, @machinenameParam) </commandText> <parameter name=\"@messageParam\" layout=\"${message}\" /> <!-- this will be \"my info message\"--> <parameter name=\"@machinenameParam\" layout=\"${machinename}\" /> <!-- defined in NLog, see https://nlog-project.org/config/?tab=layout-renderers--> </target> </targets> This will create a log record in the database with \"my info message\" and the machine name.","title":"Example: simple logs to database target"},{"location":"Database-target/#example-log-with-custom-properties","text":"Structured logging is used here. See structured logging Logger call: logger.Info(\"my info message with {Property1}\", \"value1\"); config: <target name=\"apiUsageLog\" xsi:type=\"Database\" connectionStringName=\"connStringName\"> <commandText> INSERT INTO Table (message, machinename, property1) VALUES (@message, @machinenameParam, @propertyParam1) </commandText> <parameter name=\"@messageParam\" layout=\"${message}\" /> <!-- this will be: my info message with \"Value1\" --> <parameter name=\"@machinenameParam\" layout=\"${machinename}\" /> <!-- defined in NLog, see https://nlog-project.org/config/?tab=layout-renderers--> <parameter name=\"@propertyParam1\" layout=\"${event-properties:Property1}\" /> <!-- this will be \"value1\" --> </target> </targets> This will create a log record in the database with \"my info message\" , the machine name and the custom property with \"value1\".","title":"Example: log with custom properties:"},{"location":"Database-target/#example-allowdbnull","text":"<parameter name=\"@activityid\" layout=\"${activityid}\" dbType=\"DbType.Guid\" allowDbNull=\"true\" />","title":"Example allowDbNull:"},{"location":"Database-target/#example-log-with-custom-properties-not-all-in-the-message","text":"This combines structured logging and WithProperty . You need at least NLog 4.6.3 for this. Logger call: logger.WithProperty(\"Property2\", \"value2\") .Info(\"my info message {Property1}\", \"value1\"); config: <target name=\"apiUsageLog\" xsi:type=\"Database\" connectionStringName=\"connStringName\"> <commandText> INSERT INTO Table (message, machinename, property1, property2) VALUES (@message, @machinenameParam, @propertyParam2) </commandText> <parameter name=\"@messageParam\" layout=\"${message}\" /> <!-- this will be: my info message with \"value1\"--> <parameter name=\"@machinenameParam\" layout=\"${machinename}\" /> <!-- defined in NLog, see https://nlog-project.org/config/?tab=layout-renderers--> <parameter name=\"@propertyParam1\" layout=\"${event-properties:Property1}\" /> <!-- this will be \"value1\" --> <parameter name=\"@propertyParam2\" layout=\"${event-properties:Property2}\" /> <!-- this will be \"value2\" --> </target> </targets> This will create a log record in the database with my info message with \"Value1\" , the machine name and the custom properties \"value1\" and \"value2\" Note, now \"value1\" is in the message and \"value2\" isn't.","title":"Example: log with custom properties, not all in the message"},{"location":"Database-target/#dbprovider-examples","text":"","title":"DbProvider Examples"},{"location":"Database-target/#mysql-and-net-core","text":"Install package: https://www.nuget.org/packages/MySql.Data/ dbProvider=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\" or if using packages: https://www.nuget.org/packages/MySqlConnector/ and https://www.nuget.org/packages/MySqlConnector.Logging.NLog/ dbProvider=\"MySqlConnector.MySqlConnection, MySqlConnector\"","title":"MySql and .NET Core"},{"location":"Database-target/#systemdatasqlite-and-net-core","text":"Install package: https://www.nuget.org/packages/System.Data.SQLite dbProvider=\"System.Data.SQLite.SQLiteConnection, System.Data.SQLite\"","title":"System.Data.SQLite and .NET Core"},{"location":"Database-target/#microsoftdatasqlclient-and-net-core","text":"Install package: https://www.nuget.org/packages/Microsoft.Data.SqlClient/ dbProvider=\"Microsoft.Data.SqlClient.SqlConnection, Microsoft.Data.SqlClient\"","title":"Microsoft.Data.SqlClient and .NET Core"},{"location":"Database-target/#microsoftdatasqlite-and-net-core","text":"Install package: https://www.nuget.org/packages/Microsoft.Data.SQLite/ dbProvider=\"Microsoft.Data.Sqlite.SqliteConnection, Microsoft.Data.Sqlite\"","title":"Microsoft.Data.Sqlite and .NET Core"},{"location":"Database-target/#npgsql-and-net-core","text":"Install package: https://www.nuget.org/packages/Npgsql/ dbProvider=\"Npgsql.NpgsqlConnection, Npgsql\"","title":"Npgsql and .NET core"},{"location":"Database-target/#oraclemanageddataaccess-and-net","text":"dbProvider=\"Oracle.ManagedDataAccess.Client.OracleConnection, Oracle.ManagedDataAccess\"","title":"Oracle.ManagedDataAccess and .NET"},{"location":"Database-target/#monodatasqlite-and-net","text":"dbProvider=\"Mono.Data.Sqlite.SqliteConnection, Mono.Data.Sqlite\"","title":"Mono.Data.Sqlite and .NET"},{"location":"Date-layout-renderer/","text":"Current date and time. Platforms Supported: All Alternative ${longdate} or ${shortdate} can be used for high performance timestamp-logging. Configuration Syntax ${date:universalTime=Boolean:format=String:culture=Culture} Parameters Rendering Options universalTime - Indicates whether to output UTC time instead of local time.Boolean Default: False format - Date format. Can be any argument accepted by DateTime.ToString(format). Note that colons need to escaped with a backslash: \\ Example: ${date:format=yyyy-MM-dd HH\\:mm\\:ss.fff} -> DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss.fff\") -> \"2000-01-01 00:00:00.000\" Note that backslashes, that shall be passed through, also need to be escaped: \\ Example: ${date:format=\\\\Yyyyy\\\\MMM\\\\Ddd} -> DateTime.Now.ToString(@\"\\Yyyyy\\MMM\\Ddd\") -> Y2000M01D01\" * culture - Culture used for rendering. Default: InvariantCulture","title":"Date layout renderer"},{"location":"Date-layout-renderer/#configuration-syntax","text":"${date:universalTime=Boolean:format=String:culture=Culture}","title":"Configuration Syntax"},{"location":"Date-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Date-layout-renderer/#rendering-options","text":"universalTime - Indicates whether to output UTC time instead of local time.Boolean Default: False format - Date format. Can be any argument accepted by DateTime.ToString(format). Note that colons need to escaped with a backslash: \\ Example: ${date:format=yyyy-MM-dd HH\\:mm\\:ss.fff} -> DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss.fff\") -> \"2000-01-01 00:00:00.000\" Note that backslashes, that shall be passed through, also need to be escaped: \\ Example: ${date:format=\\\\Yyyyy\\\\MMM\\\\Ddd} -> DateTime.Now.ToString(@\"\\Yyyyy\\MMM\\Ddd\") -> Y2000M01D01\" * culture - Culture used for rendering. Default: InvariantCulture","title":"Rendering Options"},{"location":"Debug-target/","text":"Mock target for unit-testing. If looking for output to System.Diagnostics.Debug then use DebugSystem-target . Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"Debug\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} Examples Logging to Debug Target (snippet from Debug Simple Example.cs ) DebugTarget target = new DebugTarget(); target.Layout = \"${message}\"; NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); Logger logger = LogManager.GetLogger(\"Example\"); logger.Debug(\"log message\"); logger.Debug(\"another log message\"); Console.WriteLine(\"The debug target has been hit {0} times.\", target.Counter); Console.WriteLine(\"The last message was '{0}'.\", target.LastMessage); Some examples of DebugTarget use can be found in unit tests","title":"Debug target"},{"location":"Debug-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Debug\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Debug-target/#parameters","text":"","title":"Parameters"},{"location":"Debug-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Debug-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message}","title":"Layout Options"},{"location":"Debug-target/#examples","text":"","title":"Examples"},{"location":"Debug-target/#logging-to-debug-target","text":"(snippet from Debug Simple Example.cs ) DebugTarget target = new DebugTarget(); target.Layout = \"${message}\"; NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); Logger logger = LogManager.GetLogger(\"Example\"); logger.Debug(\"log message\"); logger.Debug(\"another log message\"); Console.WriteLine(\"The debug target has been hit {0} times.\", target.Counter); Console.WriteLine(\"The last message was '{0}'.\", target.LastMessage); Some examples of DebugTarget use can be found in unit tests","title":"Logging to Debug Target"},{"location":"DebugSystem-target/","text":"Sends log messages through System.Diagnostics.Debug. Platforms Supported: All (Introduced with NLog 5.0) Configuration Syntax <targets> <target xsi:type=\"DebugSystem\" name=\"String\" layout=\"Layout\" /> </targets> Parameters General Options name - Name of the target. Output Options layout - Layout used to format log messages. Layout Required header - Layout used to format header-output when initializing. Layout footer - Layout used to format footer-output when closing. Layout Notes Alternative targets for diagnostic output: - Trace-target for output to System.Diagnostics.Trace - Debugger-target for output to System.Diagnostics.Debugger.Log - OutputDebugString-target for output to OutputDebugString Win32 API","title":"DebugSystem target"},{"location":"DebugSystem-target/#configuration-syntax","text":"<targets> <target xsi:type=\"DebugSystem\" name=\"String\" layout=\"Layout\" /> </targets>","title":"Configuration Syntax"},{"location":"DebugSystem-target/#parameters","text":"","title":"Parameters"},{"location":"DebugSystem-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"DebugSystem-target/#output-options","text":"layout - Layout used to format log messages. Layout Required header - Layout used to format header-output when initializing. Layout footer - Layout used to format footer-output when closing. Layout","title":"Output Options"},{"location":"DebugSystem-target/#notes","text":"Alternative targets for diagnostic output: - Trace-target for output to System.Diagnostics.Trace - Debugger-target for output to System.Diagnostics.Debugger.Log - OutputDebugString-target for output to OutputDebugString Win32 API","title":"Notes"},{"location":"Debugger-target/","text":"Writes log messages to the attached managed debugger. See also System.Diagnostics.Debugger.Log Platforms Supported: Limited (Not available for NetStandard1.3 + NetStandard1.5) Configuration Syntax <targets> <target xsi:type=\"Debugger\" name=\"String\" footer=\"Layout\" layout=\"Layout\" header=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} header - Layout used to format header-output when initializing. Layout footer - Layout used to format footer-output when closing. Layout Examples From stackoverflow <targets> <target name=\"debugger\" xsi:type=\"Debugger\" layout=\"${logger}::${message}\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugger\" /> </rules> Notes Alternative targets for diagnostic output: - Trace-target for output to System.Diagnostics.Trace - DebugSystem-target for output to System.Diagnostics.Debug - OutputDebugString-target for output to OutputDebugString Win32 API","title":"Debugger target"},{"location":"Debugger-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Debugger\" name=\"String\" footer=\"Layout\" layout=\"Layout\" header=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Debugger-target/#parameters","text":"","title":"Parameters"},{"location":"Debugger-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Debugger-target/#layout-options","text":"layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} header - Layout used to format header-output when initializing. Layout footer - Layout used to format footer-output when closing. Layout","title":"Layout Options"},{"location":"Debugger-target/#examples","text":"From stackoverflow <targets> <target name=\"debugger\" xsi:type=\"Debugger\" layout=\"${logger}::${message}\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugger\" /> </rules>","title":"Examples"},{"location":"Debugger-target/#notes","text":"Alternative targets for diagnostic output: - Trace-target for output to System.Diagnostics.Trace - DebugSystem-target for output to System.Diagnostics.Debug - OutputDebugString-target for output to OutputDebugString Win32 API","title":"Notes"},{"location":"Dependency-injection-with-NLog/","text":"Resolve Dependency Injection Interface during initialization NLog 5.0 makes it possible to resolve interfaces using dependency injection during initialization. This allows you to load targets using NLog config file, before dependency injection provider is available. The custom NLog target can then override InitializeTarget to resolve the necessary dependencies: protected override void InitializeTarget() { var wantedDependency = base.ResolveService<IWantedDependency>(); base.InitializeTarget(); } If the custom NLog target requests a dependency, that is unavailable, then NLog will perform re-initialization of the NLog when the dependency becomes available. Service interfaces can registered like this: NLog.LogManager.Setup().SetupExtensions(ext => RegisterSingletonService<IWantedDependency>(wantedInstance)); It is also possible to connect with an external IServiceProvider for resolving dependencies: NLog.LogManager.Setup().SetupExtensions(ext => RegisterServiceProvider(serviceProvider)); Resolve Dependency Injection Interface during object creation NLog allows one to override the default method for creating new objects when loading configuration from NLog.config . ConfigurationItemFactory.Default.CreateInstance // namespace NLog.Config NLog will only be able to create objects of known types. To support custom objects one must also register the config-item-type before it will be recognized. See also Register your custom component NLog will by default use the default constructor for creating new objects. But one can override the creation like this: using NLog.Config; var defaultConstructor = ConfigurationItemFactory.Default.CreateInstance; ConfigurationItemFactory.Default.CreateInstance.CreateInstance = type => { if (type == typeof(MyCustomTarget)) return new MyCustomTarget(myCustomParameter); return defaultConstructor(type); }; Initialize NLog configuration with Dependency Injection Provider The combination of dynamic logging configuration and dependency injection can give a catch22. You want to have logging up and running early, but this will fail if dependent on custom objects that requires a dependency injection provider is fully loaded. The \"ugly\" work-around to this catch22 is to have two constructors for your custom-objects: - Default Constructor that initializes an object in disabled state (Ignored by dependency injection provider). - Specialized Constructor that initializes an object in working state. Alternative override the CreateInstance -method as first thing (Before creating first Logger-object or loading NLog config). Where it calls the specialized constructor with parameters that signals that it should be in disabled state. Then one can \"just\" perform a reload of the NLog config, after the dependency injection provider has been fully loaded and performed final override of CreateInstance . This will make NLog recreate all configuration items once again, and now with a working dependency injection provider that calls the specialized constructor with correct parameters. using NLog; LogManager.Configuration = LogManager.Configuration.Reload(); See also Reinitialize NLog configuration","title":"Dependency injection with NLog"},{"location":"Dependency-injection-with-NLog/#resolve-dependency-injection-interface-during-initialization","text":"NLog 5.0 makes it possible to resolve interfaces using dependency injection during initialization. This allows you to load targets using NLog config file, before dependency injection provider is available. The custom NLog target can then override InitializeTarget to resolve the necessary dependencies: protected override void InitializeTarget() { var wantedDependency = base.ResolveService<IWantedDependency>(); base.InitializeTarget(); } If the custom NLog target requests a dependency, that is unavailable, then NLog will perform re-initialization of the NLog when the dependency becomes available. Service interfaces can registered like this: NLog.LogManager.Setup().SetupExtensions(ext => RegisterSingletonService<IWantedDependency>(wantedInstance)); It is also possible to connect with an external IServiceProvider for resolving dependencies: NLog.LogManager.Setup().SetupExtensions(ext => RegisterServiceProvider(serviceProvider));","title":"Resolve Dependency Injection Interface during initialization"},{"location":"Dependency-injection-with-NLog/#resolve-dependency-injection-interface-during-object-creation","text":"NLog allows one to override the default method for creating new objects when loading configuration from NLog.config . ConfigurationItemFactory.Default.CreateInstance // namespace NLog.Config NLog will only be able to create objects of known types. To support custom objects one must also register the config-item-type before it will be recognized. See also Register your custom component NLog will by default use the default constructor for creating new objects. But one can override the creation like this: using NLog.Config; var defaultConstructor = ConfigurationItemFactory.Default.CreateInstance; ConfigurationItemFactory.Default.CreateInstance.CreateInstance = type => { if (type == typeof(MyCustomTarget)) return new MyCustomTarget(myCustomParameter); return defaultConstructor(type); };","title":"Resolve Dependency Injection Interface during object creation"},{"location":"Dependency-injection-with-NLog/#initialize-nlog-configuration-with-dependency-injection-provider","text":"The combination of dynamic logging configuration and dependency injection can give a catch22. You want to have logging up and running early, but this will fail if dependent on custom objects that requires a dependency injection provider is fully loaded. The \"ugly\" work-around to this catch22 is to have two constructors for your custom-objects: - Default Constructor that initializes an object in disabled state (Ignored by dependency injection provider). - Specialized Constructor that initializes an object in working state. Alternative override the CreateInstance -method as first thing (Before creating first Logger-object or loading NLog config). Where it calls the specialized constructor with parameters that signals that it should be in disabled state. Then one can \"just\" perform a reload of the NLog config, after the dependency injection provider has been fully loaded and performed final override of CreateInstance . This will make NLog recreate all configuration items once again, and now with a working dependency injection provider that calls the specialized constructor with correct parameters. using NLog; LogManager.Configuration = LogManager.Configuration.Reload(); See also Reinitialize NLog configuration","title":"Initialize NLog configuration with Dependency Injection Provider"},{"location":"Directory-separator/","text":"Renders the OS dependent directory separator Introduced in NLog 4.7 Platforms Supported: All Configuration Syntax ${dir-separator} Remarks Same result as Path.DirectorySeparatorChar","title":"Directory separator"},{"location":"Directory-separator/#configuration-syntax","text":"${dir-separator}","title":"Configuration Syntax"},{"location":"Directory-separator/#remarks","text":"Same result as Path.DirectorySeparatorChar","title":"Remarks"},{"location":"DocumentUri-layout-renderer/","text":"URI of the HTML page which hosts the current Silverlight application. Supported in Silverlight (NLog 5.0 does not support Silverlight) Configuration Syntax ${document-uri}","title":"DocumentUri layout renderer"},{"location":"DocumentUri-layout-renderer/#configuration-syntax","text":"${document-uri}","title":"Configuration Syntax"},{"location":"Elmah-target/","text":"","title":"Elmah target"},{"location":"Environment-User-Layout-Renderer/","text":"Thread User identity information (username). Platforms Supported: Limited (Not supported on NetStandard1.3+1.5) Introduced with NLog ver. 4.6.4 Configuration Syntax ${environment-user:userName=Boolean:domain=Boolean} Parameters Rendering Options userName - Indicates whether username should be included. Boolean Default: True domain - Indicates whether domain name should be included. Boolean Default: False DefaultUser - Fallback value if unable to lookup username DefaultDomain - Fallback value if unable to lookup domain Notes On Windows the Environment.UserName property wraps a call to the Windows GetUserName function . On Unix platforms the UserName property wraps a call to the getpwuid_r function. If an ASP.NET application runs in a development environment, the UserName property returns the name of the current user. In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool). Alternative one can use ${windows-identity} that depends on WindowsIdentity.Getcurrent() Another alternative is ${identity} that depends on Thread.CurrentPrincipal . Yet another alternative is ${aspnet-user-identity} but it only works on ASP.NET Applications with identity enabled.","title":"Environment User Layout Renderer"},{"location":"Environment-User-Layout-Renderer/#configuration-syntax","text":"${environment-user:userName=Boolean:domain=Boolean}","title":"Configuration Syntax"},{"location":"Environment-User-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Environment-User-Layout-Renderer/#rendering-options","text":"userName - Indicates whether username should be included. Boolean Default: True domain - Indicates whether domain name should be included. Boolean Default: False DefaultUser - Fallback value if unable to lookup username DefaultDomain - Fallback value if unable to lookup domain","title":"Rendering Options"},{"location":"Environment-User-Layout-Renderer/#notes","text":"On Windows the Environment.UserName property wraps a call to the Windows GetUserName function . On Unix platforms the UserName property wraps a call to the getpwuid_r function. If an ASP.NET application runs in a development environment, the UserName property returns the name of the current user. In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool). Alternative one can use ${windows-identity} that depends on WindowsIdentity.Getcurrent() Another alternative is ${identity} that depends on Thread.CurrentPrincipal . Yet another alternative is ${aspnet-user-identity} but it only works on ASP.NET Applications with identity enabled.","title":"Notes"},{"location":"Environment-layout-renderer/","text":"The environment variable like Path, TMP, PROCESSOR_ARCHITECTURE etc. Platforms Supported: All Configuration Syntax ${environment:variable=String} Parameters Rendering Options variable - Name of the environment variable. Required. Examples: Path, TMP, USERPROFILE, PROCESSOR_ARCHITECTURE Remarks To list all environment variables in your system: Environment.GetEnvironmentVariables() These are the environment variables, not the properties listed at Environment Class on MSDN Example log file for 32 bits systems in folder 32 and otherwise in folder 64 <target xsi:type=\"File\" name=\"file1\" fileName=\"c:\\temp\\${when:when='${environment:PROCESSOR_ARCHITECTURE}'='X86':inner=32:else=64}\\file.log\" />","title":"Environment layout renderer"},{"location":"Environment-layout-renderer/#configuration-syntax","text":"${environment:variable=String}","title":"Configuration Syntax"},{"location":"Environment-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Environment-layout-renderer/#rendering-options","text":"variable - Name of the environment variable. Required. Examples: Path, TMP, USERPROFILE, PROCESSOR_ARCHITECTURE","title":"Rendering Options"},{"location":"Environment-layout-renderer/#remarks","text":"To list all environment variables in your system: Environment.GetEnvironmentVariables() These are the environment variables, not the properties listed at Environment Class on MSDN","title":"Remarks"},{"location":"Environment-layout-renderer/#example","text":"log file for 32 bits systems in folder 32 and otherwise in folder 64 <target xsi:type=\"File\" name=\"file1\" fileName=\"c:\\temp\\${when:when='${environment:PROCESSOR_ARCHITECTURE}'='X86':inner=32:else=64}\\file.log\" />","title":"Example"},{"location":"Environment-specific-NLog-Logging-Configuration/","text":"Deploy NLog configuration file NLog scans for its configuration file at multiple file locations . By making sure the installer-process deploys the environment specific NLog configuration-file to the install-folder, then NLog will load it automatically. There also exists XML transformation tools, that can take a single XML-file and transform it to an environment-specific result-file. Alternative approach is having a basic NLog.config file, that includes environment-specific-overrides like this: <nlog> <variable name=\"flushTimeout\" value=\"60000\" /> <include file=\"nlog.local.config\" ignoreErrors=\"true\" /> <targets> <target timeout=\"${flushTimeout}\" /> </targets> </nlog> And then deploy nlog.local.config that only contains the environment-specific overrides: <nlog> <variable name=\"flushTimeout\" value=\"30000\" /> </nlog> Include NLog configuration file If the installer-process cannot decide what NLog configuration-file to deploy, then one can consider using the include-feature of the NLog configuration-file. Then one can have a basic NLog.config with the following contents: <nlog> <include file=\"nlog_${environment:DOTNET_ENVIRONMENT}.config\" ignoreErrors=\"true\" /> </nlog> It is also possible to setup NLog Global Diagnostic Context (GDC) and use ${gdc:Environment} inside the include=\"...\" . Make sure to make the setup before creating the first NLog Logger (as it will automatically load the NLog-configuration). Setup with LoadConfigurationFromAppSettings When using NLog.Web.AspNetCore then it is recommended to setup NLog Logging configuration early like this: var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); logger.Debug(\"init main\"); This will automatically make NLog check these additional file-locations: - Looks for \"NLog\"-section in the appsettings.json file (with override from appsettings.Production.json or environment variables) - Looks for nlog.{environment}.config file, where {environment} can be specified as input-parameter to LoadConfigurationFromAppSettings() or automatically extracted from the machine environment-variables (Ex. DOTNET_ENVIRONMENT ) AppSettings.Json NLog configuration NLog configuration can be loaded from appsettings.json , that allows environment specific overrides. Microsoft Extension Configuration System supports overrides of the default appsettings.json (Ex. appsettings.Production.json or environment variables) Explict load NLog configuration It is possible to skip the automatic loading of NLog configuration by just explicit assigning the NLog configuration. Then one can load the configuration from any file-path: NLog.LogManager.Setup().LoadConfigurationFromFile(\"D:/Config/NLog.LIVE.config\"); Or load NLog configuration as XML-string, that have been retrieved from remote location/database: NLog.LogManager.Setup().LoadConfigurationFromXml(xmlString); See also: Explicit-NLog-configuration-loading Conditional NLog Target filters Instead of maintaining multiple NLog configuration files, then one can consider just have a single NLog.config with conditional target output. <nlog> <variable name=\"myLevel\" value=\"Warn\" /> <rules> <logger minLevel=\"${var:myLevel}\" writeTo=\"live_target\" /> </rules> </nlog> Then depending on the application environment then relevant targets output will be enabled. Ex: #if DEBUG LogManager.Configuration.Variables[\"myLevel\"] = \"Off\"; LogManager.ReconfigExistingLoggers(); // Explicit refresh of Layouts and updates active Logger-objects #endif See also: Semi Dynamic Routing Rules Conditional NLog Target configuration Instead of maintaining multiple NLog configuration files, then one can often use Layouts for NLog Target configuration values. This allows you to place environment specific Urls / API-keys / etc. in environment-specific configuration-files (or other places). ${configsetting} - From appsettings.json (with override from appsettings.Production.json or environment variables) ${appsetting} - From app.config with .NET Framework. ${environment} - From machine environment variables. ${gdc} - From NLog Global Diagnostic Context (GDC), that can be assigned at early stage in the application.","title":"Environment specific NLog Logging Configuration"},{"location":"Environment-specific-NLog-Logging-Configuration/#deploy-nlog-configuration-file","text":"NLog scans for its configuration file at multiple file locations . By making sure the installer-process deploys the environment specific NLog configuration-file to the install-folder, then NLog will load it automatically. There also exists XML transformation tools, that can take a single XML-file and transform it to an environment-specific result-file. Alternative approach is having a basic NLog.config file, that includes environment-specific-overrides like this: <nlog> <variable name=\"flushTimeout\" value=\"60000\" /> <include file=\"nlog.local.config\" ignoreErrors=\"true\" /> <targets> <target timeout=\"${flushTimeout}\" /> </targets> </nlog> And then deploy nlog.local.config that only contains the environment-specific overrides: <nlog> <variable name=\"flushTimeout\" value=\"30000\" /> </nlog>","title":"Deploy NLog configuration file"},{"location":"Environment-specific-NLog-Logging-Configuration/#include-nlog-configuration-file","text":"If the installer-process cannot decide what NLog configuration-file to deploy, then one can consider using the include-feature of the NLog configuration-file. Then one can have a basic NLog.config with the following contents: <nlog> <include file=\"nlog_${environment:DOTNET_ENVIRONMENT}.config\" ignoreErrors=\"true\" /> </nlog> It is also possible to setup NLog Global Diagnostic Context (GDC) and use ${gdc:Environment} inside the include=\"...\" . Make sure to make the setup before creating the first NLog Logger (as it will automatically load the NLog-configuration).","title":"Include NLog configuration file"},{"location":"Environment-specific-NLog-Logging-Configuration/#setup-with-loadconfigurationfromappsettings","text":"When using NLog.Web.AspNetCore then it is recommended to setup NLog Logging configuration early like this: var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); logger.Debug(\"init main\"); This will automatically make NLog check these additional file-locations: - Looks for \"NLog\"-section in the appsettings.json file (with override from appsettings.Production.json or environment variables) - Looks for nlog.{environment}.config file, where {environment} can be specified as input-parameter to LoadConfigurationFromAppSettings() or automatically extracted from the machine environment-variables (Ex. DOTNET_ENVIRONMENT )","title":"Setup with LoadConfigurationFromAppSettings"},{"location":"Environment-specific-NLog-Logging-Configuration/#appsettingsjson-nlog-configuration","text":"NLog configuration can be loaded from appsettings.json , that allows environment specific overrides. Microsoft Extension Configuration System supports overrides of the default appsettings.json (Ex. appsettings.Production.json or environment variables)","title":"AppSettings.Json NLog configuration"},{"location":"Environment-specific-NLog-Logging-Configuration/#explict-load-nlog-configuration","text":"It is possible to skip the automatic loading of NLog configuration by just explicit assigning the NLog configuration. Then one can load the configuration from any file-path: NLog.LogManager.Setup().LoadConfigurationFromFile(\"D:/Config/NLog.LIVE.config\"); Or load NLog configuration as XML-string, that have been retrieved from remote location/database: NLog.LogManager.Setup().LoadConfigurationFromXml(xmlString); See also: Explicit-NLog-configuration-loading","title":"Explict load NLog configuration"},{"location":"Environment-specific-NLog-Logging-Configuration/#conditional-nlog-target-filters","text":"Instead of maintaining multiple NLog configuration files, then one can consider just have a single NLog.config with conditional target output. <nlog> <variable name=\"myLevel\" value=\"Warn\" /> <rules> <logger minLevel=\"${var:myLevel}\" writeTo=\"live_target\" /> </rules> </nlog> Then depending on the application environment then relevant targets output will be enabled. Ex: #if DEBUG LogManager.Configuration.Variables[\"myLevel\"] = \"Off\"; LogManager.ReconfigExistingLoggers(); // Explicit refresh of Layouts and updates active Logger-objects #endif See also: Semi Dynamic Routing Rules","title":"Conditional NLog Target filters"},{"location":"Environment-specific-NLog-Logging-Configuration/#conditional-nlog-target-configuration","text":"Instead of maintaining multiple NLog configuration files, then one can often use Layouts for NLog Target configuration values. This allows you to place environment specific Urls / API-keys / etc. in environment-specific configuration-files (or other places). ${configsetting} - From appsettings.json (with override from appsettings.Production.json or environment variables) ${appsetting} - From app.config with .NET Framework. ${environment} - From machine environment variables. ${gdc} - From NLog Global Diagnostic Context (GDC), that can be assigned at early stage in the application.","title":"Conditional NLog Target configuration"},{"location":"Event-Context-Layout-Renderer/","text":"Log event property data. Platforms Supported: All Configuration Syntax ${event-properties:item=MyValue} Note that ${event-properties} syntax replaces the now deprecated ${event-context} syntax. Parameters Rendering Options item - Name of the item (required) Example In your C# code, create an event and add an element to the Properties dictionary (or the deprecated Context dictionary): ... Logger log = LogManager.GetCurrentClassLogger(); LogEventInfo theEvent = new LogEventInfo(LogLevel.Debug, \"\", \"Pass my custom value\"); theEvent.Properties[\"MyValue\"] = \"My custom string\"; // deprecated theEvent.Context[\"TheAnswer\"] = 42; log.Log(theEvent); ... And in your NLog.config file: ${event-properties:item=MyValue} -- renders \"My custom string\" ${event-properties:item=TheAnswer} -- renders \"42\"","title":"Event Context Layout Renderer"},{"location":"Event-Context-Layout-Renderer/#configuration-syntax","text":"${event-properties:item=MyValue} Note that ${event-properties} syntax replaces the now deprecated ${event-context} syntax.","title":"Configuration Syntax"},{"location":"Event-Context-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Event-Context-Layout-Renderer/#rendering-options","text":"item - Name of the item (required)","title":"Rendering Options"},{"location":"Event-Context-Layout-Renderer/#example","text":"In your C# code, create an event and add an element to the Properties dictionary (or the deprecated Context dictionary): ... Logger log = LogManager.GetCurrentClassLogger(); LogEventInfo theEvent = new LogEventInfo(LogLevel.Debug, \"\", \"Pass my custom value\"); theEvent.Properties[\"MyValue\"] = \"My custom string\"; // deprecated theEvent.Context[\"TheAnswer\"] = 42; log.Log(theEvent); ... And in your NLog.config file: ${event-properties:item=MyValue} -- renders \"My custom string\" ${event-properties:item=TheAnswer} -- renders \"42\"","title":"Example"},{"location":"EventProperties-Layout-Renderer/","text":"Log event properties data. This has the same implementation as ${event-context} , but the latter is deprecated. Platforms Supported: All To log all properties, use ${all-event-properties} . See also NLog Context . Configuration Syntax ${event-properties:item=String:culture=String:format=String:objectpath=String} Parameters item - Name of the item. Required. ignoreCase - Name lookup should be case-insensitive. Default true . Introduced in NLog 5.0 objectpath - property path if the value is an object. Nested properties are supported. Examples: Id , Details.Title . Introduced in NLog 4.6.3 Rendering Options culture - The culture used for rendering. Introduced in NLog 4.1. Default value is CultureInfo.InvariantCulture format - Format for conversion from object to string. Introduced in NLog 4.1. @ means serialize object properties into Json-format. Introduced in NLog 4.5. Example Structured logging Properties NLog 4.5+ logger.Info(\"Order {orderid} created for {user}\", 42, \"Kenny\"); and in your NLog.config file: ${event-properties:item=orderId} -- renders \"42\" ${event-properties:item=user} -- renders \"Kenny\" LogEvent Properties Dictionary In C# class, create an event and add an element to the Properties dictionary (or the deprecated Context dictionary): ... Logger logger = LogManager.GetCurrentClassLogger(); LogEventInfo theEvent = new LogEventInfo(LogLevel.Debug, null, \"Pass my custom value\"); theEvent.Properties[\"MyValue\"] = \"My custom string\"; theEvent.Properties[\"MyDateTimeValue\"] = new DateTime(2015, 08, 30, 11, 26, 50); theEvent.Properties[\"MyDateTimeValueWithCulture\"] = new DateTime(2015, 08, 30, 11, 26, 50); theEvent.Properties[\"MyDateTimeValueWithCultureAndFormat\"] = new DateTime(2015, 08, 30, 11, 26, 50); logger.Log(theEvent); ... and in your NLog.config file: ${event-properties:item=MyValue} -- renders \"My custom string\" ${event-properties:MyDateTimeValue:format=yyyy-M-dd}\"; -- renders \"2015-8-30\" ${event-properties:MyDateTimeValueWithCulture:culture=en-US} -- renders \"8/30/2015 11:26:50 AM\" ${event-properties:MyDateTimeValueWithCultureAndFormat:format=yyyy-M-dd HH:mm:ss:culture=en-US} -- renders \"2015-8-30 11:26:50\" Logger WithProperty Introduced in NLog 4.6.3, where Logger have the method WithProperty . The Logger can be enriched, so it automatically injects one (or more) log-event properties for all log-events being written by the Logger. This can work as an alternative to ScopeContext properties . Examples: // WithProperty will return a new unique Logger with the newly added property var newLogger = logger.WithProperty(\"myProperty\", myValue); newLogger.Info(\"hello\"); newLogger.Info(\"again\"); // will also have \"myProperty\" logger.Info(\"hi\"); // is not affected Logger FLuent API NLog 5.0 provides Fluent-Logger-API for building LogEvents: _logger.ForInfoEvent() .Message(\"This is a fluent message {0}.\", \"test\") .Property(\"PropertyName\", \"PropertyValue\") .Log(); Fallback to default value When LogEvent Property cannot be found (or has blank value), then one use whenEmpty to specify fallback value: ${event-properties:EventId:whenEmpty=42} Objectpath Examples with usage of Objectpath . NLog 4.6.3+ Set the property: var property1 = new { Id = 1, Name = \"test\", Nested = new { Id = 3 } }; var logger = LogManager.GetLogger(\"logger1\"); // e.g. with WithProperty logger.WithProperty(\"prop1\", property1 ).Info(\"test message\"); // or with structured logging logger.Info(\"test Message with {prop1}\", property1); config examples: ${event-properties:prop1} -- renders: { Id = 1, Name = test, Nested = { Id = 3 } } ${event-properties:prop1:objectpath=Id} -- renders: 1 ${event-properties:prop1:objectpath=Nested.Id} -- renders: 3 See also Transform captured properties","title":"EventProperties Layout Renderer"},{"location":"EventProperties-Layout-Renderer/#configuration-syntax","text":"${event-properties:item=String:culture=String:format=String:objectpath=String}","title":"Configuration Syntax"},{"location":"EventProperties-Layout-Renderer/#parameters","text":"item - Name of the item. Required. ignoreCase - Name lookup should be case-insensitive. Default true . Introduced in NLog 5.0 objectpath - property path if the value is an object. Nested properties are supported. Examples: Id , Details.Title . Introduced in NLog 4.6.3","title":"Parameters"},{"location":"EventProperties-Layout-Renderer/#rendering-options","text":"culture - The culture used for rendering. Introduced in NLog 4.1. Default value is CultureInfo.InvariantCulture format - Format for conversion from object to string. Introduced in NLog 4.1. @ means serialize object properties into Json-format. Introduced in NLog 4.5.","title":"Rendering Options"},{"location":"EventProperties-Layout-Renderer/#example","text":"","title":"Example"},{"location":"EventProperties-Layout-Renderer/#structured-logging-properties","text":"NLog 4.5+ logger.Info(\"Order {orderid} created for {user}\", 42, \"Kenny\"); and in your NLog.config file: ${event-properties:item=orderId} -- renders \"42\" ${event-properties:item=user} -- renders \"Kenny\"","title":"Structured logging Properties"},{"location":"EventProperties-Layout-Renderer/#logevent-properties-dictionary","text":"In C# class, create an event and add an element to the Properties dictionary (or the deprecated Context dictionary): ... Logger logger = LogManager.GetCurrentClassLogger(); LogEventInfo theEvent = new LogEventInfo(LogLevel.Debug, null, \"Pass my custom value\"); theEvent.Properties[\"MyValue\"] = \"My custom string\"; theEvent.Properties[\"MyDateTimeValue\"] = new DateTime(2015, 08, 30, 11, 26, 50); theEvent.Properties[\"MyDateTimeValueWithCulture\"] = new DateTime(2015, 08, 30, 11, 26, 50); theEvent.Properties[\"MyDateTimeValueWithCultureAndFormat\"] = new DateTime(2015, 08, 30, 11, 26, 50); logger.Log(theEvent); ... and in your NLog.config file: ${event-properties:item=MyValue} -- renders \"My custom string\" ${event-properties:MyDateTimeValue:format=yyyy-M-dd}\"; -- renders \"2015-8-30\" ${event-properties:MyDateTimeValueWithCulture:culture=en-US} -- renders \"8/30/2015 11:26:50 AM\" ${event-properties:MyDateTimeValueWithCultureAndFormat:format=yyyy-M-dd HH:mm:ss:culture=en-US} -- renders \"2015-8-30 11:26:50\"","title":"LogEvent Properties Dictionary"},{"location":"EventProperties-Layout-Renderer/#logger-withproperty","text":"Introduced in NLog 4.6.3, where Logger have the method WithProperty . The Logger can be enriched, so it automatically injects one (or more) log-event properties for all log-events being written by the Logger. This can work as an alternative to ScopeContext properties . Examples: // WithProperty will return a new unique Logger with the newly added property var newLogger = logger.WithProperty(\"myProperty\", myValue); newLogger.Info(\"hello\"); newLogger.Info(\"again\"); // will also have \"myProperty\" logger.Info(\"hi\"); // is not affected","title":"Logger WithProperty"},{"location":"EventProperties-Layout-Renderer/#logger-fluent-api","text":"NLog 5.0 provides Fluent-Logger-API for building LogEvents: _logger.ForInfoEvent() .Message(\"This is a fluent message {0}.\", \"test\") .Property(\"PropertyName\", \"PropertyValue\") .Log();","title":"Logger FLuent API"},{"location":"EventProperties-Layout-Renderer/#fallback-to-default-value","text":"When LogEvent Property cannot be found (or has blank value), then one use whenEmpty to specify fallback value: ${event-properties:EventId:whenEmpty=42}","title":"Fallback to default value"},{"location":"EventProperties-Layout-Renderer/#objectpath","text":"Examples with usage of Objectpath . NLog 4.6.3+ Set the property: var property1 = new { Id = 1, Name = \"test\", Nested = new { Id = 3 } }; var logger = LogManager.GetLogger(\"logger1\"); // e.g. with WithProperty logger.WithProperty(\"prop1\", property1 ).Info(\"test message\"); // or with structured logging logger.Info(\"test Message with {prop1}\", property1); config examples: ${event-properties:prop1} -- renders: { Id = 1, Name = test, Nested = { Id = 3 } } ${event-properties:prop1:objectpath=Id} -- renders: 1 ${event-properties:prop1:objectpath=Nested.Id} -- renders: 3 See also Transform captured properties","title":"Objectpath"},{"location":"Eventlog-target/","text":"Writes log message to the Windows Event Log. Platforms Supported: Limited Requires Windows and .NET Standard / .NET Core must install NLog.WindowsEventLog package -nuget-package. Configuration Syntax <targets> <target xsi:type=\"EventLog\" name=\"String\" layout=\"Layout\" machineName=\"String\" source=\"Layout\" category=\"Layout\" eventId=\"Layout\" log=\"String\" maxKilobytes=\"long\" maxMessageLength=\"Integer\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} . Note: max size of 31839 characters (limitation of the EventLog API) Event Log Options machineName - Name of the machine on which Event Log service is running. Default: . source - Value to be used as the event Source. By default this is the friendly name of the current AppDomain. Before NLog 4.0 then datatype was normal string without NLog Layout-support. category - Layout that renders event Category. The categories must be predefined for the specified source and needs to be numeric. Before NLog 5.0 then datatype was standard Layout, instead of typed-Layout. eventId - Layout that renders event ID. Before NLog 5.0 then datatype was standard Layout, instead of typed-Layout. eventLogEntryType - Layout that renders EventLogEntryType . Default: Use LogLevel Before NLog 5.0 then datatype was standard Layout, instead of typed-Layout. log - Name of the Event Log to write to. This can be System, Application or any user-defined name. Default: Application MaxMessageLength - The message length limit to write to the Event Log. There are various message length limit that depends on the OS. Therefore, be careful for the value. Default: 16,384. If given value is zero or negative, then Exception will be thrown. Introduced in NLog 4.3. onOverflow - Action to take when a log message is larger than the MaxMessageLength option. Available actions are: Truncate - Truncates the message before writing to the Event Log. This is the default. Split - Splits the message and writes multiple entries to the Event Log. Warning: the message layout will be spread across multiple Event Log entries; if there is an application reading and parsing the Event Log, split messages will not have the expected layout of a log entry. Discard - Discards of the message. It will not be written to the Event Log. MaxKilobytes - maximum Event log size in kilobytes. null is default (512KB). Value should be multiples of 64 and between 64 and 4194240. Note, this requires admin rights. Introduced in NLog 4.4.10 Notes When writing to the Windows EventLog, the EventLog-Source must be registered. NLog will automatically attempt to register the EventLog-Source if the application is running with necessary permissions. Alternatively, one must explicitly perform the EventLog-Source registration during application install. - Installing Targets will only register EventLog-Source if source is static (Not using layout renderers). - A simple PowerShell command can be used to register an EventLog-Source (run PowerShell as Administrator): PowerShell New-EventLog -LogName Application -Source \"MySourceName\" NOTE : It may be necessary to restart the Windows Event Log Service (or, alternatively, reboot the computer) after making a change to the EventLog-Source registration in order for the change to take effect. Notice a specific EventLog-source can only be registered for writing to a single named EventLog. Windows gives the illusion of multiple EventLogs, but all LogEvents are stored in the same blob where the EventLog-name is more like a category. The Windows Registry Database controls where the LogEvents from registered EventLog-source should be shown. If changing an EventLog-source to write to a different EventLog, then the change will not be applied until having restarted Windows (or restarted the EventLog-Windows-Service). The Event Log has a limit in the number of bytes in a message. From MSDN : The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista). Example <targets> <target xsi:type=\"EventLog\" name=\"EventLogTarget\" source=\"MyApplicationName\" eventId=\"${event-properties:EventId:whenEmpty=0}\" layout=\"${message}${newline}${exception:format=ToString}\" /> </targets> <rules> <logger name=\"ApplicationEventLog\" writeTo=\"EventLogTarget\" /> </rules> NLog.LogManager.GetLogger(\"ApplicationEventLog\").WithProperty(\"EventdId\", 42).Error(\"Kilroy was here\");","title":"Eventlog target"},{"location":"Eventlog-target/#configuration-syntax","text":"<targets> <target xsi:type=\"EventLog\" name=\"String\" layout=\"Layout\" machineName=\"String\" source=\"Layout\" category=\"Layout\" eventId=\"Layout\" log=\"String\" maxKilobytes=\"long\" maxMessageLength=\"Integer\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Eventlog-target/#parameters","text":"","title":"Parameters"},{"location":"Eventlog-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Eventlog-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} . Note: max size of 31839 characters (limitation of the EventLog API)","title":"Layout Options"},{"location":"Eventlog-target/#event-log-options","text":"machineName - Name of the machine on which Event Log service is running. Default: . source - Value to be used as the event Source. By default this is the friendly name of the current AppDomain. Before NLog 4.0 then datatype was normal string without NLog Layout-support. category - Layout that renders event Category. The categories must be predefined for the specified source and needs to be numeric. Before NLog 5.0 then datatype was standard Layout, instead of typed-Layout. eventId - Layout that renders event ID. Before NLog 5.0 then datatype was standard Layout, instead of typed-Layout. eventLogEntryType - Layout that renders EventLogEntryType . Default: Use LogLevel Before NLog 5.0 then datatype was standard Layout, instead of typed-Layout. log - Name of the Event Log to write to. This can be System, Application or any user-defined name. Default: Application MaxMessageLength - The message length limit to write to the Event Log. There are various message length limit that depends on the OS. Therefore, be careful for the value. Default: 16,384. If given value is zero or negative, then Exception will be thrown. Introduced in NLog 4.3. onOverflow - Action to take when a log message is larger than the MaxMessageLength option. Available actions are: Truncate - Truncates the message before writing to the Event Log. This is the default. Split - Splits the message and writes multiple entries to the Event Log. Warning: the message layout will be spread across multiple Event Log entries; if there is an application reading and parsing the Event Log, split messages will not have the expected layout of a log entry. Discard - Discards of the message. It will not be written to the Event Log. MaxKilobytes - maximum Event log size in kilobytes. null is default (512KB). Value should be multiples of 64 and between 64 and 4194240. Note, this requires admin rights. Introduced in NLog 4.4.10","title":"Event Log Options"},{"location":"Eventlog-target/#notes","text":"When writing to the Windows EventLog, the EventLog-Source must be registered. NLog will automatically attempt to register the EventLog-Source if the application is running with necessary permissions. Alternatively, one must explicitly perform the EventLog-Source registration during application install. - Installing Targets will only register EventLog-Source if source is static (Not using layout renderers). - A simple PowerShell command can be used to register an EventLog-Source (run PowerShell as Administrator): PowerShell New-EventLog -LogName Application -Source \"MySourceName\" NOTE : It may be necessary to restart the Windows Event Log Service (or, alternatively, reboot the computer) after making a change to the EventLog-Source registration in order for the change to take effect. Notice a specific EventLog-source can only be registered for writing to a single named EventLog. Windows gives the illusion of multiple EventLogs, but all LogEvents are stored in the same blob where the EventLog-name is more like a category. The Windows Registry Database controls where the LogEvents from registered EventLog-source should be shown. If changing an EventLog-source to write to a different EventLog, then the change will not be applied until having restarted Windows (or restarted the EventLog-Windows-Service). The Event Log has a limit in the number of bytes in a message. From MSDN : The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).","title":"Notes"},{"location":"Eventlog-target/#example","text":"<targets> <target xsi:type=\"EventLog\" name=\"EventLogTarget\" source=\"MyApplicationName\" eventId=\"${event-properties:EventId:whenEmpty=0}\" layout=\"${message}${newline}${exception:format=ToString}\" /> </targets> <rules> <logger name=\"ApplicationEventLog\" writeTo=\"EventLogTarget\" /> </rules> NLog.LogManager.GetLogger(\"ApplicationEventLog\").WithProperty(\"EventdId\", 42).Error(\"Kilroy was here\");","title":"Example"},{"location":"Examples/","text":"Using NLog as .NET Core and ASP.NET Core logging provider See these tutorials is for ASP.NET Core: For ASP.NET Core 5, check Getting started with ASP.NET Core 5 For ASP.NET Core 3, check Getting started with ASP.NET Core 3 For ASP.NET Core 2, check Getting started with ASP.NET Core 2 For ASP.NET Core 1? Go here! Using NLog with Growl for Windows Ryan Farley has a great article on how to use NLog with Growl for Windows Changing log file name at runtime using NLog.Targets; ... FileTarget target = LogManager.Configuration.FindTargetByName<FileTarget>(targetName); target.FileName = filename; Note that it is often easier to create the file name with a combination of layout-renderers . See also Configure from code Using NLog with Autofac - ASP.NET Web API 2 This example is using a nuget package Autofac.Extras.Nlog that takes care of creating the Autofac module needed to wire up the dependency in the Web API. First, add an nlog section to the configSections in the Web.config: <configSections> <section name=\"nlog\" type=\"NLog.Config.ConfigSectionHandler, NLog\" /> </configSections> Then, in the Global.asax.cs (or Startup.cs, depending where Autofac is configured) register the module provided by the Autofac.Extras.Nlog nuget package: var builder = new ContainerBuilder(); ... builder.RegisterModule<NLogModule>(); Nothing extra is needed to configure the NLog targets . This example uses constructor injection but Autofac.Extras.Nlog supports property and service locator injection as well. using System; using System.Net; using System.Net.Http; using System.Threading.Tasks; using Autofac.Extras.NLog; using Microsoft.AspNet.Identity; public class UserService: IUserService { private readonly IUserStore _userStore; private readonly ILogger _logger; public UserService(IUserStore userStore, ILogger logger) { _userStore = userStore; _logger = logger; } ..... } Happy logging!","title":"Examples"},{"location":"Examples/#using-nlog-as-net-core-and-aspnet-core-logging-provider","text":"See these tutorials is for ASP.NET Core: For ASP.NET Core 5, check Getting started with ASP.NET Core 5 For ASP.NET Core 3, check Getting started with ASP.NET Core 3 For ASP.NET Core 2, check Getting started with ASP.NET Core 2 For ASP.NET Core 1? Go here!","title":"Using NLog as .NET Core and ASP.NET Core logging provider"},{"location":"Examples/#using-nlog-with-growl-for-windows","text":"Ryan Farley has a great article on how to use NLog with Growl for Windows","title":"Using NLog with Growl for Windows"},{"location":"Examples/#changing-log-file-name-at-runtime","text":"using NLog.Targets; ... FileTarget target = LogManager.Configuration.FindTargetByName<FileTarget>(targetName); target.FileName = filename; Note that it is often easier to create the file name with a combination of layout-renderers . See also Configure from code","title":"Changing log file name at runtime"},{"location":"Examples/#using-nlog-with-autofac-aspnet-web-api-2","text":"This example is using a nuget package Autofac.Extras.Nlog that takes care of creating the Autofac module needed to wire up the dependency in the Web API. First, add an nlog section to the configSections in the Web.config: <configSections> <section name=\"nlog\" type=\"NLog.Config.ConfigSectionHandler, NLog\" /> </configSections> Then, in the Global.asax.cs (or Startup.cs, depending where Autofac is configured) register the module provided by the Autofac.Extras.Nlog nuget package: var builder = new ContainerBuilder(); ... builder.RegisterModule<NLogModule>(); Nothing extra is needed to configure the NLog targets . This example uses constructor injection but Autofac.Extras.Nlog supports property and service locator injection as well. using System; using System.Net; using System.Net.Http; using System.Threading.Tasks; using Autofac.Extras.NLog; using Microsoft.AspNet.Identity; public class UserService: IUserService { private readonly IUserStore _userStore; private readonly ILogger _logger; public UserService(IUserStore userStore, ILogger logger) { _userStore = userStore; _logger = logger; } ..... } Happy logging!","title":"Using NLog with Autofac - ASP.NET Web API 2"},{"location":"Exception-layout-renderer/","text":"Exception information provided together with the LogEvent. See also How to properly log exceptions . Platforms Supported: All Configuration Syntax ${exception:format=String:innerFormat=String:maxInnerExceptionLevel=Integer:innerExceptionSeparator=String :separator=String:exceptionDataSeparator=string} Parameters Rendering Options format - Format of the output. Default: ToString,Data . Must be a comma-separated list of exception properties: Notice before NLog 5.0, then default was just message . Message - Serialize Exception.Message Type - Serialize Exception.GetType().FullName ShortType - Serialize Exception.GetType().Name ToString - Serialize Exception.ToString() Method - Serialize Exception.TargetSite StackTrace - Serialize Exception.StackTrace Data - Serialize the dictionary Exception.Data Source - Serialize Exception.Source . Introduced in NLog 4.6.7 TargetSite - Serialize Exception.TargetSite . Introduced in NLog 4.6.7 HResult - Serialize Exception.HResult . Introduced in NLog 4.6.8 Properties - Appends any additional properties that specific type of Exception might have. Introduced in NLog 4.6.8 @ - Serialize all Exception-properties into Json-format. Introduced in NLog 4.5 innerFormat - Format of the output of inner exceptions. Must be a comma-separated list of exception properties (As shown above). This parameter value is case-insensitive. maxInnerExceptionLevel - Maximum number of inner exceptions to include in the output. By default inner exceptions are not enabled for compatibility with NLog 1.0. Note that the format @ serializes InnerException like any other property. Integer. Default: 0 separator - Separator used to concatenate parts specified in the Format. Default: single space innerExceptionSeparator - Separator between inner exceptions. Default: new line exceptionDataSeparator - Separator used to concatenate the exception data parts. Default: ; Introduced in NLog 4.3.9 baseException - Render innermost Exception from Exception.GetBaseException(). Boolean. Default: false Introduced in NLog 4.7.1 flattenException - Automatically flatten AggregateException from async operations to extract its inner exceptions. Boolean. Default: true Introduced in NLog 4.7.6 Notes If symbol symbol information is not available, then Exception.ToString() will not output source-code line-numbers. Symbol information from PDB files must be deployed with the application to retrieve and output source-code line-number. For applications compiled in release mode, then inlining can occur and cause \"unexpected\" line-numbers. Examples Log only message ${exception:format=message} Log full (without Data) ToString will also print the innerException: ${exception:format=toString} Log full (including Data) Also print exception data, e.g. var ex = new Exception(); ex.Data.Add(\"data1\", \"val2\"); throw ex; ${exception:format=toString,Data} Log exception as JSON the @ format recursively serializes the entire exception hierarchy; combining it with maxInnerExceptionLevel and innerExceptionSeparator won't do what you want. To get the entire exception hierarchy including innerexceptions as nested objects, just specify :format=@ . ${exception:format=@} Custom Exception Serialization NLog 4.7 allows you to override the object reflection for certain object-types. This can be useful for objects with dangerous properties or complex properties. LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<System.Net.WebException>(ex => new { Type = ex.GetType().ToString(), Message = ex.Message, StackTrace = ex.StackTrace, Source = ex.Source, InnerException = ex.InnerException, Status = ex.Status, Response = ex.Response.ToString(), // Call your custom method to render stream as string }) ); This can then be used together with: ${exception:format=ToString,Properties,Data} Or like this for generating JSON: ${exception:format=@}","title":"Exception layout renderer"},{"location":"Exception-layout-renderer/#configuration-syntax","text":"${exception:format=String:innerFormat=String:maxInnerExceptionLevel=Integer:innerExceptionSeparator=String :separator=String:exceptionDataSeparator=string}","title":"Configuration Syntax"},{"location":"Exception-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Exception-layout-renderer/#rendering-options","text":"format - Format of the output. Default: ToString,Data . Must be a comma-separated list of exception properties: Notice before NLog 5.0, then default was just message . Message - Serialize Exception.Message Type - Serialize Exception.GetType().FullName ShortType - Serialize Exception.GetType().Name ToString - Serialize Exception.ToString() Method - Serialize Exception.TargetSite StackTrace - Serialize Exception.StackTrace Data - Serialize the dictionary Exception.Data Source - Serialize Exception.Source . Introduced in NLog 4.6.7 TargetSite - Serialize Exception.TargetSite . Introduced in NLog 4.6.7 HResult - Serialize Exception.HResult . Introduced in NLog 4.6.8 Properties - Appends any additional properties that specific type of Exception might have. Introduced in NLog 4.6.8 @ - Serialize all Exception-properties into Json-format. Introduced in NLog 4.5 innerFormat - Format of the output of inner exceptions. Must be a comma-separated list of exception properties (As shown above). This parameter value is case-insensitive. maxInnerExceptionLevel - Maximum number of inner exceptions to include in the output. By default inner exceptions are not enabled for compatibility with NLog 1.0. Note that the format @ serializes InnerException like any other property. Integer. Default: 0 separator - Separator used to concatenate parts specified in the Format. Default: single space innerExceptionSeparator - Separator between inner exceptions. Default: new line exceptionDataSeparator - Separator used to concatenate the exception data parts. Default: ; Introduced in NLog 4.3.9 baseException - Render innermost Exception from Exception.GetBaseException(). Boolean. Default: false Introduced in NLog 4.7.1 flattenException - Automatically flatten AggregateException from async operations to extract its inner exceptions. Boolean. Default: true Introduced in NLog 4.7.6","title":"Rendering Options"},{"location":"Exception-layout-renderer/#notes","text":"If symbol symbol information is not available, then Exception.ToString() will not output source-code line-numbers. Symbol information from PDB files must be deployed with the application to retrieve and output source-code line-number. For applications compiled in release mode, then inlining can occur and cause \"unexpected\" line-numbers.","title":"Notes"},{"location":"Exception-layout-renderer/#examples","text":"","title":"Examples"},{"location":"Exception-layout-renderer/#log-only-message","text":"${exception:format=message}","title":"Log only message"},{"location":"Exception-layout-renderer/#log-full-without-data","text":"ToString will also print the innerException: ${exception:format=toString}","title":"Log full (without Data)"},{"location":"Exception-layout-renderer/#log-full-including-data","text":"Also print exception data, e.g. var ex = new Exception(); ex.Data.Add(\"data1\", \"val2\"); throw ex; ${exception:format=toString,Data}","title":"Log full (including Data)"},{"location":"Exception-layout-renderer/#log-exception-as-json","text":"the @ format recursively serializes the entire exception hierarchy; combining it with maxInnerExceptionLevel and innerExceptionSeparator won't do what you want. To get the entire exception hierarchy including innerexceptions as nested objects, just specify :format=@ . ${exception:format=@}","title":"Log exception as JSON"},{"location":"Exception-layout-renderer/#custom-exception-serialization","text":"NLog 4.7 allows you to override the object reflection for certain object-types. This can be useful for objects with dangerous properties or complex properties. LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<System.Net.WebException>(ex => new { Type = ex.GetType().ToString(), Message = ex.Message, StackTrace = ex.StackTrace, Source = ex.Source, InnerException = ex.InnerException, Status = ex.Status, Response = ex.Response.ToString(), // Call your custom method to render stream as string }) ); This can then be used together with: ${exception:format=ToString,Properties,Data} Or like this for generating JSON: ${exception:format=@}","title":"Custom Exception Serialization"},{"location":"ExceptionData-Layout-Renderer/","text":"Lookup item in Exception.Data -Dictionary from Exception provided together with the LogEvent. See also How to properly log exceptions . Platforms Supported: All (Introduced with NLog 5.0) Configuration Syntax ${exceptiondata:item=String:format=String:BaseException=Boolean} Parameters Item - Item to lookup in Exception.Data Format - Format for conversion from object to string ( @ means serialize object properties into Json-format) BaseException - Render innermost Exception from Exception.GetBaseException(). Boolean. Default: false","title":"ExceptionData Layout Renderer"},{"location":"ExceptionData-Layout-Renderer/#configuration-syntax","text":"${exceptiondata:item=String:format=String:BaseException=Boolean}","title":"Configuration Syntax"},{"location":"ExceptionData-Layout-Renderer/#parameters","text":"Item - Item to lookup in Exception.Data Format - Format for conversion from object to string ( @ means serialize object properties into Json-format) BaseException - Render innermost Exception from Exception.GetBaseException(). Boolean. Default: false","title":"Parameters"},{"location":"Explicit-NLog-configuration-loading/","text":"\u2139\ufe0f See also Environment specific NLog Logging Configuration Loading NLog configuration from file NLog will automatically scan for configuration files , but sometimes the platform requires explicit configuration loading like this: NLog.LogManager.Configuration = new NLog.Config.XmlLoggingConfiguration(\"nlog.config\"); Loading NLog configuration from string The configuration can also come from standard string like this: var xmlStream = new System.IO.StringReader(xmlString); var xmlReader = System.Xml.XmlReader.Create(xmlStream); NLog.LogManager.Configuration = new NLog.Config.XmlLoggingConfiguration(xmlReader, null); Loading NLog configuration from Xamarin resource You need to put the NLog.config file into the application-project, then edit file's properties - change the build action to embedded resource . public static Stream GetEmbeddedResourceStream(Assembly assembly, string resourceFileName) { var resourcePaths = assembly.GetManifestResourceNames() .Where(x => x.EndsWith(resourceFileName, StringComparison.OrdinalIgnoreCase)) .ToList(); if (resourcePaths.Count == 1) { return assembly.GetManifestResourceStream(resourcePaths.Single()); } return null; } var nlogConfigFile = GetEmbeddedResourceStream(myAssembly, \"NLog.config\"); if (nlogConfigFile != null) { var xmlReader = System.Xml.XmlReader.Create(nlogConfigFile); NLog.LogManager.Configuration = new XmlLoggingConfiguration(xmlReader, null); } NLog v5 introduces this fluent extension-method: NLog.LogManager.Setup().LoadConfigurationFromAssemblyResource(typeof(App).GetTypeInfo().Assembly); Xamarin Android \u26a0\ufe0f NLog v5 will no longer scan the assets folder for NLog.config . Instead consider using Xamarin Assembly Resource With NLog v4 then the NLog.dll built for Xamarin Android would automatically scan the assets folder for NLog.config . If the file name is different, then NLog v4 also supported this: LogManager.Configuration = new XmlLoggingConfiguration(\"assets/someothername.config\"); ```` If using the NLog.dll built for NetStandard in Xamarin, then the Android `assets`-folder is not recognized or scanned. Instead consider using Assembly Resource. To explicly read file from [Android Assets](https://learn.microsoft.com/en-us/xamarin/android/app-fundamentals/resources-in-android/android-assets), then one can do this: ```c# AssetManager assets = this.Assets; var assetStream = assets.Open(\"NLog.config\"); var xmlReader = System.Xml.XmlReader.Create(assetStream); NLog.LogManager.Configuration = new XmlLoggingConfiguration(xmlReader, null);","title":"Explicit NLog configuration loading"},{"location":"Explicit-NLog-configuration-loading/#loading-nlog-configuration-from-file","text":"NLog will automatically scan for configuration files , but sometimes the platform requires explicit configuration loading like this: NLog.LogManager.Configuration = new NLog.Config.XmlLoggingConfiguration(\"nlog.config\");","title":"Loading NLog configuration from file"},{"location":"Explicit-NLog-configuration-loading/#loading-nlog-configuration-from-string","text":"The configuration can also come from standard string like this: var xmlStream = new System.IO.StringReader(xmlString); var xmlReader = System.Xml.XmlReader.Create(xmlStream); NLog.LogManager.Configuration = new NLog.Config.XmlLoggingConfiguration(xmlReader, null);","title":"Loading NLog configuration from string"},{"location":"Explicit-NLog-configuration-loading/#loading-nlog-configuration-from-xamarin-resource","text":"You need to put the NLog.config file into the application-project, then edit file's properties - change the build action to embedded resource . public static Stream GetEmbeddedResourceStream(Assembly assembly, string resourceFileName) { var resourcePaths = assembly.GetManifestResourceNames() .Where(x => x.EndsWith(resourceFileName, StringComparison.OrdinalIgnoreCase)) .ToList(); if (resourcePaths.Count == 1) { return assembly.GetManifestResourceStream(resourcePaths.Single()); } return null; } var nlogConfigFile = GetEmbeddedResourceStream(myAssembly, \"NLog.config\"); if (nlogConfigFile != null) { var xmlReader = System.Xml.XmlReader.Create(nlogConfigFile); NLog.LogManager.Configuration = new XmlLoggingConfiguration(xmlReader, null); } NLog v5 introduces this fluent extension-method: NLog.LogManager.Setup().LoadConfigurationFromAssemblyResource(typeof(App).GetTypeInfo().Assembly);","title":"Loading NLog configuration from Xamarin resource"},{"location":"Explicit-NLog-configuration-loading/#xamarin-android","text":"\u26a0\ufe0f NLog v5 will no longer scan the assets folder for NLog.config . Instead consider using Xamarin Assembly Resource With NLog v4 then the NLog.dll built for Xamarin Android would automatically scan the assets folder for NLog.config . If the file name is different, then NLog v4 also supported this: LogManager.Configuration = new XmlLoggingConfiguration(\"assets/someothername.config\"); ```` If using the NLog.dll built for NetStandard in Xamarin, then the Android `assets`-folder is not recognized or scanned. Instead consider using Assembly Resource. To explicly read file from [Android Assets](https://learn.microsoft.com/en-us/xamarin/android/app-fundamentals/resources-in-android/android-assets), then one can do this: ```c# AssetManager assets = this.Assets; var assetStream = assets.Open(\"NLog.config\"); var xmlReader = System.Xml.XmlReader.Create(assetStream); NLog.LogManager.Configuration = new XmlLoggingConfiguration(xmlReader, null);","title":"Xamarin Android"},{"location":"Extending-NLog/","text":"The following article has related news post: Extending NLog is... easy! If one needs to capture additional context for target output, then one can create own custom NLog LayoutRenderer . But usually most people will just make use of NLog LogEvent Properties for providing custom context. Ensure also to check the available layoutrenderers . If one needs to redirect output to a different output target destination, then one can create own custom NLog Target . But usually most people will just make use of NLog Network-Target or NLog WebService-Target and override the NLog Layout to match the payload format. Ensure also to check the available targets . Write Extensions How to write a custom target How to write a custom layout renderer Writing custom conditions Properties constraints for custom extensions Custom extension of Logger interface Register Extensions Register your custom component","title":"Extending NLog"},{"location":"Extending-NLog/#write-extensions","text":"How to write a custom target How to write a custom layout renderer Writing custom conditions Properties constraints for custom extensions Custom extension of Logger interface","title":"Write Extensions"},{"location":"Extending-NLog/#register-extensions","text":"Register your custom component","title":"Register Extensions"},{"location":"FAQ/","text":"What is NLog? NLog is a free and open source library which helps to write log messages. Why should I use NLog? I can just do file.WriteLine() or Console.WriteLine() Beside writing to files or console, then NLog can also write to many other targets, like database, email, event viewer, trace etc. Output can be written in standard formats like Json / Csv / Xml or simple plain text with support for structured logging The output can be customized to include extra context like ${threadid} with help from Layout Renderers . NLog can use background threads for asynchronous output writing, so application threads are less impacted by logging. With a simple configuration file you can decide at runtime (after deployment), what to log and where! No need to restart the program or recycle the app pool! Is it free? Yes, it's licensed under the BSD license, so you can use it in commercial (closed source) programs without problems. Show me the magic! Check the tutorial to get started! Just show me a config example voil\u00e0 Why is NLog not working?! Most problems are fixed by following the troubleshooting guide . If you think it's a bug, please check contributing.md and create a GitHub issue ! Is NLog thread safe? Yes NLog provides thread safety: Creating new Logger is threadsafe Writing LogEvents is threadsafe Updating context containers like GDC / ScopeContext is threadsafe Adding new LoggingRules or Targets using LoggingConfiguration.AddRule and ReconfigExistingLoggers is threadsafe Performing Reload of LoggingConfiguration will cause LogEvents from active loggers to be dropped until reload has completed. Changing values of existing rules and targets at run-time isn't thread-safe! Why is trace and debug logs missing in ASP.NET Core? Check your appsettings.json How do I upgrade to NLog 4.x? Check the 4.0 release post , there are some breaking changes. Update all the NLog packages. The latest stable version is recommend. When upgrading from NLog 4.1.0, please the next question. I have trouble updating NLog from 4.1.0 We take semver very serious! Because NLog is strong named, it's important to keep the assembly version of all major versions the same, otherwise every library build on 4.0.0 should be recompiled for every other 4.x release (4.1, 4.2 etc) - which is unwanted because of semver. In NLog 4.1.0 there was a mistake in the assembly version, which has been fixed in 4.1.1. Upgrading from NLog 4.1.0 to another version can give issues when using NuGet. This will result in the following error: Could not load file or assembly 'NLog' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) If you upgrade, remove or alter the <assemblybinding> , as explained at the 4.1.1 news post . Should I use Common Logging? That's up to you. It has it pros and cons. The greatest advantage is that you can easily switch between logging implementations (NLog, Log4Net, EntLib). This can be very important if you\u2019re writing a library yourself, then the user who's using your library can choose which implementation to use. There are some downsides: You are limited in some features, or some features aren't available at all (like context classes or event properties) The performance is a bit lower. The platform support is lower. For example, there is no Xamarin support or a specialized .Net 4.5 build The progress is limited by NLog and Common logging. Which Common Logging version should I use? As you may have noticed the latest version of Common Logging doesn't match the latest version of NLog - the latest Common Logging is build to NLog 4.1. But that is not a problem! Since NLog 4.0 the assembly version is fixed to 4.0.0.0 and because follow semver , you can use the latest version of NLog with Common.Logging.NLog41 . When a library depends on NLog, what version of NLog should be used? If you don't use the latest additions, then you should only update every NLog major version. As mentioned at the Common Logging version, we will keep the assembly version fixed. The end-user don't need <assemblybinding> -magic! So in short: your library should target NLog 4.0 and in the future NLog 5.0. How to properly log exceptions? How to log extra Context Information? How to handle environment specific configuration? How to configure logging for Addons and Plugins? How to wrap NLog Logger? How do I get the most optimal performance? How do I write custom Targets, layouts and layout renderers? How to do dependency injection with NLog? How to load NLog configuration from non standard path? How could I combine programmatic configuration with XML configuration? How to create Logger for sub classes?","title":"FAQ"},{"location":"FallbackGroup-target/","text":"Provides fallback-on-error. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"FallbackGroup\" name=\"String\" returnToFirstOnSuccess=\"Boolean\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets> Parameters General Options name - Name of the target. Fallback Options returnToFirstOnSuccess - Indicates whether to return to the first target after any successful write. Boolean . Default false Example Fallback to another mail if the mailserver is down <target xsi:type=\"FallbackGroup\" name=\"mail\" returnToFirstOnSuccess=\"true\"> <target xsi:type=\"Mail\" name=\"mailserver1\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx1.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> <target xsi:type=\"Mail\" name=\"mailserver2\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx2.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> </target> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"mail\" /> </rules>","title":"FallbackGroup target"},{"location":"FallbackGroup-target/#configuration-syntax","text":"<targets> <target xsi:type=\"FallbackGroup\" name=\"String\" returnToFirstOnSuccess=\"Boolean\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets>","title":"Configuration Syntax"},{"location":"FallbackGroup-target/#parameters","text":"","title":"Parameters"},{"location":"FallbackGroup-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"FallbackGroup-target/#fallback-options","text":"returnToFirstOnSuccess - Indicates whether to return to the first target after any successful write. Boolean . Default false","title":"Fallback Options"},{"location":"FallbackGroup-target/#example","text":"Fallback to another mail if the mailserver is down <target xsi:type=\"FallbackGroup\" name=\"mail\" returnToFirstOnSuccess=\"true\"> <target xsi:type=\"Mail\" name=\"mailserver1\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx1.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> <target xsi:type=\"Mail\" name=\"mailserver2\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx2.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> </target> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"mail\" /> </rules>","title":"Example"},{"location":"File-target/","text":"Writes log messages to one or more files. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"File\" name=\"String\" layout=\"Layout\" header=\"Layout\" footer=\"Layout\" encoding=\"Encoding\" lineEnding=\"Enum\" archiveAboveSize=\"Long\" maxArchiveFiles=\"Integer\" maxArchiveDays=\"Integer\" archiveFileName=\"Layout\" archiveNumbering=\"Enum\" archiveDateFormat=\"String\" archiveEvery=\"Enum\" archiveOldFileOnStartup=\"Boolean\" archiveOldFileOnStartupAboveSize=\"Long\" replaceFileContentsOnEachWrite=\"Boolean\" fileAttributes=\"Enum\" fileName=\"Layout\" deleteOldFileOnStartup=\"Boolean\" enableFileDelete=\"Boolean\" createDirs=\"Boolean\" concurrentWrites=\"Boolean\" openFileFlushTimeout=\"Integer\" openFileCacheTimeout=\"Integer\" openFileCacheSize=\"Integer\" networkWrites=\"Boolean\" concurrentWriteAttemptDelay=\"Integer\" concurrentWriteAttempts=\"Integer\" bufferSize=\"Integer\" autoFlush=\"Boolean\" keepFileOpen=\"Boolean\" forceManaged=\"Boolean\" enableArchiveFileCompression=\"Boolean\" cleanupFileName=\"Boolean\" writeFooterOnArchivingOnly=\"Boolean\" writeBom=\"Boolean\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. forceManaged - Indicates that the file target should only use managed methods. This disables some of the options. Layout Options layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} header - Header. Layout footer - Footer. Layout encoding - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN . Default: Utf-8 (Before NLog 5.0 the default was Encoding.Default ) writeBom - Indicates whether to write BOM (byte order mark) in created files. Boolean Default: false. Introduced with NLog 4.5. Before NLog 5.0 it would not enabled automatically when encoding UTF16 or UTF32. lineEnding - Line ending mode. Possible values: CR - Insert CR character (ASCII 13) after each line. CRLF - Insert CR LF sequence (ASCII 13, ASCII 10) after each line. Default - Insert platform-dependent end-of-line sequence after each line. LF - Insert LF character (ASCII 10) after each line. NULL - Null terminator (ASCII 0) after each line. None - Don't insert any line ending. Output Options fileName - Name of the file to write to. Layout Required. This FileName string is a layout which may include instances of layout renderers. This lets you use a single target to write to multiple files. The following value makes NLog write logging events to files based on the log level in the directory where the application runs. ${basedir}/${level}.log All Debug messages will go to Debug.log , all Info messages will go to Info.log and so on. You can combine as many of the layout renderers as you want to produce an arbitrary log file name. See also Filename Directory enableFileDelete - Indicates whether to enable log file(s) to be deleted. The FileTarget will periodically verify if the file has been deleted and must be recreated. When using ConcurrentWrites=true , then FileSystem watchers are activated for monitoring. Boolean Default: True createDirs - Indicates whether to create directories if they don't exist. Boolean Default: True Setting this to false may improve performance a bit, but you'll receive an error when attempting to write to a directory that's not present. replaceFileContentsOnEachWrite - Indicates whether to replace file contents on each write instead of appending log message at the end. Boolean Default: False fileAttributes - File attributes (Windows only). Possible values: Archive - File should be archived. ~~Compressed~~ - Compress won't work due to .Net restrictions. You can use enableArchiveFileCompression. DeleteOnClose - Delete file after it is closed. Device - Device file. Encrypted - Encrypted file. Hidden - Hidden file. NoBuffering - The system opens a file with no system caching. Normal - Normal file. NotContentIndexed - File should not be indexed by the content indexing service. PosixSemantics - A file is accessed according to POSIX rules. Readonly - Read-only ReadOnly - Read-only file. ReparsePoint - Reparse point. SparseFile - Sparse file. System - System file. Temporary - File is temporary (should be kept in cache and not written to disk if possible). WriteThrough - The system writes through any intermediate cache and goes directly to disk. Archival Options deleteOldFileOnStartup - Indicates whether to delete old log file on startup. Boolean Default: False. This option works only when the \"FileName\" parameter denotes a single file. archiveAboveSize - Size in bytes above which log files will be automatically archived. Long Before NLog ver. 4.5.7 then this would not work together with archiveNumbering=Date . Newer version will correctly merge into the existing file on archive. maxArchiveFiles - Maximum number of archive files that should be kept. If maxArchiveFiles is less or equal to 0, old files aren't deleted Integer Default: 0 maxArchiveDays - Maximum age of archive files that should be kept. Has no effect when archiveNumbering is Rolling . If maxArchiveDays is less or equal to 0, old files aren't deleted Integer Default: 0 Introduced with NLog 4.7 but not supporting archiveNumbering=\"Rolling\" , or archiveNumbering=\"Sequence\" with custom archiveFileName -path NLog 5.0 added support for archiveNumbering=\"Sequence\" with custom archiveFileName -path archiveFileName - Name of the file to be used for an archive. Layout It may contain a special placeholder {###} that will be replaced with a sequence of numbers depending on the archiving strategy. The number of hash characters used determines the number of numerical digits to be used for numbering files. Warning : Before NLog 4.5 then it would lead to very aggressive cleanup if having configured maxArchiveFiles without having specified the special placeholder {###}. NLog 4.4 would delete any file from the archive folder (not just log files), so make sure specify an isolated folder. This has been fixed in NLog 4.5 (and newer) where cleanup wildcard is not as dangerous, and allows same folder archives. archiveNumbering - Way file archives are numbered. See also Archive Numbering Examples Possible values: Rolling - Rolling style numbering (the most recent is always #0 then #1, ..., #N). Sequence - Sequence style numbering. The most recent archive has the highest number. Date - Date style numbering. The date is formatted according to the value of archiveDateFormat . Warning : Before NLog ver. 4.5.7 then this would not work together with archiveAboveSize . Newer version will correctly merge into the existing file on archive. DateAndSequence - Combination of Date and Sequence .Archives will be stamped with the prior period (Year, Month, Day) datetime. The most recent archive has the highest number (in combination with the date). The date is formatted according to the value of archiveDateFormat . archiveEvery - Indicates whether to automatically archive log files every time the specified time passes. Possible values: Day - Archive daily. Hour - Archive every hour. Minute - Archive every minute. Month - Archive every month. None - Don't archive based on time. Year - Archive every year. Sunday - Archive every Sunday. Introduced in NLog 4.4.4. Monday - Archive every Monday. Introduced in NLog 4.4.4. Tuesday - Archive every Tuesday. Introduced in NLog 4.4.4. Wednesday - Archive every Wednesday. Introduced in NLog 4.4.4. Thursday - Archive every Thursday. Introduced in NLog 4.4.4. Friday - Archive every Friday. Introduced in NLog 4.4.4. Saturday - Archive every Saturday. Introduced in NLog 4.4.4. Files are moved to the archive as part of the write operation if the current period of time changes. For example if the current hour changes from 10 to 11, the first write that will occur on or after 11:00 will trigger the archiveDateFormat - Specifies the date format used for archive numbering. Default format depends on the archive period. This option works only when the \"ArchiveNumbering\" parameter is set to Date or DateAndSequence Default: yyyyMMdd Default when ArchiveEvery = Minute: yyyyMMddHHmm Default when ArchiveEvery = Hour: yyyyMMddHH Default when ArchiveEvery = Month: yyyyMM Default when ArchiveEvery = Year: yyyy archiveOldFileOnStartup - Archive old log file on startup. Default: False archiveOldFileOnStartupAboveSize - File size threshold to archive old log file on startup. Default value is 0 which means that the file is archived as soon as archiveOldFileOnStartup is enabled. Introduced in NLog 4.7 enableArchiveFileCompression - Indicates whether to compress the archive files into the zip files. Boolean Default: False Introduced in NLog ver. 4.0. Not supported for .Net35 + .Net40 Before NLog ver. 5.0 then the filename inside the zip-file would be original filename, instead of archive-filename. writeFooterOnArchivingOnly - Indicates whether the footer should be written only when the file is archived. If False , the footer will also be written when starting to write to a different file and when the target is closed Boolean Default: False Performance Tuning Options keepFileOpen - Indicates whether to keep log file open instead of opening and closing it on each logging event. When set to false it will allow other applications to \"take over\" the filehandle, and NLog will fail logging to file. When set to false then it will give a major performance hit because it is expensive to open/close file-handle. Boolean Default: True (Before NLog 5.0 the default was false ) concurrentWrites - Enables support for optimized concurrent writes to same log file from multiple processes on the same machine-host, when using keepFileOpen = true. By using a special synchronization techniques that lets it keep the files open from multiple processes. The special synchronization cost performance and not compatible with platforms like UWP / Xamarin. Default: False (Before NLog 5.0 the default was true ) openFileCacheTimeout - Maximum number of seconds that files are kept open. If this number is negative the files are not automatically closed after a period of inactivity. Integer Default: -1 openFileCacheSize - Number of files to be kept open. Setting this to a higher value may improve performance in a situation where a single File target is writing to many files (such as splitting by level or by logger). Integer Default: 5 The files are managed on a LRU (least recently used) basis, which flushes the files that have not been used for the longest period of time should the cache become full. As a rule of thumb, you shouldn't set this parameter to a very high value. A number like 10-15 shouldn't be exceeded, because you'd be keeping a large number of files open which consumes system resources. networkWrites - Indicates whether concurrent writes to the log file by multiple processes on different network hosts. Boolean Default: False This effectively prevents files from being kept open. concurrentWriteAttemptDelay - Delay in milliseconds to wait before attempting to write to the file again. Integer Default: 1 The actual delay is a random value between 0 and the value specified in this parameter. On each failed attempt the delay base is doubled up to ConcurrentWriteAttempts times. Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be: a random value between 0 and 10 milliseconds - 1st attempt a random value between 0 and 20 milliseconds - 2nd attempt a random value between 0 and 40 milliseconds - 3rd attempt a random value between 0 and 80 milliseconds - 4th attempt ... and so on. concurrentWriteAttempts - Number of times the write is attempted on the file before NLog discards the log message. Integer Default: 10 cleanupFileName - before writing to a file, the name of the file get checked for illegal characters (OS dependent). This can be costly if a lot of messages are written. The cleanup is cached for fixed names (no layout renderers). Set this to false for optimal performance (but beware of the file name, if it's wrong, nothing gets written). Default: true . Introduced in NLog 4.2.3. bufferSize - Log file buffer size in bytes. Integer Default: 32768 autoFlush - Indicates whether to automatically flush the file buffers after each log message. Disabling this will improve performance (See also openFileFlushTimeout ). Boolean Default: True openFileFlushTimeout - Number of seconds between explicit flush of file buffers. Helps to ensure file buffers are eventually flushed when autoFlush = false . Integer Default: 0 > Introduced with NLog v4.5.7 Examples Simple logging The simplest use of File target is to produce single log file. In order to do this, put the following code in the configuration file such as NLog.config. Logs wil be written to logfile.txt in logs directory. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/logfile.txt\" keepFileOpen=\"true\" encoding=\"utf-8\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> Filename Directory File Target supports relative paths since NLog 4.3, where it will implicitly use ${basedir} (AppDomain.BaseDirectory). It is also possible to specify an absolute path or make use of these helpers: ${basedir:processDir=true} - Executable Directory ${specialfolder:folder=CommonApplicationData:cached=true} - application data for all users. Good when running as Windows Service. ${specialfolder:folder=ApplicationData:cached=true} - roaming application data for current user. ${specialfolder:folder=LocalApplicationData:cached=true} - non roaming application data for current user. To remove all doubt, then one can also use absolute-paths. And by using NLog config variables then one can reuse the absolute path for multiple file targets: <variable name=\"logDirectory\" value=\"C:/AppDir/\" /> <targets> <target type=\"file\" name=\"logfile\" filename=\"${logDirectory}App.log\" /> </targets> It is also possible to override the directory at runtime using GDC : <targets> <target type=\"file\" name=\"logfile\" filename=\"${gdc:logDirectory:whenEmpty=${baseDir}}/App.log\" /> </targets> NLog.GlobalDiagnosticsContext.Set(\"logDirectory\", \"C:/Temp/\"); Batch write and asynchronous logging The file target has support for batch writing, where multiple log messages are written in one file-operation. Batch write will improve performance, especially when using KeepFileOpen=false . Batch writing is enabled automatically when using the AsyncWrapper . This can be done by adding the attribute async=\"true\" to the <targets> -element. Asynchronous logging is recommended for multi-threaded server applications, but might not be worth it for quick-finishing command line application. Make sure to remember to flush at application shutdown, or else output can be dropped. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets async=\"true\"> <target type=\"File\" name=\"logfile\" fileName=\"${basedir}/logs/${level}.txt\" keepFileOpen=\"true\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> </rules> </nlog> Multi processes writing same file The file target supports that multiple applications are concurrently writing to the same file. This mode is activated with concurrentWrites=true . The IIS-application can run multiple AppDomains, and each AppDomain operates like a child process. When multiple processes are concurrently writing to the same file, then some locking for coordination is needed. NLog has support for the following locking-modes: Operating System File Locks - Default mode that is supported on most platforms. This mode is enabled with KeepFileOpen=false and ConcurrentWrites=true . File locking from operating system are not fair and doesn't scale when having more than 2 processes writing to the same file. Exceptions will be thrown when one process tries to open a file, that is currently in use by another process. NLog tries to handle these exception by retrying on error ( concurrentWriteAttempts=10 ) together with randomizing how long to wait before retry ( concurrentWriteAttemptDelay=1 ). When you start to increase the number of processes, then the chance of failing 10 times in row increases, and so log messages are lost. Global Mutex Locks - NLog can use global mutex for inter-process communication, which is supported on many platforms. This mode is enabled with KeepFileOpen=True and ConcurrentWrites=true . The performance is better than file locks and with much less memory allocations. It works great on Windows, and most Linux platforms using NetCore2 or newer versions of MONO. But seldom works for platforms for mobile devices like UWP / Xamarin Android / Xamarin iOS as these platforms runs in restricted sandbox without access to global mutex. Atomic File Append - .NET Framework on Windows has support for atomic file append mode. This mode is enabled with KeepFileOpen=True and ConcurrentWrites=true . This mode is only supported for .NET Framework on Windows platform. The lock synchronization is fair, and happens at the operating system level. It is the fastest concurrent mode available with minimum overhead. It is recommended to enable asynchronous logging as it will reduce the overhead from file locking coordination. Archive old log files NLog 4.5 makes it easy to setup archive logic to cleanup old files when using dynamic fileName-Layout. You just need to configure maxArchiveFiles and it will automatically perform cleanup. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/AppLog.${shortdate}.txt\" maxArchiveFiles=\"4\" archiveAboveSize=\"10240\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> NLog 4.7 (and newer) adds support for the option MaxArchiveDays . It works like MaxArchiveFiles but instead inspect the timestamp of the files in the archive. They can be combined. Ex. maxArchiveDays=\"30\" maxArchiveFiles=\"90\" (Deletes files older than 30 days or if more than 90 files in archive). Dynamic vs. Static Archive Logic Do not mix \"Dynamic FileName Archive Logic\" together with \"Static FileName Archive Logic\" as one will get unexpected archive behavior. Dynamic FileName Archive Logic - Enabled by using fileName=\"${basedir}/AppLog.${shortdate}.log\" . This means it will roll / archive dynamically because of the layout-renderer-logic in ${date} (Changes on day-change). Never use it together with archiveFileName=\"...\" or archiveEvery=\"Day\" . Static FileName Archive Logic - Enabled by using archiveEvery=\"Day\" and archiveFileName=\"...\" . This means it will expect the FileName to be static (Ex. fileName=\"${basedir}/AppLog.txt\" ). Never use dynamic layout (Ex. ${date} ) in archiveFileName=\"...\" or fileName=\"...\" . Instead use archiveDateFormat together with {#} . Static-filename-archive-logic are well suited for being used with tail-applications, that monitors a single static-filename. But there might be issues when NLog tries to rename/move the old file to create new file (Ex. when locked by external file-viewer). There are certain features that only works together with static-filename-archive-logic: - archiveFileName - Can move old files into other folder and also rename with datetime/seq-no - archiveNumbering - Can control how old files are renamed on archive. Ex DateAndSequence - enableArchiveFileCompression - Can compress old files There are several FileTarget-Archive-Examples of how to use Static FileName with ArchiveEvery. Per-level log files Single File target can be used to write to multiple files at once. The following configuration will cause log entries for each log level to be written to a separate file, so you will get: * Trace.log * Debug.log * Info.log * Warn.log * Error.log * Fatal.log <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/${level}.log\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> JSON Log-file The NLog FileTarget can be combined with the JsonLayout to create Json-LogFile: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"jsonfile\" xsi:type=\"File\" fileName=\"${basedir}/file.json\"> <layout xsi:type=\"JsonLayout\"> <attribute name=\"time\" layout=\"${date:format=O}\" /> <attribute name=\"message\" layout=\"${message}\" /> <attribute name=\"logger\" layout=\"${logger}\"/> <attribute name=\"level\" layout=\"${level}\"/> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"jsonfile\" /> </rules> </nlog> CSV Log-file The NLog FileTarget can be combined with the CsvLayout to create comma-separated CSV-LogFile. Here is an example of a file with 4 columns: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"csvfile\" xsi:type=\"File\" fileName=\"${basedir}/file.csv\"> <layout xsi:type=\"CSVLayout\"> <column name=\"time\" layout=\"${longdate}\" /> <column name=\"message\" layout=\"${message}\" /> <column name=\"logger\" layout=\"${logger}\"/> <column name=\"level\" layout=\"${level}\"/> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"csvfile\" /> </rules> </nlog>","title":"File target"},{"location":"File-target/#configuration-syntax","text":"<targets> <target xsi:type=\"File\" name=\"String\" layout=\"Layout\" header=\"Layout\" footer=\"Layout\" encoding=\"Encoding\" lineEnding=\"Enum\" archiveAboveSize=\"Long\" maxArchiveFiles=\"Integer\" maxArchiveDays=\"Integer\" archiveFileName=\"Layout\" archiveNumbering=\"Enum\" archiveDateFormat=\"String\" archiveEvery=\"Enum\" archiveOldFileOnStartup=\"Boolean\" archiveOldFileOnStartupAboveSize=\"Long\" replaceFileContentsOnEachWrite=\"Boolean\" fileAttributes=\"Enum\" fileName=\"Layout\" deleteOldFileOnStartup=\"Boolean\" enableFileDelete=\"Boolean\" createDirs=\"Boolean\" concurrentWrites=\"Boolean\" openFileFlushTimeout=\"Integer\" openFileCacheTimeout=\"Integer\" openFileCacheSize=\"Integer\" networkWrites=\"Boolean\" concurrentWriteAttemptDelay=\"Integer\" concurrentWriteAttempts=\"Integer\" bufferSize=\"Integer\" autoFlush=\"Boolean\" keepFileOpen=\"Boolean\" forceManaged=\"Boolean\" enableArchiveFileCompression=\"Boolean\" cleanupFileName=\"Boolean\" writeFooterOnArchivingOnly=\"Boolean\" writeBom=\"Boolean\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"File-target/#parameters","text":"","title":"Parameters"},{"location":"File-target/#general-options","text":"name - Name of the target. forceManaged - Indicates that the file target should only use managed methods. This disables some of the options.","title":"General Options"},{"location":"File-target/#layout-options","text":"layout - Text to be rendered. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} header - Header. Layout footer - Footer. Layout encoding - File encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN . Default: Utf-8 (Before NLog 5.0 the default was Encoding.Default ) writeBom - Indicates whether to write BOM (byte order mark) in created files. Boolean Default: false. Introduced with NLog 4.5. Before NLog 5.0 it would not enabled automatically when encoding UTF16 or UTF32. lineEnding - Line ending mode. Possible values: CR - Insert CR character (ASCII 13) after each line. CRLF - Insert CR LF sequence (ASCII 13, ASCII 10) after each line. Default - Insert platform-dependent end-of-line sequence after each line. LF - Insert LF character (ASCII 10) after each line. NULL - Null terminator (ASCII 0) after each line. None - Don't insert any line ending.","title":"Layout Options"},{"location":"File-target/#output-options","text":"fileName - Name of the file to write to. Layout Required. This FileName string is a layout which may include instances of layout renderers. This lets you use a single target to write to multiple files. The following value makes NLog write logging events to files based on the log level in the directory where the application runs. ${basedir}/${level}.log All Debug messages will go to Debug.log , all Info messages will go to Info.log and so on. You can combine as many of the layout renderers as you want to produce an arbitrary log file name. See also Filename Directory enableFileDelete - Indicates whether to enable log file(s) to be deleted. The FileTarget will periodically verify if the file has been deleted and must be recreated. When using ConcurrentWrites=true , then FileSystem watchers are activated for monitoring. Boolean Default: True createDirs - Indicates whether to create directories if they don't exist. Boolean Default: True Setting this to false may improve performance a bit, but you'll receive an error when attempting to write to a directory that's not present. replaceFileContentsOnEachWrite - Indicates whether to replace file contents on each write instead of appending log message at the end. Boolean Default: False fileAttributes - File attributes (Windows only). Possible values: Archive - File should be archived. ~~Compressed~~ - Compress won't work due to .Net restrictions. You can use enableArchiveFileCompression. DeleteOnClose - Delete file after it is closed. Device - Device file. Encrypted - Encrypted file. Hidden - Hidden file. NoBuffering - The system opens a file with no system caching. Normal - Normal file. NotContentIndexed - File should not be indexed by the content indexing service. PosixSemantics - A file is accessed according to POSIX rules. Readonly - Read-only ReadOnly - Read-only file. ReparsePoint - Reparse point. SparseFile - Sparse file. System - System file. Temporary - File is temporary (should be kept in cache and not written to disk if possible). WriteThrough - The system writes through any intermediate cache and goes directly to disk.","title":"Output Options"},{"location":"File-target/#archival-options","text":"deleteOldFileOnStartup - Indicates whether to delete old log file on startup. Boolean Default: False. This option works only when the \"FileName\" parameter denotes a single file. archiveAboveSize - Size in bytes above which log files will be automatically archived. Long Before NLog ver. 4.5.7 then this would not work together with archiveNumbering=Date . Newer version will correctly merge into the existing file on archive. maxArchiveFiles - Maximum number of archive files that should be kept. If maxArchiveFiles is less or equal to 0, old files aren't deleted Integer Default: 0 maxArchiveDays - Maximum age of archive files that should be kept. Has no effect when archiveNumbering is Rolling . If maxArchiveDays is less or equal to 0, old files aren't deleted Integer Default: 0 Introduced with NLog 4.7 but not supporting archiveNumbering=\"Rolling\" , or archiveNumbering=\"Sequence\" with custom archiveFileName -path NLog 5.0 added support for archiveNumbering=\"Sequence\" with custom archiveFileName -path archiveFileName - Name of the file to be used for an archive. Layout It may contain a special placeholder {###} that will be replaced with a sequence of numbers depending on the archiving strategy. The number of hash characters used determines the number of numerical digits to be used for numbering files. Warning : Before NLog 4.5 then it would lead to very aggressive cleanup if having configured maxArchiveFiles without having specified the special placeholder {###}. NLog 4.4 would delete any file from the archive folder (not just log files), so make sure specify an isolated folder. This has been fixed in NLog 4.5 (and newer) where cleanup wildcard is not as dangerous, and allows same folder archives. archiveNumbering - Way file archives are numbered. See also Archive Numbering Examples Possible values: Rolling - Rolling style numbering (the most recent is always #0 then #1, ..., #N). Sequence - Sequence style numbering. The most recent archive has the highest number. Date - Date style numbering. The date is formatted according to the value of archiveDateFormat . Warning : Before NLog ver. 4.5.7 then this would not work together with archiveAboveSize . Newer version will correctly merge into the existing file on archive. DateAndSequence - Combination of Date and Sequence .Archives will be stamped with the prior period (Year, Month, Day) datetime. The most recent archive has the highest number (in combination with the date). The date is formatted according to the value of archiveDateFormat . archiveEvery - Indicates whether to automatically archive log files every time the specified time passes. Possible values: Day - Archive daily. Hour - Archive every hour. Minute - Archive every minute. Month - Archive every month. None - Don't archive based on time. Year - Archive every year. Sunday - Archive every Sunday. Introduced in NLog 4.4.4. Monday - Archive every Monday. Introduced in NLog 4.4.4. Tuesday - Archive every Tuesday. Introduced in NLog 4.4.4. Wednesday - Archive every Wednesday. Introduced in NLog 4.4.4. Thursday - Archive every Thursday. Introduced in NLog 4.4.4. Friday - Archive every Friday. Introduced in NLog 4.4.4. Saturday - Archive every Saturday. Introduced in NLog 4.4.4. Files are moved to the archive as part of the write operation if the current period of time changes. For example if the current hour changes from 10 to 11, the first write that will occur on or after 11:00 will trigger the archiveDateFormat - Specifies the date format used for archive numbering. Default format depends on the archive period. This option works only when the \"ArchiveNumbering\" parameter is set to Date or DateAndSequence Default: yyyyMMdd Default when ArchiveEvery = Minute: yyyyMMddHHmm Default when ArchiveEvery = Hour: yyyyMMddHH Default when ArchiveEvery = Month: yyyyMM Default when ArchiveEvery = Year: yyyy archiveOldFileOnStartup - Archive old log file on startup. Default: False archiveOldFileOnStartupAboveSize - File size threshold to archive old log file on startup. Default value is 0 which means that the file is archived as soon as archiveOldFileOnStartup is enabled. Introduced in NLog 4.7 enableArchiveFileCompression - Indicates whether to compress the archive files into the zip files. Boolean Default: False Introduced in NLog ver. 4.0. Not supported for .Net35 + .Net40 Before NLog ver. 5.0 then the filename inside the zip-file would be original filename, instead of archive-filename. writeFooterOnArchivingOnly - Indicates whether the footer should be written only when the file is archived. If False , the footer will also be written when starting to write to a different file and when the target is closed Boolean Default: False","title":"Archival Options"},{"location":"File-target/#performance-tuning-options","text":"keepFileOpen - Indicates whether to keep log file open instead of opening and closing it on each logging event. When set to false it will allow other applications to \"take over\" the filehandle, and NLog will fail logging to file. When set to false then it will give a major performance hit because it is expensive to open/close file-handle. Boolean Default: True (Before NLog 5.0 the default was false ) concurrentWrites - Enables support for optimized concurrent writes to same log file from multiple processes on the same machine-host, when using keepFileOpen = true. By using a special synchronization techniques that lets it keep the files open from multiple processes. The special synchronization cost performance and not compatible with platforms like UWP / Xamarin. Default: False (Before NLog 5.0 the default was true ) openFileCacheTimeout - Maximum number of seconds that files are kept open. If this number is negative the files are not automatically closed after a period of inactivity. Integer Default: -1 openFileCacheSize - Number of files to be kept open. Setting this to a higher value may improve performance in a situation where a single File target is writing to many files (such as splitting by level or by logger). Integer Default: 5 The files are managed on a LRU (least recently used) basis, which flushes the files that have not been used for the longest period of time should the cache become full. As a rule of thumb, you shouldn't set this parameter to a very high value. A number like 10-15 shouldn't be exceeded, because you'd be keeping a large number of files open which consumes system resources. networkWrites - Indicates whether concurrent writes to the log file by multiple processes on different network hosts. Boolean Default: False This effectively prevents files from being kept open. concurrentWriteAttemptDelay - Delay in milliseconds to wait before attempting to write to the file again. Integer Default: 1 The actual delay is a random value between 0 and the value specified in this parameter. On each failed attempt the delay base is doubled up to ConcurrentWriteAttempts times. Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be: a random value between 0 and 10 milliseconds - 1st attempt a random value between 0 and 20 milliseconds - 2nd attempt a random value between 0 and 40 milliseconds - 3rd attempt a random value between 0 and 80 milliseconds - 4th attempt ... and so on. concurrentWriteAttempts - Number of times the write is attempted on the file before NLog discards the log message. Integer Default: 10 cleanupFileName - before writing to a file, the name of the file get checked for illegal characters (OS dependent). This can be costly if a lot of messages are written. The cleanup is cached for fixed names (no layout renderers). Set this to false for optimal performance (but beware of the file name, if it's wrong, nothing gets written). Default: true . Introduced in NLog 4.2.3. bufferSize - Log file buffer size in bytes. Integer Default: 32768 autoFlush - Indicates whether to automatically flush the file buffers after each log message. Disabling this will improve performance (See also openFileFlushTimeout ). Boolean Default: True openFileFlushTimeout - Number of seconds between explicit flush of file buffers. Helps to ensure file buffers are eventually flushed when autoFlush = false . Integer Default: 0 > Introduced with NLog v4.5.7","title":"Performance Tuning Options"},{"location":"File-target/#examples","text":"","title":"Examples"},{"location":"File-target/#simple-logging","text":"The simplest use of File target is to produce single log file. In order to do this, put the following code in the configuration file such as NLog.config. Logs wil be written to logfile.txt in logs directory. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/logfile.txt\" keepFileOpen=\"true\" encoding=\"utf-8\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"Simple logging"},{"location":"File-target/#filename-directory","text":"File Target supports relative paths since NLog 4.3, where it will implicitly use ${basedir} (AppDomain.BaseDirectory). It is also possible to specify an absolute path or make use of these helpers: ${basedir:processDir=true} - Executable Directory ${specialfolder:folder=CommonApplicationData:cached=true} - application data for all users. Good when running as Windows Service. ${specialfolder:folder=ApplicationData:cached=true} - roaming application data for current user. ${specialfolder:folder=LocalApplicationData:cached=true} - non roaming application data for current user. To remove all doubt, then one can also use absolute-paths. And by using NLog config variables then one can reuse the absolute path for multiple file targets: <variable name=\"logDirectory\" value=\"C:/AppDir/\" /> <targets> <target type=\"file\" name=\"logfile\" filename=\"${logDirectory}App.log\" /> </targets> It is also possible to override the directory at runtime using GDC : <targets> <target type=\"file\" name=\"logfile\" filename=\"${gdc:logDirectory:whenEmpty=${baseDir}}/App.log\" /> </targets> NLog.GlobalDiagnosticsContext.Set(\"logDirectory\", \"C:/Temp/\");","title":"Filename Directory"},{"location":"File-target/#batch-write-and-asynchronous-logging","text":"The file target has support for batch writing, where multiple log messages are written in one file-operation. Batch write will improve performance, especially when using KeepFileOpen=false . Batch writing is enabled automatically when using the AsyncWrapper . This can be done by adding the attribute async=\"true\" to the <targets> -element. Asynchronous logging is recommended for multi-threaded server applications, but might not be worth it for quick-finishing command line application. Make sure to remember to flush at application shutdown, or else output can be dropped. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets async=\"true\"> <target type=\"File\" name=\"logfile\" fileName=\"${basedir}/logs/${level}.txt\" keepFileOpen=\"true\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> </rules> </nlog>","title":"Batch write and asynchronous logging"},{"location":"File-target/#multi-processes-writing-same-file","text":"The file target supports that multiple applications are concurrently writing to the same file. This mode is activated with concurrentWrites=true . The IIS-application can run multiple AppDomains, and each AppDomain operates like a child process. When multiple processes are concurrently writing to the same file, then some locking for coordination is needed. NLog has support for the following locking-modes: Operating System File Locks - Default mode that is supported on most platforms. This mode is enabled with KeepFileOpen=false and ConcurrentWrites=true . File locking from operating system are not fair and doesn't scale when having more than 2 processes writing to the same file. Exceptions will be thrown when one process tries to open a file, that is currently in use by another process. NLog tries to handle these exception by retrying on error ( concurrentWriteAttempts=10 ) together with randomizing how long to wait before retry ( concurrentWriteAttemptDelay=1 ). When you start to increase the number of processes, then the chance of failing 10 times in row increases, and so log messages are lost. Global Mutex Locks - NLog can use global mutex for inter-process communication, which is supported on many platforms. This mode is enabled with KeepFileOpen=True and ConcurrentWrites=true . The performance is better than file locks and with much less memory allocations. It works great on Windows, and most Linux platforms using NetCore2 or newer versions of MONO. But seldom works for platforms for mobile devices like UWP / Xamarin Android / Xamarin iOS as these platforms runs in restricted sandbox without access to global mutex. Atomic File Append - .NET Framework on Windows has support for atomic file append mode. This mode is enabled with KeepFileOpen=True and ConcurrentWrites=true . This mode is only supported for .NET Framework on Windows platform. The lock synchronization is fair, and happens at the operating system level. It is the fastest concurrent mode available with minimum overhead. It is recommended to enable asynchronous logging as it will reduce the overhead from file locking coordination.","title":"Multi processes writing same file"},{"location":"File-target/#archive-old-log-files","text":"NLog 4.5 makes it easy to setup archive logic to cleanup old files when using dynamic fileName-Layout. You just need to configure maxArchiveFiles and it will automatically perform cleanup. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/AppLog.${shortdate}.txt\" maxArchiveFiles=\"4\" archiveAboveSize=\"10240\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> NLog 4.7 (and newer) adds support for the option MaxArchiveDays . It works like MaxArchiveFiles but instead inspect the timestamp of the files in the archive. They can be combined. Ex. maxArchiveDays=\"30\" maxArchiveFiles=\"90\" (Deletes files older than 30 days or if more than 90 files in archive).","title":"Archive old log files"},{"location":"File-target/#dynamic-vs-static-archive-logic","text":"Do not mix \"Dynamic FileName Archive Logic\" together with \"Static FileName Archive Logic\" as one will get unexpected archive behavior. Dynamic FileName Archive Logic - Enabled by using fileName=\"${basedir}/AppLog.${shortdate}.log\" . This means it will roll / archive dynamically because of the layout-renderer-logic in ${date} (Changes on day-change). Never use it together with archiveFileName=\"...\" or archiveEvery=\"Day\" . Static FileName Archive Logic - Enabled by using archiveEvery=\"Day\" and archiveFileName=\"...\" . This means it will expect the FileName to be static (Ex. fileName=\"${basedir}/AppLog.txt\" ). Never use dynamic layout (Ex. ${date} ) in archiveFileName=\"...\" or fileName=\"...\" . Instead use archiveDateFormat together with {#} . Static-filename-archive-logic are well suited for being used with tail-applications, that monitors a single static-filename. But there might be issues when NLog tries to rename/move the old file to create new file (Ex. when locked by external file-viewer). There are certain features that only works together with static-filename-archive-logic: - archiveFileName - Can move old files into other folder and also rename with datetime/seq-no - archiveNumbering - Can control how old files are renamed on archive. Ex DateAndSequence - enableArchiveFileCompression - Can compress old files There are several FileTarget-Archive-Examples of how to use Static FileName with ArchiveEvery.","title":"Dynamic vs. Static Archive Logic"},{"location":"File-target/#per-level-log-files","text":"Single File target can be used to write to multiple files at once. The following configuration will cause log entries for each log level to be written to a separate file, so you will get: * Trace.log * Debug.log * Info.log * Warn.log * Error.log * Fatal.log <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/${level}.log\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"Per-level log files"},{"location":"File-target/#json-log-file","text":"The NLog FileTarget can be combined with the JsonLayout to create Json-LogFile: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"jsonfile\" xsi:type=\"File\" fileName=\"${basedir}/file.json\"> <layout xsi:type=\"JsonLayout\"> <attribute name=\"time\" layout=\"${date:format=O}\" /> <attribute name=\"message\" layout=\"${message}\" /> <attribute name=\"logger\" layout=\"${logger}\"/> <attribute name=\"level\" layout=\"${level}\"/> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"jsonfile\" /> </rules> </nlog>","title":"JSON Log-file"},{"location":"File-target/#csv-log-file","text":"The NLog FileTarget can be combined with the CsvLayout to create comma-separated CSV-LogFile. Here is an example of a file with 4 columns: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"csvfile\" xsi:type=\"File\" fileName=\"${basedir}/file.csv\"> <layout xsi:type=\"CSVLayout\"> <column name=\"time\" layout=\"${longdate}\" /> <column name=\"message\" layout=\"${message}\" /> <column name=\"logger\" layout=\"${logger}\"/> <column name=\"level\" layout=\"${level}\"/> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"csvfile\" /> </rules> </nlog>","title":"CSV Log-file"},{"location":"FileContents-layout-renderer/","text":"Renders contents of the specified file. Example if having a flat file containing a special setting value. Platforms Supported: All Configuration Syntax ${file-contents:encoding=Encoding:fileName=Layout} Parameters File Options encoding - Encoding used in the file.Encoding fileName - Name of the file.Layout Notes If the file content doesn't change, then adding the option :cached=true will give a performance boost.","title":"FileContents layout renderer"},{"location":"FileContents-layout-renderer/#configuration-syntax","text":"${file-contents:encoding=Encoding:fileName=Layout}","title":"Configuration Syntax"},{"location":"FileContents-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"FileContents-layout-renderer/#file-options","text":"encoding - Encoding used in the file.Encoding fileName - Name of the file.Layout","title":"File Options"},{"location":"FileContents-layout-renderer/#notes","text":"If the file content doesn't change, then adding the option :cached=true will give a performance boost.","title":"Notes"},{"location":"FileTarget-Archive-Examples/","text":"NLog ver. 4.5 improves dynamic archive mode, so it is easy to archive old files . These examples shows the archive options for the static-archive-mode. One should Not mix dynamic with static-archive-mode . Size-based file archival Log files can be automatically archived by moving them to another location after reaching certain size. The following configuration will create logs/logfile.txt which will be archived to archives/log.000000.txt', archives/log.000001.txt', archives/log.000002.txt' and so on once the main log file reaches 10KB. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}\" fileName=\"${basedir}/logs/logfile.txt\" archiveFileName=\"${basedir}/archives/log.{#####}.txt\" archiveAboveSize=\"10240\" archiveNumbering=\"Sequence\" concurrentWrites=\"true\" keepFileOpen=\"false\" encoding=\"iso-8859-2\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> Time-based file archival Log files can also be automatically archived based on time. This configuration will archive a file at the beginning of each day and will use rolling file naming, so log file from the previous day can always be found in archives//log.0.txt, log from two days ago is in archives//log.1.txt and so on. This configuration will keep at most 7 archive files, so logs older than one week will be automatically deleted. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}\" fileName=\"${basedir}/logs/logfile.txt\" archiveFileName=\"${basedir}/archives/log.{#}.txt\" archiveEvery=\"Day\" archiveNumbering=\"Rolling\" maxArchiveFiles=\"7\" concurrentWrites=\"true\" keepFileOpen=\"false\" encoding=\"iso-8859-2\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> Archive every Week You can specify different archival time periods. For example, if you wanted to archive once a week on Tuesdays, you would set archiveEvery=\"Tuesday\" . Possible values for archiveEvery can be found above. This will result in the following files being created: + logfile.txt // the current log being written to + logfile.20170307.txt + logfile.20170314.txt + logfile.20170321.txt + etc. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}\" fileName=\"${basedir}/logs/logfile.txt\" archiveFileName=\"${basedir}/archives/logfile.{#}.txt\" archiveEvery=\"Tuesday\" maxArchiveFiles=\"7\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> Archive Numbering Examples Rolling <target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{####}.txt\" archiveNumbering=\"Rolling\" /> Example of file names (newest files first): logfile.txt log.0000.txt log.0001.txt log.0002.txt Sequence <target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{####}.txt\" archiveNumbering=\"Sequence\" /> Example of file names (newest files first): logfile.txt log.0002.txt log.0001.txt log.0000.txt Date <target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{#}.txt\" archiveNumbering=\"Date\" archiveEvery=\"Day\" archiveDateFormat=\"yyyyMMdd\" /> Example of file names (newest files first): logfile.txt log.20150731.txt log.20150730.txt DateAndSequence <target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{#}.txt\" archiveNumbering=\"DateAndSequence\" archiveAboveSize=\"1000\" archiveDateFormat=\"yyyyMMdd\" /> Example of file names (newest files first): logfile.txt log.20150730.3.txt log.20150730.2.txt log.20150730.1.txt Archive file in new folder NLog also has support for writing to a static fileName-Layout, and then move the file to archive-location and re-create new fresh file. But it only works when not including dynamic layout (Ex. ${date} ) in the fileName-Layout or archiveFileName-Layout. See also Do not mix dynamic-filename with static archive logic <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/AppLog.txt\" archiveFileName=\"${basedir}/archives/AppLog.{#}.txt\" archiveEvery=\"Day\" maxArchiveFiles=\"4\" archiveAboveSize=\"10240\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> It will generate the following filenames (newest first): * AppLog.txt // the current log being written to * AppLog.20170321.txt * AppLog.20170314.txt * AppLog.20170307.txt One log file per application instance, remove old logs The following configuration will create a dedicated log file for each start of your application. Multiple instances can run in parallel and write to their respective log file. By adding a timestamp to the filename, each filename is unique (up to the second). Up to ten log files (active + nine archive) are kept. The removal of old logs works, when the archiveFileName contains a placeholder, archiveDateFormat has the same datetime format as in the name property, and archiveNumbering and archiveEvery are enabled. The $(cached:...) directive prevents that a new log file name is generated for every log entry. Log files will be named: * 2017-11-05 08_00_00.log * 2017-11-05 08_00_01.log * 2017-11-05 12_35_04.log * 2017-11-06 09_54_32.log * ... <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/${cached:${date:format=yyyy-MM-dd HH_mm_ss}}.log\" archiveFileName=\"${basedir}/{#}.log\" archiveDateFormat=\"yyyy-MM-dd HH_mm_ss\" archiveNumbering=\"Date\" archiveEvery=\"Year\" maxArchiveFiles=\"9\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"FileTarget Archive Examples"},{"location":"FileTarget-Archive-Examples/#size-based-file-archival","text":"Log files can be automatically archived by moving them to another location after reaching certain size. The following configuration will create logs/logfile.txt which will be archived to archives/log.000000.txt', archives/log.000001.txt', archives/log.000002.txt' and so on once the main log file reaches 10KB. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}\" fileName=\"${basedir}/logs/logfile.txt\" archiveFileName=\"${basedir}/archives/log.{#####}.txt\" archiveAboveSize=\"10240\" archiveNumbering=\"Sequence\" concurrentWrites=\"true\" keepFileOpen=\"false\" encoding=\"iso-8859-2\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"Size-based file archival"},{"location":"FileTarget-Archive-Examples/#time-based-file-archival","text":"Log files can also be automatically archived based on time. This configuration will archive a file at the beginning of each day and will use rolling file naming, so log file from the previous day can always be found in archives//log.0.txt, log from two days ago is in archives//log.1.txt and so on. This configuration will keep at most 7 archive files, so logs older than one week will be automatically deleted. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}\" fileName=\"${basedir}/logs/logfile.txt\" archiveFileName=\"${basedir}/archives/log.{#}.txt\" archiveEvery=\"Day\" archiveNumbering=\"Rolling\" maxArchiveFiles=\"7\" concurrentWrites=\"true\" keepFileOpen=\"false\" encoding=\"iso-8859-2\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"Time-based file archival"},{"location":"FileTarget-Archive-Examples/#archive-every-week","text":"You can specify different archival time periods. For example, if you wanted to archive once a week on Tuesdays, you would set archiveEvery=\"Tuesday\" . Possible values for archiveEvery can be found above. This will result in the following files being created: + logfile.txt // the current log being written to + logfile.20170307.txt + logfile.20170314.txt + logfile.20170321.txt + etc. <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}\" fileName=\"${basedir}/logs/logfile.txt\" archiveFileName=\"${basedir}/archives/logfile.{#}.txt\" archiveEvery=\"Tuesday\" maxArchiveFiles=\"7\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"Archive every Week"},{"location":"FileTarget-Archive-Examples/#archive-numbering-examples","text":"","title":"Archive Numbering Examples"},{"location":"FileTarget-Archive-Examples/#rolling","text":"<target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{####}.txt\" archiveNumbering=\"Rolling\" /> Example of file names (newest files first): logfile.txt log.0000.txt log.0001.txt log.0002.txt","title":"Rolling"},{"location":"FileTarget-Archive-Examples/#sequence","text":"<target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{####}.txt\" archiveNumbering=\"Sequence\" /> Example of file names (newest files first): logfile.txt log.0002.txt log.0001.txt log.0000.txt","title":"Sequence"},{"location":"FileTarget-Archive-Examples/#date","text":"<target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{#}.txt\" archiveNumbering=\"Date\" archiveEvery=\"Day\" archiveDateFormat=\"yyyyMMdd\" /> Example of file names (newest files first): logfile.txt log.20150731.txt log.20150730.txt","title":"Date"},{"location":"FileTarget-Archive-Examples/#dateandsequence","text":"<target name=\"file\" xsi:type=\"File\" ... fileName=\"logfile.txt\" archiveFileName=\"log.{#}.txt\" archiveNumbering=\"DateAndSequence\" archiveAboveSize=\"1000\" archiveDateFormat=\"yyyyMMdd\" /> Example of file names (newest files first): logfile.txt log.20150730.3.txt log.20150730.2.txt log.20150730.1.txt","title":"DateAndSequence"},{"location":"FileTarget-Archive-Examples/#archive-file-in-new-folder","text":"NLog also has support for writing to a static fileName-Layout, and then move the file to archive-location and re-create new fresh file. But it only works when not including dynamic layout (Ex. ${date} ) in the fileName-Layout or archiveFileName-Layout. See also Do not mix dynamic-filename with static archive logic <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/AppLog.txt\" archiveFileName=\"${basedir}/archives/AppLog.{#}.txt\" archiveEvery=\"Day\" maxArchiveFiles=\"4\" archiveAboveSize=\"10240\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog> It will generate the following filenames (newest first): * AppLog.txt // the current log being written to * AppLog.20170321.txt * AppLog.20170314.txt * AppLog.20170307.txt","title":"Archive file in new folder"},{"location":"FileTarget-Archive-Examples/#one-log-file-per-application-instance-remove-old-logs","text":"The following configuration will create a dedicated log file for each start of your application. Multiple instances can run in parallel and write to their respective log file. By adding a timestamp to the filename, each filename is unique (up to the second). Up to ten log files (active + nine archive) are kept. The removal of old logs works, when the archiveFileName contains a placeholder, archiveDateFormat has the same datetime format as in the name property, and archiveNumbering and archiveEvery are enabled. The $(cached:...) directive prevents that a new log file name is generated for every log entry. Log files will be named: * 2017-11-05 08_00_00.log * 2017-11-05 08_00_01.log * 2017-11-05 12_35_04.log * 2017-11-06 09_54_32.log * ... <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"file\" xsi:type=\"File\" layout=\"${longdate} ${logger} ${message}${exception:format=ToString}\" fileName=\"${basedir}/logs/${cached:${date:format=yyyy-MM-dd HH_mm_ss}}.log\" archiveFileName=\"${basedir}/{#}.log\" archiveDateFormat=\"yyyy-MM-dd HH_mm_ss\" archiveNumbering=\"Date\" archiveEvery=\"Year\" maxArchiveFiles=\"9\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"file\" /> </rules> </nlog>","title":"One log file per application instance, remove old logs"},{"location":"Filesystem-Normalize-Layout-Renderer/","text":"Filters characters not allowed in the file names by replacing them with safe character. Platforms Supported: All Configuration Syntax ${filesystem-normalize:fSNormalize=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:fSNormalize=Boolean} Parameters Advanced Options fSNormalize - Indicates whether to modify the output of this renderer so it can be used as a part of file path (illegal characters are replaced with '_'). Boolean Default: True Transformation Options inner - Wrapped layout. Layout","title":"Filesystem Normalize Layout Renderer"},{"location":"Filesystem-Normalize-Layout-Renderer/#configuration-syntax","text":"${filesystem-normalize:fSNormalize=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:fSNormalize=Boolean}","title":"Configuration Syntax"},{"location":"Filesystem-Normalize-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Filesystem-Normalize-Layout-Renderer/#advanced-options","text":"fSNormalize - Indicates whether to modify the output of this renderer so it can be used as a part of file path (illegal characters are replaced with '_'). Boolean Default: True","title":"Advanced Options"},{"location":"Filesystem-Normalize-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout","title":"Transformation Options"},{"location":"Filtering-log-messages/","text":"Log messages may be filtered via either routing or filtering . Routing Logging Rules is the most efficient way to perform filtering using the name of the Logger. By not specifying writeTo= then it act like a blackhole with almost no overhead. But if also needing custom filter logic, then one needs to use a Null target . NLog 4.5 allows one to specify an empty writeTo=\"\" <rules> <!-- ignore events written that are written to a logger which starts with \"Namespace.\" --> <logger name=\"Namespace.*\" minlevel=\"Trace\" final=\"true\" /> <!-- BlackHole that swallows everything --> <logger name=\"Namespace.*\" maxLevel=\"Info\" final=\"true\" /> <!-- BlackHole that swallows non-critical --> </rules> Filters With the use of <filters> then you can inspect the actual log-events and decide to ignore (blacklist) and/or allow (whitelist) the events. See also <when> filter . e.g. <logger name=\"*\" writeTo=\"file\"> <filters defaultAction=\"Log\"> <when condition=\"length('${message}') > 100\" action=\"Ignore\" /> </filters> </logger> The defaultAction -option was introduced with NLog 4.6. Before NLog 5.0 then the default value was Neutral . Note filters has a small performance penalty, because NLog LogEventInfo objects will be allocated even if discarded by filter-result. Example in C The above configuration can be implemented directly in C# like this: var config = LogManager.Configuration; // some target var fileTarget = new FileTarget(); // set-up rule with filter var loggingRule = new LoggingRule(\"*\", fileTarget); loggingRule.FilterDefaultAction = FilterResult.Log; loggingRule.Filters.Add(new ConditionBasedFilter() { Condition = \"length('${message}') > 100\", Action = FilterResult.Ignore }); config.LoggingRules.Add(loggingRule); // apply config LogManager.Configuration = config; With NLog 5.0 then one can also do this: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterDynamicIgnore(evt => evt.FormattedMessage?.Length > 100).WriteToFile(\"log.txt\"); }); Global Threshold LogManager.GlobalThreshold can be assigned a LogLevel, and then only LogEvents with same severity (or higher) will be logged. LogManager.GlobalThreshold will overrule the configuration of logging rules. If logging rules says minLevel=\"Debug\" then LogManager.GlobalThreshold = LogLevel.Error will still win. if (IsProduction) NLog.LogManager.GlobalThreshold = NLog.LogLevel.Info; else NLog.LogManager.GlobalThreshold = NLog.LogLevel.Trace; // No global filter Semi Dynamic Routing Rules Routing rules are more efficient, but it was difficult to modify the loglevel filters. Their performance comes from their static nature. NLog 4.6.7 introduced the ability to use Layout-logic in the LogLevel-filters, that can be explictly refreshed. <nlog> <variable name=\"myLevel\" value=\"Warn\" /> <rules> <logger minLevel=\"${var:myLevel}\" writeTo=\"file\" /> </rules> </nlog> Then NLog 4.6.7 allows you to do this: #if DEBUG LogManager.Configuration.Variables[\"myLevel\"] = \"Debug\"; LogManager.ReconfigExistingLoggers(); // Explicit refresh of Layouts and updates active Logger-objects #endif This could be used to create a special activate-debug-mode-method. After changing the loglevel-variable as shown above, then one could schedule a timer to restore default-level to \"Warn\" after 5 mins. Fully Dynamic Filtering The Semi Dynamic Routing Rules improves the combination of NLog configuration loaded from config-file, and adjusting NLog configuration at runtime. When NLog configuration is created at runtime alone, then one have access to even more dynamic filtering logic capabilities. Ex. by using NLog.Filters.WhenMethodFilter : config.LoggingRules.Last().Filters.Add(new WhenMethodFilter(logEvent => ShouldIgnoreLogEvent(logEvent) ? FilterResult.Ignore : FilterResult.Log)); It is also possible to use the NLog.Config.LoggingRule constructor that specifies RuleName . Where it is possible to lookup the LoggingRule using LoggingConfiguration.FindRuleByName when needing to adjust it. Deprecated filters These filters are deprecated. They have been replace by the <when> filter, which exposes uses modifiable conditions for filtering log events. <whenContains> filter - Matches when the calculated layout contains the specified substring. <whenEqual> filter - Matches when the calculated layout is equal to the specified substring. <whenNotContains> filter - Matches when the calculated layout does NOT contain the specified substring. <whenNotEqual> filter - Matches when the calculated layout is NOT equal to the specified substring.","title":"Filtering log messages"},{"location":"Filtering-log-messages/#routing","text":"Logging Rules is the most efficient way to perform filtering using the name of the Logger. By not specifying writeTo= then it act like a blackhole with almost no overhead. But if also needing custom filter logic, then one needs to use a Null target . NLog 4.5 allows one to specify an empty writeTo=\"\" <rules> <!-- ignore events written that are written to a logger which starts with \"Namespace.\" --> <logger name=\"Namespace.*\" minlevel=\"Trace\" final=\"true\" /> <!-- BlackHole that swallows everything --> <logger name=\"Namespace.*\" maxLevel=\"Info\" final=\"true\" /> <!-- BlackHole that swallows non-critical --> </rules>","title":"Routing"},{"location":"Filtering-log-messages/#filters","text":"With the use of <filters> then you can inspect the actual log-events and decide to ignore (blacklist) and/or allow (whitelist) the events. See also <when> filter . e.g. <logger name=\"*\" writeTo=\"file\"> <filters defaultAction=\"Log\"> <when condition=\"length('${message}') > 100\" action=\"Ignore\" /> </filters> </logger> The defaultAction -option was introduced with NLog 4.6. Before NLog 5.0 then the default value was Neutral . Note filters has a small performance penalty, because NLog LogEventInfo objects will be allocated even if discarded by filter-result.","title":"Filters"},{"location":"Filtering-log-messages/#example-in-c","text":"The above configuration can be implemented directly in C# like this: var config = LogManager.Configuration; // some target var fileTarget = new FileTarget(); // set-up rule with filter var loggingRule = new LoggingRule(\"*\", fileTarget); loggingRule.FilterDefaultAction = FilterResult.Log; loggingRule.Filters.Add(new ConditionBasedFilter() { Condition = \"length('${message}') > 100\", Action = FilterResult.Ignore }); config.LoggingRules.Add(loggingRule); // apply config LogManager.Configuration = config; With NLog 5.0 then one can also do this: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterDynamicIgnore(evt => evt.FormattedMessage?.Length > 100).WriteToFile(\"log.txt\"); });","title":"Example in C"},{"location":"Filtering-log-messages/#global-threshold","text":"LogManager.GlobalThreshold can be assigned a LogLevel, and then only LogEvents with same severity (or higher) will be logged. LogManager.GlobalThreshold will overrule the configuration of logging rules. If logging rules says minLevel=\"Debug\" then LogManager.GlobalThreshold = LogLevel.Error will still win. if (IsProduction) NLog.LogManager.GlobalThreshold = NLog.LogLevel.Info; else NLog.LogManager.GlobalThreshold = NLog.LogLevel.Trace; // No global filter","title":"Global Threshold"},{"location":"Filtering-log-messages/#semi-dynamic-routing-rules","text":"Routing rules are more efficient, but it was difficult to modify the loglevel filters. Their performance comes from their static nature. NLog 4.6.7 introduced the ability to use Layout-logic in the LogLevel-filters, that can be explictly refreshed. <nlog> <variable name=\"myLevel\" value=\"Warn\" /> <rules> <logger minLevel=\"${var:myLevel}\" writeTo=\"file\" /> </rules> </nlog> Then NLog 4.6.7 allows you to do this: #if DEBUG LogManager.Configuration.Variables[\"myLevel\"] = \"Debug\"; LogManager.ReconfigExistingLoggers(); // Explicit refresh of Layouts and updates active Logger-objects #endif This could be used to create a special activate-debug-mode-method. After changing the loglevel-variable as shown above, then one could schedule a timer to restore default-level to \"Warn\" after 5 mins.","title":"Semi Dynamic Routing Rules"},{"location":"Filtering-log-messages/#fully-dynamic-filtering","text":"The Semi Dynamic Routing Rules improves the combination of NLog configuration loaded from config-file, and adjusting NLog configuration at runtime. When NLog configuration is created at runtime alone, then one have access to even more dynamic filtering logic capabilities. Ex. by using NLog.Filters.WhenMethodFilter : config.LoggingRules.Last().Filters.Add(new WhenMethodFilter(logEvent => ShouldIgnoreLogEvent(logEvent) ? FilterResult.Ignore : FilterResult.Log)); It is also possible to use the NLog.Config.LoggingRule constructor that specifies RuleName . Where it is possible to lookup the LoggingRule using LoggingConfiguration.FindRuleByName when needing to adjust it.","title":"Fully Dynamic Filtering"},{"location":"Filtering-log-messages/#deprecated-filters","text":"These filters are deprecated. They have been replace by the <when> filter, which exposes uses modifiable conditions for filtering log events. <whenContains> filter - Matches when the calculated layout contains the specified substring. <whenEqual> filter - Matches when the calculated layout is equal to the specified substring. <whenNotContains> filter - Matches when the calculated layout does NOT contain the specified substring. <whenNotEqual> filter - Matches when the calculated layout is NOT equal to the specified substring.","title":"Deprecated filters"},{"location":"FilteringWrapper-target/","text":"Filters log entries based on a condition. Platforms Supported: All Configuration Syntax Filtering using condition: <targets> <target xsi:type=\"FilteringWrapper\" name=\"String\" condition=\"Condition\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Filtering using filter (Introduced with NLog 4.6.4): <targets> <target xsi:type=\"FilteringWrapper\" name=\"default\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> <filter xsi:type=\"whenRepeated\" layout=\"${message}\" timeoutSeconds=\"30\" action=\"Ignore\" /> </target> </targets> Parameters General Options name - Name of the target. Filtering Options condition - Condition Expression . Log events who meet this condition will be forwarded to the wrapped target. Condition Required, unless having specified a filter . filter - Filter expression. For complex filtering logic like WhenRepeated-Filter . Introduced with NLog 4.6.4 Examples Repeat filter Filter repeated LogEvents, so it will only send mail every 5 minutes (Introduced with NLog 4.6.4): <nlog> <targets> <target xsi:type=\"FilteringWrapper\" name=\"filter-mail\"> <target xsi:type=\"Mail\" name=\"instant-mail\"> <subject>${exception:format=Type}</subject> </target> <filter type=\"whenRepeated\" layout=\"${exception:format=Type}\" timeoutSeconds=\"300\" action=\"Ignore\" /> </target> </targets> <rules> <logger name='*' minlevel='Debug' writeTo='filter-mail'/> </rules> </nlog>","title":"FilteringWrapper target"},{"location":"FilteringWrapper-target/#configuration-syntax","text":"Filtering using condition: <targets> <target xsi:type=\"FilteringWrapper\" name=\"String\" condition=\"Condition\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Filtering using filter (Introduced with NLog 4.6.4): <targets> <target xsi:type=\"FilteringWrapper\" name=\"default\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> <filter xsi:type=\"whenRepeated\" layout=\"${message}\" timeoutSeconds=\"30\" action=\"Ignore\" /> </target> </targets>","title":"Configuration Syntax"},{"location":"FilteringWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"FilteringWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"FilteringWrapper-target/#filtering-options","text":"condition - Condition Expression . Log events who meet this condition will be forwarded to the wrapped target. Condition Required, unless having specified a filter . filter - Filter expression. For complex filtering logic like WhenRepeated-Filter . Introduced with NLog 4.6.4","title":"Filtering Options"},{"location":"FilteringWrapper-target/#examples","text":"","title":"Examples"},{"location":"FilteringWrapper-target/#repeat-filter","text":"Filter repeated LogEvents, so it will only send mail every 5 minutes (Introduced with NLog 4.6.4): <nlog> <targets> <target xsi:type=\"FilteringWrapper\" name=\"filter-mail\"> <target xsi:type=\"Mail\" name=\"instant-mail\"> <subject>${exception:format=Type}</subject> </target> <filter type=\"whenRepeated\" layout=\"${exception:format=Type}\" timeoutSeconds=\"300\" action=\"Ignore\" /> </target> </targets> <rules> <logger name='*' minlevel='Debug' writeTo='filter-mail'/> </rules> </nlog>","title":"Repeat filter"},{"location":"Fluent-API/","text":"\u26a0\ufe0f Marked obsolete with NLog 5.0. Replaced with Fluent-Logger-API Fluent API Writing info message via fluent API. using NLog.Fluent; _logger.Info() .Message(\"This is a test fluent message '{0}'.\", DateTime.Now.Ticks) .Property(\"Test\", \"InfoWrite\") .Write(); Writing error message. try { string text = File.ReadAllText(path); } catch (Exception ex) { _logger.Error() .Message(\"Error reading file '{0}'.\", path) .Exception(ex) .Property(\"Test\", \"ErrorWrite\") .Write(); } Caller Info Use the static Log class so you don't have to include loggers in all of classes. The static Log class using .net 4.5 caller info to get the logger from the file name. Writing info message via static Log class with fluent API. Log.Info() .Message(\"This is a test fluent message.\") .Property(\"Test\", \"InfoWrite\") .Write(); Writing error message. try { string text = File.ReadAllText(path); } catch (Exception ex) { Log.Error() .Message(\"Error reading file '{0}'.\", path) .Exception(ex) .Property(\"Test\", \"ErrorWrite\") .Write(); }","title":"Fluent API"},{"location":"Fluent-API/#fluent-api","text":"Writing info message via fluent API. using NLog.Fluent; _logger.Info() .Message(\"This is a test fluent message '{0}'.\", DateTime.Now.Ticks) .Property(\"Test\", \"InfoWrite\") .Write(); Writing error message. try { string text = File.ReadAllText(path); } catch (Exception ex) { _logger.Error() .Message(\"Error reading file '{0}'.\", path) .Exception(ex) .Property(\"Test\", \"ErrorWrite\") .Write(); }","title":"Fluent API"},{"location":"Fluent-API/#caller-info","text":"Use the static Log class so you don't have to include loggers in all of classes. The static Log class using .net 4.5 caller info to get the logger from the file name. Writing info message via static Log class with fluent API. Log.Info() .Message(\"This is a test fluent message.\") .Property(\"Test\", \"InfoWrite\") .Write(); Writing error message. try { string text = File.ReadAllText(path); } catch (Exception ex) { Log.Error() .Message(\"Error reading file '{0}'.\", path) .Exception(ex) .Property(\"Test\", \"ErrorWrite\") .Write(); }","title":"Caller Info"},{"location":"Fluent-Configuration-API/","text":"The NLog LogFactory has support for fluent setup of the initial NLog configuration. SetupLogFactory - LogFactory specific options. Introduced with NLog 5.0 SetupInternalLogger - InternalLogger specific options. Introduced with NLog 4.7 SetupExtensions - Registration of NLog extensions before loading configuration. Introduced with NLog 4.7 SetupSerialization - Override default log output for specific object types. Introduced with NLog 4.7 LoadConfigurationFromFile - Explicit load NLog config from xml file. Introduced with NLog 4.7 LoadConfigurationFromXml - Explicit load NLog config from xml content. Introduced with NLog 4.7 LoadConfiguration - Explicit build/adjust NLog config. Introduced with NLog 4.7 but heavily improved with NLog 5.0 Example with LoadConfiguration Build NLog config that writes everything to console: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().WriteToConsole() }); Build NLog config that writes to file and console: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteToConsole(); builder.ForLogger().FilterMinLevel(LogLevel.Debug).WriteToFile(fileName: \"App_${shortdate}.txt\"); }); Build NLog config that writes to custom target:: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteTo(new MyCustomTarget() { Layout = \"${message}\" }); }); Build NLog config that restricts output from noisy logger: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger(\"Microsoft.*\").WriteToNil(finalMinLevel: LogLevel.Warn); builder.ForLogger().WriteToConsole(); }); Example with LoadConfigurationFromAppSettings Loads NLog config from appsettings.json (with fallback to NLog.confg) and requires NLog.Web.AspNetCore : var logger = LogManager.Setup() .LoadConfigurationFromAppSettings() .GetCurrentClassLogger(); See also NLog configuration with appsettings.json Example with LoadConfigurationFromSection Loads NLog config from Microsoft Configuration Section, and requires NLog.Extensions.Logging : var config = new ConfigurationBuilder() .SetBasePath(basePath ?? Directory.GetCurrentDirectory()) .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true) .AddJsonFile($\"appsettings.{environment}.json\", optional: true) .AddEnvironmentVariables().Build(); var logger = LogManager.Setup() .LoadConfigurationFromSection(config) .GetCurrentClassLogger(); See also NLog configuration with appsettings.json Example with LoadConfigurationFromFile Ensure NLog config has been loaded, and fail with exception when not: NLog.LogManager.Setup().LoadConfigurationFromFile(optional: false); Example with LoadConfigurationFromXml Load NLog config from custom location (like assembly resource): var fileXmlContent = File.ReadAllText(xmlFilePath); NLog.LogManager.Setup().LoadConfigurationFromXml(fileXmlContent); Example with SetupExtensions To register a custom LayoutRenderer: NLog.LogManager.Setup().SetupExtensions(ext => ext.RegisterLayoutRenderer(\"trace_id\", (logevent) => CorrelationIdentifier.TraceId.ToString()) ); To register a custom Target: NLog.LogManager.Setup().SetupExtensions(ext => ext.RegisterTarget<MyNamespace.MyFirstTarget>(\"MyFirst\") ); Examples with SetupLogFactory Explicit configure the global NLog TimeSource: NLog.LogManager.Setup().SetupLogFactory(fac => fac.SetTimeSourcAccurateUtc() ); Explicit activate exceptions on configuration errors: NLog.LogManager.Setup().SetupLogFactory(fac => fac.SetThrowConfigExceptions(true) ); Explicit configure the global LogLevel threshold: NLog.LogManager.Setup().SetupLogFactory(fac => fac.SetGlobalThreshold(LogLevel.Info) ); Example with SetupInternalLogger Write internal warnings and errors to console output: NLog.LogManager.Setup().SetupExtensions(intern => intern.SetMinimumLogLevel(LogLevel.Warn).LogToConsole(true) ); Register event handler to be called on warnings and errors: NLog.LogManager.Setup().SetupExtensions(intern => intern.SetMinimumLogLevel(LogLevel.Warn).AddLogSubscription((sender, evt) => ReportEvent(evt.Message)) ); Example with SetupSerialization Override the defautlt object reflection for System.Net.WebException : NLog.LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<System.Net.WebException>(ex => new { Type = ex.GetType().ToString(), Message = ex.Message, StackTrace = ex.StackTrace, Source = ex.Source, InnerException = ex.InnerException, Status = ex.Status, Response = ex.Response.ToString(), // Call your custom method to render stream as string }) ); Skip default object reflection for ReadOnlyMemory<byte> : NLog.LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<ReadOnlyMemory<byte>>(obj => obj.Length) );","title":"Fluent Configuration API"},{"location":"Fluent-Configuration-API/#example-with-loadconfiguration","text":"Build NLog config that writes everything to console: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().WriteToConsole() }); Build NLog config that writes to file and console: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteToConsole(); builder.ForLogger().FilterMinLevel(LogLevel.Debug).WriteToFile(fileName: \"App_${shortdate}.txt\"); }); Build NLog config that writes to custom target:: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteTo(new MyCustomTarget() { Layout = \"${message}\" }); }); Build NLog config that restricts output from noisy logger: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger(\"Microsoft.*\").WriteToNil(finalMinLevel: LogLevel.Warn); builder.ForLogger().WriteToConsole(); });","title":"Example with LoadConfiguration"},{"location":"Fluent-Configuration-API/#example-with-loadconfigurationfromappsettings","text":"Loads NLog config from appsettings.json (with fallback to NLog.confg) and requires NLog.Web.AspNetCore : var logger = LogManager.Setup() .LoadConfigurationFromAppSettings() .GetCurrentClassLogger(); See also NLog configuration with appsettings.json","title":"Example with LoadConfigurationFromAppSettings"},{"location":"Fluent-Configuration-API/#example-with-loadconfigurationfromsection","text":"Loads NLog config from Microsoft Configuration Section, and requires NLog.Extensions.Logging : var config = new ConfigurationBuilder() .SetBasePath(basePath ?? Directory.GetCurrentDirectory()) .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true) .AddJsonFile($\"appsettings.{environment}.json\", optional: true) .AddEnvironmentVariables().Build(); var logger = LogManager.Setup() .LoadConfigurationFromSection(config) .GetCurrentClassLogger(); See also NLog configuration with appsettings.json","title":"Example with LoadConfigurationFromSection"},{"location":"Fluent-Configuration-API/#example-with-loadconfigurationfromfile","text":"Ensure NLog config has been loaded, and fail with exception when not: NLog.LogManager.Setup().LoadConfigurationFromFile(optional: false);","title":"Example with LoadConfigurationFromFile"},{"location":"Fluent-Configuration-API/#example-with-loadconfigurationfromxml","text":"Load NLog config from custom location (like assembly resource): var fileXmlContent = File.ReadAllText(xmlFilePath); NLog.LogManager.Setup().LoadConfigurationFromXml(fileXmlContent);","title":"Example with LoadConfigurationFromXml"},{"location":"Fluent-Configuration-API/#example-with-setupextensions","text":"To register a custom LayoutRenderer: NLog.LogManager.Setup().SetupExtensions(ext => ext.RegisterLayoutRenderer(\"trace_id\", (logevent) => CorrelationIdentifier.TraceId.ToString()) ); To register a custom Target: NLog.LogManager.Setup().SetupExtensions(ext => ext.RegisterTarget<MyNamespace.MyFirstTarget>(\"MyFirst\") );","title":"Example with SetupExtensions"},{"location":"Fluent-Configuration-API/#examples-with-setuplogfactory","text":"Explicit configure the global NLog TimeSource: NLog.LogManager.Setup().SetupLogFactory(fac => fac.SetTimeSourcAccurateUtc() ); Explicit activate exceptions on configuration errors: NLog.LogManager.Setup().SetupLogFactory(fac => fac.SetThrowConfigExceptions(true) ); Explicit configure the global LogLevel threshold: NLog.LogManager.Setup().SetupLogFactory(fac => fac.SetGlobalThreshold(LogLevel.Info) );","title":"Examples with SetupLogFactory"},{"location":"Fluent-Configuration-API/#example-with-setupinternallogger","text":"Write internal warnings and errors to console output: NLog.LogManager.Setup().SetupExtensions(intern => intern.SetMinimumLogLevel(LogLevel.Warn).LogToConsole(true) ); Register event handler to be called on warnings and errors: NLog.LogManager.Setup().SetupExtensions(intern => intern.SetMinimumLogLevel(LogLevel.Warn).AddLogSubscription((sender, evt) => ReportEvent(evt.Message)) );","title":"Example with SetupInternalLogger"},{"location":"Fluent-Configuration-API/#example-with-setupserialization","text":"Override the defautlt object reflection for System.Net.WebException : NLog.LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<System.Net.WebException>(ex => new { Type = ex.GetType().ToString(), Message = ex.Message, StackTrace = ex.StackTrace, Source = ex.Source, InnerException = ex.InnerException, Status = ex.Status, Response = ex.Response.ToString(), // Call your custom method to render stream as string }) ); Skip default object reflection for ReadOnlyMemory<byte> : NLog.LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<ReadOnlyMemory<byte>>(obj => obj.Length) );","title":"Example with SetupSerialization"},{"location":"Fluent-Logger-API/","text":"Fluent Logger API NLog 5.0 removed the Fluent -namespace, and introduced LogEventBuilder that skips allocation when LogLevel not enabled. The new fluent builder can be activated with one of these extensions methods for ILogger : ForLogEvent - Builds base LogEvent ForTraceEvent - Builds LogEvent with Trace-LogLevel ForDebugEvent - Builds LogEvent with Debug-LogLevel ForInfoEvent - Builds LogEvent with Info-LogLevel ForWarnEvent - Builds LogEvent with Warn-LogLevel ForErrorEvent - Builds LogEvent with Error-LogLevel ForFatalEvent - Builds LogEvent with Fatal-LogLevel ForExceptionEvent - Builds LogEvent with Exception and Error-LogLevel To complete the fluent builder then call Log() to capture available callsite information with help from Caller Member Attributes , and then writes the actual LogEvent to any configured NLog targets. Examples Writing Info Message _logger.ForInfoEvent() .Message(\"This is a fluent message {0}.\", \"test\") .Property(\"PropertyName\", \"PropertyValue\") .Log(); Writing Exception Message. try { string text = File.ReadAllText(path); } catch (Exception ex) { _logger.ForExceptionEvent(ex) .Message(\"Error reading file '{0}'.\", path) .Property(\"Test\", \"InfoWrite\") .Log(); }","title":"Fluent Logger API"},{"location":"Fluent-Logger-API/#fluent-logger-api","text":"NLog 5.0 removed the Fluent -namespace, and introduced LogEventBuilder that skips allocation when LogLevel not enabled. The new fluent builder can be activated with one of these extensions methods for ILogger : ForLogEvent - Builds base LogEvent ForTraceEvent - Builds LogEvent with Trace-LogLevel ForDebugEvent - Builds LogEvent with Debug-LogLevel ForInfoEvent - Builds LogEvent with Info-LogLevel ForWarnEvent - Builds LogEvent with Warn-LogLevel ForErrorEvent - Builds LogEvent with Error-LogLevel ForFatalEvent - Builds LogEvent with Fatal-LogLevel ForExceptionEvent - Builds LogEvent with Exception and Error-LogLevel To complete the fluent builder then call Log() to capture available callsite information with help from Caller Member Attributes , and then writes the actual LogEvent to any configured NLog targets.","title":"Fluent Logger API"},{"location":"Fluent-Logger-API/#examples","text":"","title":"Examples"},{"location":"Fluent-Logger-API/#writing-info-message","text":"_logger.ForInfoEvent() .Message(\"This is a fluent message {0}.\", \"test\") .Property(\"PropertyName\", \"PropertyValue\") .Log();","title":"Writing Info Message"},{"location":"Fluent-Logger-API/#writing-exception-message","text":"try { string text = File.ReadAllText(path); } catch (Exception ex) { _logger.ForExceptionEvent(ex) .Message(\"Error reading file '{0}'.\", path) .Property(\"Test\", \"InfoWrite\") .Log(); }","title":"Writing Exception Message."},{"location":"FormControl-target/","text":"Logs text to Windows.Forms.Control.Text property control of specified Name. Supported in .NET Configuration Syntax <targets> <target xsi:type=\"FormControl\" name=\"String\" layout=\"Layout\" append=\"Boolean\" reverseOrder=\"Boolean\" controlName=\"String\" formName=\"String\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Form Options append - Indicates whether log text should be appended to the text of the control instead of overwriting it. Boolean Default: True reverseOrder - Indicates whether log text should be appended or prepended. Boolean Default: False controlName - Name of control to which NLog will log write log text. Required. formName - Name of the Form on which the control is located.","title":"FormControl target"},{"location":"FormControl-target/#configuration-syntax","text":"<targets> <target xsi:type=\"FormControl\" name=\"String\" layout=\"Layout\" append=\"Boolean\" reverseOrder=\"Boolean\" controlName=\"String\" formName=\"String\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"FormControl-target/#parameters","text":"","title":"Parameters"},{"location":"FormControl-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"FormControl-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}","title":"Layout Options"},{"location":"FormControl-target/#form-options","text":"append - Indicates whether log text should be appended to the text of the control instead of overwriting it. Boolean Default: True reverseOrder - Indicates whether log text should be appended or prepended. Boolean Default: False controlName - Name of control to which NLog will log write log text. Required. formName - Name of the Form on which the control is located.","title":"Form Options"},{"location":"Gc-layout-renderer/","text":"The information about the garbage collector. Platforms Supported: All Configuration Syntax ${gc:property=Enum} Parameters Rendering Options property - Property to retrieve. Default: TotalMemory Possible values: CollectionCount0 - The number of Gen0 collections. CollectionCount1 - The number of Gen1 collections. CollectionCount2 - The number of Gen2 collections. MaxGeneration - Maximum generation number supported by GC. TotalMemory - Total number of bytes currently thought to be allocated. TotalMemoryForceCollection - Total memory allocated (perform full garbage collection first)","title":"Gc layout renderer"},{"location":"Gc-layout-renderer/#configuration-syntax","text":"${gc:property=Enum}","title":"Configuration Syntax"},{"location":"Gc-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Gc-layout-renderer/#rendering-options","text":"property - Property to retrieve. Default: TotalMemory Possible values: CollectionCount0 - The number of Gen0 collections. CollectionCount1 - The number of Gen1 collections. CollectionCount2 - The number of Gen2 collections. MaxGeneration - Maximum generation number supported by GC. TotalMemory - Total number of bytes currently thought to be allocated. TotalMemoryForceCollection - Total memory allocated (perform full garbage collection first)","title":"Rendering Options"},{"location":"Gdc-layout-renderer/","text":"Global Diagnostic Context (GDC) - Dictionary structure for global settings for the entire application-instance. Platforms Supported: All (NLog 4.1 allows storing any Object type, not just String ) GDC properties should try to remain static and immutable during the lifetime of the application/process. Do NOT modify the GDC as part of the logging operations, as it will have unwanted side-effects. If needing to include additional context information for a specific logevent, then consider using Logger.WithProperty() or Logger.PushScopeProperty() . See also NLog Context . Configuration Syntax ${gdc:item=String} Parameters Rendering Options item - Name of the item. Required. Note Before NLog 5.0 it was case-sensitive. culture - The culture used for rendering. Introduced in NLog 5.0. Default value is CultureInfo.InvariantCulture format - Format for conversion from object to string. Introduced in NLog 4.5. @ means serialize object properties into Json-format. Example Simple Properties The following example demonstrates the basic usage of the Global Diagnostics Context. GlobalDiagnosticsContext.Set(\"myDataBase\",\"someValue\"); GlobalDiagnosticsContext.Set(\"informationGroup\", new { One = 1, Two = 2 }); GlobalDiagnosticsContext.Set(\"anyObject\", anyObjectReferenceOrString); Add the following to your logger configuration to reference the above properties: ${gdc:item=myDatabase} ${gdc:item=informationGroup} ${gdc:item=anyObject} Dynamic Properties In some instances you may have thread-local information that you want to make available to all logger instances in the current process. This can be achieved with the Mapped Diagnostics Context , but requires that your create the property within the context of every thread that may reference it. Using Dynamic Properties and the Global Diagnostics Context, you can achieve the same result while only creating the property once. public class ManagedThreadIdProperty { public static readonly ManagedThreadIdProperty Default = new ManagedThreadIdProperty(); private ManagedThreadIdProperty () { } public override string ToString () { return System.Threading.Thread.CurrentThread.ManagedThreadId.ToString(); } } During initialization, add the following code: GlobalDiagnosticsContext.Set(\"ManagedThreadId\", ManagedThreadIdProperty.Default); To reference the ManagedThreadId Global Diagnostics Context property. ${gdc:item=ManagedThreadId} Notes When rendering context items, the item is passed to String.Format along with the current configuration's DefaultCultureInfo value.","title":"Gdc layout renderer"},{"location":"Gdc-layout-renderer/#configuration-syntax","text":"${gdc:item=String}","title":"Configuration Syntax"},{"location":"Gdc-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Gdc-layout-renderer/#rendering-options","text":"item - Name of the item. Required. Note Before NLog 5.0 it was case-sensitive. culture - The culture used for rendering. Introduced in NLog 5.0. Default value is CultureInfo.InvariantCulture format - Format for conversion from object to string. Introduced in NLog 4.5. @ means serialize object properties into Json-format.","title":"Rendering Options"},{"location":"Gdc-layout-renderer/#example","text":"","title":"Example"},{"location":"Gdc-layout-renderer/#simple-properties","text":"The following example demonstrates the basic usage of the Global Diagnostics Context. GlobalDiagnosticsContext.Set(\"myDataBase\",\"someValue\"); GlobalDiagnosticsContext.Set(\"informationGroup\", new { One = 1, Two = 2 }); GlobalDiagnosticsContext.Set(\"anyObject\", anyObjectReferenceOrString); Add the following to your logger configuration to reference the above properties: ${gdc:item=myDatabase} ${gdc:item=informationGroup} ${gdc:item=anyObject}","title":"Simple Properties"},{"location":"Gdc-layout-renderer/#dynamic-properties","text":"In some instances you may have thread-local information that you want to make available to all logger instances in the current process. This can be achieved with the Mapped Diagnostics Context , but requires that your create the property within the context of every thread that may reference it. Using Dynamic Properties and the Global Diagnostics Context, you can achieve the same result while only creating the property once. public class ManagedThreadIdProperty { public static readonly ManagedThreadIdProperty Default = new ManagedThreadIdProperty(); private ManagedThreadIdProperty () { } public override string ToString () { return System.Threading.Thread.CurrentThread.ManagedThreadId.ToString(); } } During initialization, add the following code: GlobalDiagnosticsContext.Set(\"ManagedThreadId\", ManagedThreadIdProperty.Default); To reference the ManagedThreadId Global Diagnostics Context property. ${gdc:item=ManagedThreadId}","title":"Dynamic Properties"},{"location":"Gdc-layout-renderer/#notes","text":"When rendering context items, the item is passed to String.Format along with the current configuration's DefaultCultureInfo value.","title":"Notes"},{"location":"Getting-started-with-.NET-Core-2---Console-application/","text":"\u26a0\ufe0f ASP.NET Core users should use the ASP.NET Core tutorial Description Explains how to setup NLog as logging provider for .NET Core and Microsoft Extension Logging (MEL). \u2139\ufe0f See also example in GitHub Notice that NLog can be used on .NET Core without help from Microsoft Extension Logging and NLog.Extension.Hosting. See standard NLog Tutorial . 0. Create a new .NET Core console project In Visual Studio 2017, using .NET 4.6.1+ or .NET Core 2 1. Add dependency in csproj manually or using NuGet Install: The package NLog.Extensions.Logging The package Microsoft.Extensions.DependencyInjection - or use another DI library. The package Microsoft.Extensions.Configuration.Json (used in Main method SetBasePath + AddJsonFile ) Update the NLog package if possible e.g. <ItemGroup> <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.0\" /> <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.1.0\" /> <PackageReference Include=\"NLog\" Version=\"4.6.5\" /> <PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.5.1\" /> </ItemGroup> 2. Create a nlog.config file. Create nlog.config (lowercase all) file in the root of your application project (File Properties: Copy Always) We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <!-- XSD manual extracted from package NLog.Schema: https://www.nuget.org/packages/NLog.Schema--> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xsi:schemaLocation=\"NLog NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogFile=\"c:\\temp\\console-example-internal.log\" internalLogLevel=\"Info\" > <!-- the targets to write to --> <targets> <!-- write logs to file --> <target xsi:type=\"File\" name=\"logfile\" fileName=\"c:\\temp\\console-example.log\" layout=\"${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}\" /> <target xsi:type=\"Console\" name=\"logconsole\" layout=\"${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"logfile,logconsole\" /> </rules> </nlog> It is recommended to read the NLog Tutorial . For more detailed information about config file can be found here . If you like to include other targets or layout renderers, check the Platform support . Ensure to configure your project-file to copy NLog.config to the output directory: <ItemGroup> <None Update=\"nlog.config\" CopyToOutputDirectory=\"Always\" /> </ItemGroup> 3. Update your program 3.1 Create your runner class public class Runner { private readonly ILogger<Runner> _logger; public Runner(ILogger<Runner> logger) { _logger = logger; } public void DoAction(string name) { _logger.LogDebug(20, \"Doing hard work! {Action}\", name); } } 3.2 Setup Microsoft Logging with Dependency Injection using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using NLog; using NLog.Extensions.Logging; static void Main(string[] args) { var logger = LogManager.GetCurrentClassLogger(); try { var config = new ConfigurationBuilder() .SetBasePath(System.IO.Directory.GetCurrentDirectory()) //From NuGet Package Microsoft.Extensions.Configuration.Json .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true) .Build(); using var servicesProvider = new ServiceCollection() .AddTransient<Runner>() // Runner is the custom class .AddLogging(loggingBuilder => { // configure Logging with NLog loggingBuilder.ClearProviders(); loggingBuilder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); loggingBuilder.AddNLog(config); }).BuildServiceProvider(); var runner = servicesProvider.GetRequiredService<Runner>(); runner.DoAction(\"Action1\"); Console.WriteLine(\"Press ANY key to exit\"); Console.ReadKey(); } catch (Exception ex) { // NLog: catch any exception and log it. logger.Error(ex, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) LogManager.Shutdown(); } } 4 Example output On screen: In file: 2017/10/16 23:08:46.479|DEBUG|Doing hard work! Action1 |ConsoleExample.Runner|Action=Action1, EventId_Id=20, EventId_Name=, EventId=20 A minimal example If you need a minimal solution, e.g. for a simple console application, and there is no need to use dependency injection, you can create a Microsoft Extensions Logging compatible logger with a single line of code. For example, this is useful in cases where you call existing libraries that take such a logger as a parameter, and you still want to use the power of NLog. using Microsoft.Extensions.Logging; using NLog.Extensions.Logging; namespace ConsoleExample { internal static class Program { private static void Main() { var logger = LoggerFactory.Create(builder => builder.AddNLog()).CreateLogger<Program>(); logger.LogInformation(\"Program has started.\"); Console.ReadKey(); } } } See also: NLog GetCurrentClassLogger and Microsoft ILogger Configure NLog Targets for output Next step, see Configure NLog with nlog.config","title":"Getting started with .NET Core 2   Console application"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#description","text":"Explains how to setup NLog as logging provider for .NET Core and Microsoft Extension Logging (MEL). \u2139\ufe0f See also example in GitHub Notice that NLog can be used on .NET Core without help from Microsoft Extension Logging and NLog.Extension.Hosting. See standard NLog Tutorial .","title":"Description"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#0-create-a-new-net-core-console-project","text":"In Visual Studio 2017, using .NET 4.6.1+ or .NET Core 2","title":"0. Create a new .NET Core console project"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#1-add-dependency-in-csproj-manually-or-using-nuget","text":"Install: The package NLog.Extensions.Logging The package Microsoft.Extensions.DependencyInjection - or use another DI library. The package Microsoft.Extensions.Configuration.Json (used in Main method SetBasePath + AddJsonFile ) Update the NLog package if possible e.g. <ItemGroup> <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.0\" /> <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.1.0\" /> <PackageReference Include=\"NLog\" Version=\"4.6.5\" /> <PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.5.1\" /> </ItemGroup>","title":"1. Add dependency in csproj manually or using NuGet"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#2-create-a-nlogconfig-file","text":"Create nlog.config (lowercase all) file in the root of your application project (File Properties: Copy Always) We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <!-- XSD manual extracted from package NLog.Schema: https://www.nuget.org/packages/NLog.Schema--> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xsi:schemaLocation=\"NLog NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogFile=\"c:\\temp\\console-example-internal.log\" internalLogLevel=\"Info\" > <!-- the targets to write to --> <targets> <!-- write logs to file --> <target xsi:type=\"File\" name=\"logfile\" fileName=\"c:\\temp\\console-example.log\" layout=\"${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}\" /> <target xsi:type=\"Console\" name=\"logconsole\" layout=\"${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"logfile,logconsole\" /> </rules> </nlog> It is recommended to read the NLog Tutorial . For more detailed information about config file can be found here . If you like to include other targets or layout renderers, check the Platform support . Ensure to configure your project-file to copy NLog.config to the output directory: <ItemGroup> <None Update=\"nlog.config\" CopyToOutputDirectory=\"Always\" /> </ItemGroup>","title":"2. Create a nlog.config file."},{"location":"Getting-started-with-.NET-Core-2---Console-application/#3-update-your-program","text":"","title":"3. Update your program"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#31-create-your-runner-class","text":"public class Runner { private readonly ILogger<Runner> _logger; public Runner(ILogger<Runner> logger) { _logger = logger; } public void DoAction(string name) { _logger.LogDebug(20, \"Doing hard work! {Action}\", name); } }","title":"3.1 Create your runner class"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#32-setup-microsoft-logging-with-dependency-injection","text":"using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using NLog; using NLog.Extensions.Logging; static void Main(string[] args) { var logger = LogManager.GetCurrentClassLogger(); try { var config = new ConfigurationBuilder() .SetBasePath(System.IO.Directory.GetCurrentDirectory()) //From NuGet Package Microsoft.Extensions.Configuration.Json .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true) .Build(); using var servicesProvider = new ServiceCollection() .AddTransient<Runner>() // Runner is the custom class .AddLogging(loggingBuilder => { // configure Logging with NLog loggingBuilder.ClearProviders(); loggingBuilder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); loggingBuilder.AddNLog(config); }).BuildServiceProvider(); var runner = servicesProvider.GetRequiredService<Runner>(); runner.DoAction(\"Action1\"); Console.WriteLine(\"Press ANY key to exit\"); Console.ReadKey(); } catch (Exception ex) { // NLog: catch any exception and log it. logger.Error(ex, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) LogManager.Shutdown(); } }","title":"3.2 Setup Microsoft Logging with Dependency Injection"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#4-example-output","text":"On screen: In file: 2017/10/16 23:08:46.479|DEBUG|Doing hard work! Action1 |ConsoleExample.Runner|Action=Action1, EventId_Id=20, EventId_Name=, EventId=20","title":"4 Example output"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#a-minimal-example","text":"If you need a minimal solution, e.g. for a simple console application, and there is no need to use dependency injection, you can create a Microsoft Extensions Logging compatible logger with a single line of code. For example, this is useful in cases where you call existing libraries that take such a logger as a parameter, and you still want to use the power of NLog. using Microsoft.Extensions.Logging; using NLog.Extensions.Logging; namespace ConsoleExample { internal static class Program { private static void Main() { var logger = LoggerFactory.Create(builder => builder.AddNLog()).CreateLogger<Program>(); logger.LogInformation(\"Program has started.\"); Console.ReadKey(); } } } See also: NLog GetCurrentClassLogger and Microsoft ILogger","title":"A minimal example"},{"location":"Getting-started-with-.NET-Core-2---Console-application/#configure-nlog-targets-for-output","text":"Next step, see Configure NLog with nlog.config","title":"Configure NLog Targets for output"},{"location":"Getting-started-with-ASP.NET-Core-2/","text":"\u26a0\ufe0f Missing the trace/debug logs in .NET Core 2? Check your appsettings.json \u2139\ufe0f See also example in GitHub This tutorial is for ASP.NET Core 2. For ASP.NET Core 6, check Getting started with ASP.NET Core 6 For ASP.NET Core 5, check Getting started with ASP.NET Core 5 For ASP.NET Core 3, check Getting started with ASP.NET Core 3 For ASP.NET Core 1? Go here! Note: .NET 4.6+ or .NET standard 2 are required 0. Create a new ASP.NET Core project In Visual Studio 2017. 1. Add dependency in csproj manually or using NuGet Install the latest: - NLog.Web.AspNetCore 4.8+ - Update the NLog package if possible in csproj: <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.*\" /> <PackageReference Include=\"NLog\" Version=\"4.*\" /> 2. Create a nlog.config file. Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Info\" internalLogFile=\"c:\\temp\\internal-nlog.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- write logs to file --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- another file log, only own logs. Uses some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Skip non-critical Microsoft logs and so log only own logs--> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <!-- BlackHole without writeTo --> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft 3. Enable copy to bin folder Enable copy to bin folder for nlog.config or edit .csproj file manually and add: <ItemGroup> <Content Update=\"nlog.config\" CopyToOutputDirectory=\"PreserveNewest\" /> </ItemGroup> 4. Update program.cs Update the program.cs using NLog.Web; using Microsoft.Extensions.Logging; public static void Main(string[] args) { // NLog: setup the logger first to catch all errors var logger = NLog.LogManager.Setup().RegisterNLogWeb().GetCurrentClassLogger(); try { logger.Debug(\"init main\"); CreateWebHostBuilder(args).Build().Run(); } catch (Exception ex) { //NLog: catch setup errors logger.Error(ex, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } } public static IWebHostBuilder CreateWebHostBuilder(string[] args) => WebHost.CreateDefaultBuilder(args) .UseStartup<Startup>() .ConfigureLogging(logging => { logging.ClearProviders(); logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); }) .UseNLog(); // NLog: setup NLog for Dependency injection 5. Configure appsettings.json The Logging configuration specified in appsettings.json overrides any call to SetMinimumLevel . So either remove \"Default\": or adjust it correctly to your needs. { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Information\" } } } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json 6. Write logs Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; } public IActionResult Index() { _logger.LogInformation(\"Index page says hello\"); return View(); } 7. Example Output When starting the ASP.NET Core website, we get two files: nlog-own-2017-10-10.log 2017-10-10 23:40:29.5143||DEBUG|ASP.NET_Core_2___VS2017.Program|init main |url: |action: 2017-10-10 23:40:32.1326|0|INFO|ASP.NET_Core_2___VS2017.Controllers.HomeController|Hello, this is the index! |url: http://localhost/|action: Index nlog-all-2017-10-10.log 2017-10-10 23:40:29.5143||DEBUG|ASP.NET_Core_2___VS2017.Program|init main 2017-10-10 23:40:30.9739|0|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\\Users\\j.verdurmen\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 2017-10-10 23:40:30.9897|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\j.verdurmen\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-bfd1ce07-8dc6-4eef-a51a-d21ddb547109.xml'. 2017-10-10 23:40:31.0004|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109}. 2017-10-10 23:40:31.0124|13|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver|Considering key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109} with expiration date 2017-12-28 19:01:07Z as default key. 2017-10-10 23:40:31.0422|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2017-10-10 23:40:31.0422|51|DEBUG|Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor|Decrypting secret element using Windows DPAPI. 2017-10-10 23:40:31.0422|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2017-10-10 23:40:31.0422|4|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 2017-10-10 23:40:31.0543|3|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 2017-10-10 23:40:31.0543|2|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider|Using key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109} as the default key. 2017-10-10 23:40:31.0543|0|DEBUG|Microsoft.AspNetCore.DataProtection.Internal.DataProtectionStartupFilter|Key ring with default key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109} was loaded during application startup. 2017-10-10 23:40:31.4080|3|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Hosting starting 2017-10-10 23:40:31.5508|4|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Hosting started 2017-10-10 23:40:31.5508|0|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Loaded hosting startup assembly ASP.NET Core 2 - VS2017 2017-10-10 23:40:31.5526|0|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Loaded hosting startup assembly Microsoft.AspNetCore.ApplicationInsights.HostingStartup 2017-10-10 23:40:31.5526|0|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Loaded hosting startup assembly Microsoft.AspNetCore.Server.IISIntegration 2017-10-10 23:40:31.6909|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" started. 2017-10-10 23:40:31.6909|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK65\" started. 2017-10-10 23:40:31.7418|19|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK65\" reset. 2017-10-10 23:40:31.7418|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK65\" disconnecting. 2017-10-10 23:40:31.7418|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK65\" sending FIN. 2017-10-10 23:40:31.7591|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK65\" stopped. 2017-10-10 23:40:31.8153|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/ 2017-10-10 23:40:31.8607|4|DEBUG|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The request path / does not match a supported file type 2017-10-10 23:40:32.0160|1|DEBUG|Microsoft.AspNetCore.Routing.RouteBase|Request successfully matched the route with name 'default' and template '{controller=Home}/{action=Index}/{id?}'. 2017-10-10 23:40:32.1120|1|DEBUG|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executing action ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017) 2017-10-10 23:40:32.1326|1|INFO|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executing action method ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017) with arguments ((null)) - ModelState is Valid 2017-10-10 23:40:32.1326|0|INFO|ASP.NET_Core_2___VS2017.Controllers.HomeController|Hello, this is the index! 2017-10-10 23:40:32.1620|2|DEBUG|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executed action method ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017), returned result Microsoft.AspNetCore.Mvc.ViewResult. 2017-10-10 23:40:32.1620|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view 'Index' in controller 'Home'. 2017-10-10 23:40:33.6906|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Home\\Index.cshtml' started. 2017-10-10 23:40:35.7180|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Home\\Index.cshtml' completed in 2024.1338ms. 2017-10-10 23:40:35.7988|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\_ViewStart.cshtml' started. 2017-10-10 23:40:35.8637|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\_ViewStart.cshtml' completed in 63.9912ms. 2017-10-10 23:40:35.8710|2|DEBUG|Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor|The view 'Index' was found. 2017-10-10 23:40:35.8710|1|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor|Executing ViewResult, running view at path /Views/Home/Index.cshtml. 2017-10-10 23:40:35.9577|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view '_Layout' in controller 'Home'. 2017-10-10 23:40:36.0454|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Shared\\_Layout.cshtml' started. 2017-10-10 23:40:36.2080|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Shared\\_Layout.cshtml' completed in 161.8031ms. 2017-10-10 23:40:36.2209|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' initialized. 2017-10-10 23:40:36.2209|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' processed. 2017-10-10 23:40:36.2367|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' initialized. 2017-10-10 23:40:36.2367|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' processed. 2017-10-10 23:40:36.2942|2|INFO|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executed action ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017) in 4181.1451ms 2017-10-10 23:40:36.3036|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" completed keep alive response. 2017-10-10 23:40:36.3273|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 4515.4954ms 200 text/html; charset=utf-8 2017-10-10 23:40:36.3273|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" started. 2017-10-10 23:40:36.3273|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" started. 2017-10-10 23:40:36.3386|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/bootstrap/dist/css/bootstrap.css 2017-10-10 23:40:36.3386|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/css/site.css 2017-10-10 23:40:36.3610|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\css\\site.css' 2017-10-10 23:40:36.3610|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.css'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.css' 2017-10-10 23:40:36.4312|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" completed keep alive response. 2017-10-10 23:40:36.4312|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 90.8043ms 200 text/css 2017-10-10 23:40:36.4312|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" completed keep alive response. 2017-10-10 23:40:36.4312|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 98.4683ms 200 text/css 2017-10-10 23:40:36.4710|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" started. 2017-10-10 23:40:36.4710|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" started. 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/jquery/dist/jquery.js 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/bootstrap/dist/js/bootstrap.js 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner2.svg 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/js/site.js?v=ji3-IxbEzYWjzzLCGkF1KDjrT2jLbbrSYXw-AhMPNIA 2017-10-10 23:40:36.4819|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" started. 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\js\\site.js' 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/jquery/dist/jquery.js'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\jquery\\dist\\jquery.js' 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner2.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner2.svg' 2017-10-10 23:40:36.4933|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" completed keep alive response. 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.js'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.js' 2017-10-10 23:40:36.4933|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 20.2541ms 200 application/javascript 2017-10-10 23:40:36.5143|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" completed keep alive response. 2017-10-10 23:40:36.5143|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 32.361ms 200 image/svg+xml 2017-10-10 23:40:36.5143|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2 2017-10-10 23:40:36.5401|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\bootstrap\\dist\\fonts\\glyphicons-halflings-regular.woff2' 2017-10-10 23:40:36.5401|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner1.svg 2017-10-10 23:40:36.5401|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner1.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner1.svg' 2017-10-10 23:40:36.5539|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" completed keep alive response. 2017-10-10 23:40:36.5539|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 39.9074ms 200 font/woff2 2017-10-10 23:40:36.5745|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner3.svg 2017-10-10 23:40:36.5745|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner4.svg 2017-10-10 23:40:36.5951|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" completed keep alive response. 2017-10-10 23:40:36.6015|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 119.5389ms 200 application/javascript 2017-10-10 23:40:36.6015|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner4.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner4.svg' 2017-10-10 23:40:36.5745|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner3.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner3.svg' 2017-10-10 23:40:36.6946|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" completed keep alive response. 2017-10-10 23:40:36.6703|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" completed keep alive response. 2017-10-10 23:40:36.6946|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 119.7561ms 200 image/svg+xml 2017-10-10 23:40:36.6015|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" completed keep alive response. 2017-10-10 23:40:36.7137|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 170.2078ms 200 image/svg+xml 2017-10-10 23:40:36.7137|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" completed keep alive response. 2017-10-10 23:40:36.7560|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 181.4017ms 200 image/svg+xml 2017-10-10 23:40:36.6946|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 216.2838ms 200 application/javascript 2017-10-10 23:42:21.6657|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK68\" received FIN. 2017-10-10 23:42:21.6657|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK67\" received FIN. 2017-10-10 23:42:21.6657|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" disconnecting. 2017-10-10 23:42:21.6657|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK69\" received FIN. 2017-10-10 23:42:21.6657|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" disconnecting. 2017-10-10 23:42:21.6657|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK67\" sending FIN. 2017-10-10 23:42:21.6657|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" disconnecting. 2017-10-10 23:42:21.6657|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" stopped. 2017-10-10 23:42:21.6800|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK66\" received FIN. 2017-10-10 23:42:21.6800|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" disconnecting. 2017-10-10 23:42:21.6657|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK69\" sending FIN. 2017-10-10 23:42:21.6657|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" stopped. 2017-10-10 23:42:21.6800|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK6A\" received FIN. 2017-10-10 23:42:21.6800|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" disconnecting. 2017-10-10 23:42:21.6800|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK64\" received FIN. 2017-10-10 23:42:21.6800|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" disconnecting. 2017-10-10 23:42:21.6800|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK68\" sending FIN. 2017-10-10 23:42:21.6800|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" stopped. 2017-10-10 23:42:21.6800|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK66\" sending FIN. 2017-10-10 23:42:21.6800|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" stopped. 2017-10-10 23:42:21.6943|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" stopped. 2017-10-10 23:42:21.6943|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK6A\" sending FIN. 2017-10-10 23:42:21.6943|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK64\" sending FIN. 2017-10-10 23:42:21.6943|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" stopped. Configure NLog Targets for output Next step, see Configure NLog with nlog.config","title":"Getting started with ASP.NET Core 2"},{"location":"Getting-started-with-ASP.NET-Core-2/#0-create-a-new-aspnet-core-project","text":"In Visual Studio 2017.","title":"0. Create a new ASP.NET Core project"},{"location":"Getting-started-with-ASP.NET-Core-2/#1-add-dependency-in-csproj-manually-or-using-nuget","text":"Install the latest: - NLog.Web.AspNetCore 4.8+ - Update the NLog package if possible in csproj: <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.*\" /> <PackageReference Include=\"NLog\" Version=\"4.*\" />","title":"1. Add dependency in csproj manually or using NuGet"},{"location":"Getting-started-with-ASP.NET-Core-2/#2-create-a-nlogconfig-file","text":"Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Info\" internalLogFile=\"c:\\temp\\internal-nlog.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- write logs to file --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- another file log, only own logs. Uses some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Skip non-critical Microsoft logs and so log only own logs--> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <!-- BlackHole without writeTo --> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft","title":"2. Create a nlog.config file."},{"location":"Getting-started-with-ASP.NET-Core-2/#3-enable-copy-to-bin-folder","text":"Enable copy to bin folder for nlog.config or edit .csproj file manually and add: <ItemGroup> <Content Update=\"nlog.config\" CopyToOutputDirectory=\"PreserveNewest\" /> </ItemGroup>","title":"3. Enable copy to bin folder"},{"location":"Getting-started-with-ASP.NET-Core-2/#4-update-programcs","text":"Update the program.cs using NLog.Web; using Microsoft.Extensions.Logging; public static void Main(string[] args) { // NLog: setup the logger first to catch all errors var logger = NLog.LogManager.Setup().RegisterNLogWeb().GetCurrentClassLogger(); try { logger.Debug(\"init main\"); CreateWebHostBuilder(args).Build().Run(); } catch (Exception ex) { //NLog: catch setup errors logger.Error(ex, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } } public static IWebHostBuilder CreateWebHostBuilder(string[] args) => WebHost.CreateDefaultBuilder(args) .UseStartup<Startup>() .ConfigureLogging(logging => { logging.ClearProviders(); logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); }) .UseNLog(); // NLog: setup NLog for Dependency injection","title":"4. Update program.cs"},{"location":"Getting-started-with-ASP.NET-Core-2/#5-configure-appsettingsjson","text":"The Logging configuration specified in appsettings.json overrides any call to SetMinimumLevel . So either remove \"Default\": or adjust it correctly to your needs. { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Information\" } } } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json","title":"5. Configure appsettings.json"},{"location":"Getting-started-with-ASP.NET-Core-2/#6-write-logs","text":"Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; } public IActionResult Index() { _logger.LogInformation(\"Index page says hello\"); return View(); }","title":"6. Write logs"},{"location":"Getting-started-with-ASP.NET-Core-2/#7-example-output","text":"When starting the ASP.NET Core website, we get two files:","title":"7. Example Output"},{"location":"Getting-started-with-ASP.NET-Core-2/#nlog-own-2017-10-10log","text":"2017-10-10 23:40:29.5143||DEBUG|ASP.NET_Core_2___VS2017.Program|init main |url: |action: 2017-10-10 23:40:32.1326|0|INFO|ASP.NET_Core_2___VS2017.Controllers.HomeController|Hello, this is the index! |url: http://localhost/|action: Index","title":"nlog-own-2017-10-10.log"},{"location":"Getting-started-with-ASP.NET-Core-2/#nlog-all-2017-10-10log","text":"2017-10-10 23:40:29.5143||DEBUG|ASP.NET_Core_2___VS2017.Program|init main 2017-10-10 23:40:30.9739|0|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\\Users\\j.verdurmen\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 2017-10-10 23:40:30.9897|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\j.verdurmen\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-bfd1ce07-8dc6-4eef-a51a-d21ddb547109.xml'. 2017-10-10 23:40:31.0004|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109}. 2017-10-10 23:40:31.0124|13|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver|Considering key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109} with expiration date 2017-12-28 19:01:07Z as default key. 2017-10-10 23:40:31.0422|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2017-10-10 23:40:31.0422|51|DEBUG|Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor|Decrypting secret element using Windows DPAPI. 2017-10-10 23:40:31.0422|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2017-10-10 23:40:31.0422|4|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 2017-10-10 23:40:31.0543|3|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 2017-10-10 23:40:31.0543|2|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider|Using key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109} as the default key. 2017-10-10 23:40:31.0543|0|DEBUG|Microsoft.AspNetCore.DataProtection.Internal.DataProtectionStartupFilter|Key ring with default key {bfd1ce07-8dc6-4eef-a51a-d21ddb547109} was loaded during application startup. 2017-10-10 23:40:31.4080|3|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Hosting starting 2017-10-10 23:40:31.5508|4|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Hosting started 2017-10-10 23:40:31.5508|0|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Loaded hosting startup assembly ASP.NET Core 2 - VS2017 2017-10-10 23:40:31.5526|0|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Loaded hosting startup assembly Microsoft.AspNetCore.ApplicationInsights.HostingStartup 2017-10-10 23:40:31.5526|0|DEBUG|Microsoft.AspNetCore.Hosting.Internal.WebHost|Loaded hosting startup assembly Microsoft.AspNetCore.Server.IISIntegration 2017-10-10 23:40:31.6909|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" started. 2017-10-10 23:40:31.6909|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK65\" started. 2017-10-10 23:40:31.7418|19|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK65\" reset. 2017-10-10 23:40:31.7418|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK65\" disconnecting. 2017-10-10 23:40:31.7418|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK65\" sending FIN. 2017-10-10 23:40:31.7591|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK65\" stopped. 2017-10-10 23:40:31.8153|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/ 2017-10-10 23:40:31.8607|4|DEBUG|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The request path / does not match a supported file type 2017-10-10 23:40:32.0160|1|DEBUG|Microsoft.AspNetCore.Routing.RouteBase|Request successfully matched the route with name 'default' and template '{controller=Home}/{action=Index}/{id?}'. 2017-10-10 23:40:32.1120|1|DEBUG|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executing action ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017) 2017-10-10 23:40:32.1326|1|INFO|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executing action method ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017) with arguments ((null)) - ModelState is Valid 2017-10-10 23:40:32.1326|0|INFO|ASP.NET_Core_2___VS2017.Controllers.HomeController|Hello, this is the index! 2017-10-10 23:40:32.1620|2|DEBUG|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executed action method ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017), returned result Microsoft.AspNetCore.Mvc.ViewResult. 2017-10-10 23:40:32.1620|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view 'Index' in controller 'Home'. 2017-10-10 23:40:33.6906|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Home\\Index.cshtml' started. 2017-10-10 23:40:35.7180|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Home\\Index.cshtml' completed in 2024.1338ms. 2017-10-10 23:40:35.7988|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\_ViewStart.cshtml' started. 2017-10-10 23:40:35.8637|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\_ViewStart.cshtml' completed in 63.9912ms. 2017-10-10 23:40:35.8710|2|DEBUG|Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor|The view 'Index' was found. 2017-10-10 23:40:35.8710|1|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor|Executing ViewResult, running view at path /Views/Home/Index.cshtml. 2017-10-10 23:40:35.9577|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view '_Layout' in controller 'Home'. 2017-10-10 23:40:36.0454|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Shared\\_Layout.cshtml' started. 2017-10-10 23:40:36.2080|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler|Compilation of the generated code for the Razor file at 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\Views\\Shared\\_Layout.cshtml' completed in 161.8031ms. 2017-10-10 23:40:36.2209|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' initialized. 2017-10-10 23:40:36.2209|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' processed. 2017-10-10 23:40:36.2367|2|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' initialized. 2017-10-10 23:40:36.2367|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper|Tag helper component 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup.JavaScriptSnippetTagHelperComponent' processed. 2017-10-10 23:40:36.2942|2|INFO|Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker|Executed action ASP.NET_Core_2___VS2017.Controllers.HomeController.Index (ASP.NET Core 2 - VS2017) in 4181.1451ms 2017-10-10 23:40:36.3036|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" completed keep alive response. 2017-10-10 23:40:36.3273|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 4515.4954ms 200 text/html; charset=utf-8 2017-10-10 23:40:36.3273|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" started. 2017-10-10 23:40:36.3273|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" started. 2017-10-10 23:40:36.3386|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/bootstrap/dist/css/bootstrap.css 2017-10-10 23:40:36.3386|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/css/site.css 2017-10-10 23:40:36.3610|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\css\\site.css' 2017-10-10 23:40:36.3610|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.css'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.css' 2017-10-10 23:40:36.4312|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" completed keep alive response. 2017-10-10 23:40:36.4312|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 90.8043ms 200 text/css 2017-10-10 23:40:36.4312|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" completed keep alive response. 2017-10-10 23:40:36.4312|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 98.4683ms 200 text/css 2017-10-10 23:40:36.4710|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" started. 2017-10-10 23:40:36.4710|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" started. 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/jquery/dist/jquery.js 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/bootstrap/dist/js/bootstrap.js 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner2.svg 2017-10-10 23:40:36.4819|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/js/site.js?v=ji3-IxbEzYWjzzLCGkF1KDjrT2jLbbrSYXw-AhMPNIA 2017-10-10 23:40:36.4819|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" started. 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\js\\site.js' 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/jquery/dist/jquery.js'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\jquery\\dist\\jquery.js' 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner2.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner2.svg' 2017-10-10 23:40:36.4933|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" completed keep alive response. 2017-10-10 23:40:36.4819|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.js'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.js' 2017-10-10 23:40:36.4933|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 20.2541ms 200 application/javascript 2017-10-10 23:40:36.5143|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" completed keep alive response. 2017-10-10 23:40:36.5143|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 32.361ms 200 image/svg+xml 2017-10-10 23:40:36.5143|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/lib/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2 2017-10-10 23:40:36.5401|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\lib\\bootstrap\\dist\\fonts\\glyphicons-halflings-regular.woff2' 2017-10-10 23:40:36.5401|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner1.svg 2017-10-10 23:40:36.5401|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner1.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner1.svg' 2017-10-10 23:40:36.5539|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" completed keep alive response. 2017-10-10 23:40:36.5539|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 39.9074ms 200 font/woff2 2017-10-10 23:40:36.5745|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner3.svg 2017-10-10 23:40:36.5745|1|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request starting HTTP/1.1 GET http://localhost:56152/images/banner4.svg 2017-10-10 23:40:36.5951|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" completed keep alive response. 2017-10-10 23:40:36.6015|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 119.5389ms 200 application/javascript 2017-10-10 23:40:36.6015|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner4.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner4.svg' 2017-10-10 23:40:36.5745|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/images/banner3.svg'. Physical path: 'X:\\nlog\\NLog.Web\\examples\\ASP.NET Core 2\\Visual Studio 2017\\ASP.NET Core 2 - VS2017\\wwwroot\\images\\banner3.svg' 2017-10-10 23:40:36.6946|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" completed keep alive response. 2017-10-10 23:40:36.6703|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" completed keep alive response. 2017-10-10 23:40:36.6946|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 119.7561ms 200 image/svg+xml 2017-10-10 23:40:36.6015|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" completed keep alive response. 2017-10-10 23:40:36.7137|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 170.2078ms 200 image/svg+xml 2017-10-10 23:40:36.7137|9|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" completed keep alive response. 2017-10-10 23:40:36.7560|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 181.4017ms 200 image/svg+xml 2017-10-10 23:40:36.6946|2|INFO|Microsoft.AspNetCore.Hosting.Internal.WebHost|Request finished in 216.2838ms 200 application/javascript 2017-10-10 23:42:21.6657|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK68\" received FIN. 2017-10-10 23:42:21.6657|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK67\" received FIN. 2017-10-10 23:42:21.6657|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" disconnecting. 2017-10-10 23:42:21.6657|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK69\" received FIN. 2017-10-10 23:42:21.6657|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" disconnecting. 2017-10-10 23:42:21.6657|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK67\" sending FIN. 2017-10-10 23:42:21.6657|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" disconnecting. 2017-10-10 23:42:21.6657|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK69\" stopped. 2017-10-10 23:42:21.6800|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK66\" received FIN. 2017-10-10 23:42:21.6800|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" disconnecting. 2017-10-10 23:42:21.6657|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK69\" sending FIN. 2017-10-10 23:42:21.6657|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK67\" stopped. 2017-10-10 23:42:21.6800|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK6A\" received FIN. 2017-10-10 23:42:21.6800|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" disconnecting. 2017-10-10 23:42:21.6800|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK64\" received FIN. 2017-10-10 23:42:21.6800|10|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" disconnecting. 2017-10-10 23:42:21.6800|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK68\" sending FIN. 2017-10-10 23:42:21.6800|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK68\" stopped. 2017-10-10 23:42:21.6800|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK66\" sending FIN. 2017-10-10 23:42:21.6800|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK66\" stopped. 2017-10-10 23:42:21.6943|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK6A\" stopped. 2017-10-10 23:42:21.6943|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK6A\" sending FIN. 2017-10-10 23:42:21.6943|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv|Connection id \"0HL8G4U42CK64\" sending FIN. 2017-10-10 23:42:21.6943|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel|Connection id \"0HL8G4U42CK64\" stopped.","title":"nlog-all-2017-10-10.log"},{"location":"Getting-started-with-ASP.NET-Core-2/#configure-nlog-targets-for-output","text":"Next step, see Configure NLog with nlog.config","title":"Configure NLog Targets for output"},{"location":"Getting-started-with-ASP.NET-Core-3/","text":"\u26a0\ufe0f Missing the trace/debug logs? Check your appsettings.json \u2139\ufe0f See also example in GitHub This tutorial is for ASP.NET Core 3.1 For ASP.NET Core 6, check Getting started with ASP.NET Core 6 0. Create a new ASP.NET Core project In Visual Studio 2019. 1. Add dependency in csproj manually or using NuGet Install the latest: - NLog.Web.AspNetCore 4.9+ - Update the NLog package if possible in csproj: <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.*\" /> <PackageReference Include=\"NLog\" Version=\"4.*\" /> 2. Create a nlog.config file. Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" throwConfigExceptions=\"true\" internalLogLevel=\"info\" internalLogFile=\"c:\\temp\\internal-nlog-AspNetCore3.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- File Target for all log messages with basic details --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-AspNetCore3-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- File Target for own log messages with extra web details using some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-AspNetCore3-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|\" /> <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection --> <target xsi:type=\"Console\" name=\"lifetimeConsole\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Output hosting lifetime messages to console target for faster startup detection --> <logger name=\"Microsoft.Hosting.Lifetime\" minlevel=\"Info\" writeTo=\"lifetimeConsole, ownFile-web\" final=\"true\" /> <!--Skip non-critical Microsoft logs and so log only own logs--> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <!-- BlackHole --> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . Notice that one might have to pay special attention to the Hosting Lifetime Startup Messages , if removing all other LoggingProviders (Like Console) and only using NLog. As it can cause hosting environment (Visual Studio / Docker / Azure Container) to not see application as started. If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft . Check .NET Standard 2 for ASP.NET Core 3. 3. Enable copy to bin folder Enable copy to bin folder for nlog.config or edit .csproj file manually and add: <ItemGroup> <Content Update=\"nlog.config\" CopyToOutputDirectory=\"PreserveNewest\" /> </ItemGroup> 4. Update program.cs Update the program.cs using System; using NLog.Web; using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Logging; using Microsoft.Extensions.Hosting; public static void Main(string[] args) { var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); try { logger.Debug(\"init main\"); CreateHostBuilder(args).Build().Run(); } catch (Exception exception) { //NLog: catch setup errors logger.Error(exception, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } } public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }) .ConfigureLogging(logging => { logging.ClearProviders(); logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); }) .UseNLog(); // NLog: Setup NLog for Dependency injection 5. Configure appsettings.json The Logging configuration specified in appsettings.json overrides any call to SetMinimumLevel . So either remove \"Default\": or adjust it correctly to your needs. { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, \"AllowedHosts\": \"*\" } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json 6. Write logs Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; _logger.LogDebug(1, \"NLog injected into HomeController\"); } public IActionResult Index() { _logger.LogInformation(\"Hello, this is the index!\"); return View(); } 7. Example Output When starting the ASP.NET Core website, we get two files: nlog-own-2019-10-14.log 2019-10-14 23:15:09.3898|0|DEBUG|ASP.NET_Core_3___VS2019.Program|init main |url: |action: |ASP.NET_Core_3___VS2019.Program.Main 2019-10-14 23:15:11.3867|1|DEBUG|ASP.NET_Core_3___VS2019.Controllers.HomeController|NLog injected into HomeController |url: https://localhost/|action: Index|ASP.NET_Core_3___VS2019.Controllers.HomeController..ctor 2019-10-14 23:15:11.3867|0|INFO|ASP.NET_Core_3___VS2019.Controllers.HomeController|Hello, this is the index! |url: https://localhost/|action: Index|ASP.NET_Core_3___VS2019.Controllers.HomeController.Index nlog-all-2019-10-14.log 2019-10-14 23:15:09.3898|0|DEBUG|ASP.NET_Core_3___VS2019.Program|init main 2019-10-14 23:15:10.9142|0|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\\Users\\Julian\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 2019-10-14 23:15:11.2680|0|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 2019-10-14 23:15:11.2680|0|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 2019-10-14 23:15:11.2680|0|INFO|Microsoft.Hosting.Lifetime|Content root path: D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019 2019-10-14 23:15:11.3238|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/ 2019-10-14 23:15:11.3434|0|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'ASP.NET_Core_3___VS2019.Controllers.HomeController.Index (ASP.NET Core 3 - VS2019)' 2019-10-14 23:15:11.3867|3|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = \"Index\", controller = \"Home\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller ASP.NET_Core_3___VS2019.Controllers.HomeController (ASP.NET Core 3 - VS2019). 2019-10-14 23:15:11.3867|1|DEBUG|ASP.NET_Core_3___VS2019.Controllers.HomeController|NLog injected into HomeController 2019-10-14 23:15:11.3867|0|INFO|ASP.NET_Core_3___VS2019.Controllers.HomeController|Hello, this is the index! 2019-10-14 23:15:11.4161|1|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Index. 2019-10-14 23:15:11.5831|4|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Index executed in 167.626ms. 2019-10-14 23:15:11.5831|2|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action ASP.NET_Core_3___VS2019.Controllers.HomeController.Index (ASP.NET Core 3 - VS2019) in 196.6052ms 2019-10-14 23:15:11.5831|1|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'ASP.NET_Core_3___VS2019.Controllers.HomeController.Index (ASP.NET Core 3 - VS2019)' 2019-10-14 23:15:11.5910|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 267.9366ms 200 text/html; charset=utf-8 2019-10-14 23:15:11.6171|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/lib/jquery/dist/jquery.min.js 2019-10-14 23:15:11.6171|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/css/site.css 2019-10-14 23:15:11.6171|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/lib/bootstrap/dist/css/bootstrap.min.css 2019-10-14 23:15:11.6365|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/lib/bootstrap/dist/js/bootstrap.bundle.min.js 2019-10-14 23:15:11.6365|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/js/site.js?v=4q1jwFhaPaZgr8WAUSrux6hAuh0XDg9kPS3xIVq36I0 2019-10-14 23:15:11.6627|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\js\\site.js' 2019-10-14 23:15:11.6627|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\css\\site.css' 2019-10-14 23:15:11.6627|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 28.7787ms 200 application/javascript 2019-10-14 23:15:11.6696|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 52.4825ms 200 text/css 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.bundle.min.js'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.bundle.min.js' 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.min.css'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.min.css' 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/jquery/dist/jquery.min.js'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\lib\\jquery\\dist\\jquery.min.js' 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 50.937400000000004ms 200 application/javascript 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 70.65100000000001ms 200 text/css 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 71.51610000000001ms 200 application/javascript Configure NLog Targets for output Next step, see Configure NLog with nlog.config","title":"Getting started with ASP.NET Core 3"},{"location":"Getting-started-with-ASP.NET-Core-3/#0-create-a-new-aspnet-core-project","text":"In Visual Studio 2019.","title":"0. Create a new ASP.NET Core project"},{"location":"Getting-started-with-ASP.NET-Core-3/#1-add-dependency-in-csproj-manually-or-using-nuget","text":"Install the latest: - NLog.Web.AspNetCore 4.9+ - Update the NLog package if possible in csproj: <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.*\" /> <PackageReference Include=\"NLog\" Version=\"4.*\" />","title":"1. Add dependency in csproj manually or using NuGet"},{"location":"Getting-started-with-ASP.NET-Core-3/#2-create-a-nlogconfig-file","text":"Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" throwConfigExceptions=\"true\" internalLogLevel=\"info\" internalLogFile=\"c:\\temp\\internal-nlog-AspNetCore3.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- File Target for all log messages with basic details --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-AspNetCore3-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- File Target for own log messages with extra web details using some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-AspNetCore3-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|\" /> <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection --> <target xsi:type=\"Console\" name=\"lifetimeConsole\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Output hosting lifetime messages to console target for faster startup detection --> <logger name=\"Microsoft.Hosting.Lifetime\" minlevel=\"Info\" writeTo=\"lifetimeConsole, ownFile-web\" final=\"true\" /> <!--Skip non-critical Microsoft logs and so log only own logs--> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <!-- BlackHole --> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . Notice that one might have to pay special attention to the Hosting Lifetime Startup Messages , if removing all other LoggingProviders (Like Console) and only using NLog. As it can cause hosting environment (Visual Studio / Docker / Azure Container) to not see application as started. If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft . Check .NET Standard 2 for ASP.NET Core 3.","title":"2. Create a nlog.config file."},{"location":"Getting-started-with-ASP.NET-Core-3/#3-enable-copy-to-bin-folder","text":"Enable copy to bin folder for nlog.config or edit .csproj file manually and add: <ItemGroup> <Content Update=\"nlog.config\" CopyToOutputDirectory=\"PreserveNewest\" /> </ItemGroup>","title":"3. Enable copy to bin folder"},{"location":"Getting-started-with-ASP.NET-Core-3/#4-update-programcs","text":"Update the program.cs using System; using NLog.Web; using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Logging; using Microsoft.Extensions.Hosting; public static void Main(string[] args) { var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); try { logger.Debug(\"init main\"); CreateHostBuilder(args).Build().Run(); } catch (Exception exception) { //NLog: catch setup errors logger.Error(exception, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } } public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }) .ConfigureLogging(logging => { logging.ClearProviders(); logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); }) .UseNLog(); // NLog: Setup NLog for Dependency injection","title":"4. Update program.cs"},{"location":"Getting-started-with-ASP.NET-Core-3/#5-configure-appsettingsjson","text":"The Logging configuration specified in appsettings.json overrides any call to SetMinimumLevel . So either remove \"Default\": or adjust it correctly to your needs. { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, \"AllowedHosts\": \"*\" } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json","title":"5. Configure appsettings.json"},{"location":"Getting-started-with-ASP.NET-Core-3/#6-write-logs","text":"Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; _logger.LogDebug(1, \"NLog injected into HomeController\"); } public IActionResult Index() { _logger.LogInformation(\"Hello, this is the index!\"); return View(); }","title":"6. Write logs"},{"location":"Getting-started-with-ASP.NET-Core-3/#7-example-output","text":"When starting the ASP.NET Core website, we get two files:","title":"7. Example Output"},{"location":"Getting-started-with-ASP.NET-Core-3/#nlog-own-2019-10-14log","text":"2019-10-14 23:15:09.3898|0|DEBUG|ASP.NET_Core_3___VS2019.Program|init main |url: |action: |ASP.NET_Core_3___VS2019.Program.Main 2019-10-14 23:15:11.3867|1|DEBUG|ASP.NET_Core_3___VS2019.Controllers.HomeController|NLog injected into HomeController |url: https://localhost/|action: Index|ASP.NET_Core_3___VS2019.Controllers.HomeController..ctor 2019-10-14 23:15:11.3867|0|INFO|ASP.NET_Core_3___VS2019.Controllers.HomeController|Hello, this is the index! |url: https://localhost/|action: Index|ASP.NET_Core_3___VS2019.Controllers.HomeController.Index","title":"nlog-own-2019-10-14.log"},{"location":"Getting-started-with-ASP.NET-Core-3/#nlog-all-2019-10-14log","text":"2019-10-14 23:15:09.3898|0|DEBUG|ASP.NET_Core_3___VS2019.Program|init main 2019-10-14 23:15:10.9142|0|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\\Users\\Julian\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 2019-10-14 23:15:11.2680|0|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 2019-10-14 23:15:11.2680|0|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 2019-10-14 23:15:11.2680|0|INFO|Microsoft.Hosting.Lifetime|Content root path: D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019 2019-10-14 23:15:11.3238|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/ 2019-10-14 23:15:11.3434|0|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'ASP.NET_Core_3___VS2019.Controllers.HomeController.Index (ASP.NET Core 3 - VS2019)' 2019-10-14 23:15:11.3867|3|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = \"Index\", controller = \"Home\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller ASP.NET_Core_3___VS2019.Controllers.HomeController (ASP.NET Core 3 - VS2019). 2019-10-14 23:15:11.3867|1|DEBUG|ASP.NET_Core_3___VS2019.Controllers.HomeController|NLog injected into HomeController 2019-10-14 23:15:11.3867|0|INFO|ASP.NET_Core_3___VS2019.Controllers.HomeController|Hello, this is the index! 2019-10-14 23:15:11.4161|1|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Index. 2019-10-14 23:15:11.5831|4|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Index executed in 167.626ms. 2019-10-14 23:15:11.5831|2|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action ASP.NET_Core_3___VS2019.Controllers.HomeController.Index (ASP.NET Core 3 - VS2019) in 196.6052ms 2019-10-14 23:15:11.5831|1|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'ASP.NET_Core_3___VS2019.Controllers.HomeController.Index (ASP.NET Core 3 - VS2019)' 2019-10-14 23:15:11.5910|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 267.9366ms 200 text/html; charset=utf-8 2019-10-14 23:15:11.6171|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/lib/jquery/dist/jquery.min.js 2019-10-14 23:15:11.6171|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/css/site.css 2019-10-14 23:15:11.6171|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/lib/bootstrap/dist/css/bootstrap.min.css 2019-10-14 23:15:11.6365|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/lib/bootstrap/dist/js/bootstrap.bundle.min.js 2019-10-14 23:15:11.6365|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2.0 GET https://localhost:44318/js/site.js?v=4q1jwFhaPaZgr8WAUSrux6hAuh0XDg9kPS3xIVq36I0 2019-10-14 23:15:11.6627|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\js\\site.js' 2019-10-14 23:15:11.6627|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\css\\site.css' 2019-10-14 23:15:11.6627|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 28.7787ms 200 application/javascript 2019-10-14 23:15:11.6696|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 52.4825ms 200 text/css 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.bundle.min.js'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.bundle.min.js' 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.min.css'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.min.css' 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/jquery/dist/jquery.min.js'. Physical path: 'D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 3\\ASP.NET Core 3 - VS2019\\wwwroot\\lib\\jquery\\dist\\jquery.min.js' 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 50.937400000000004ms 200 application/javascript 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 70.65100000000001ms 200 text/css 2019-10-14 23:15:11.6853|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished in 71.51610000000001ms 200 application/javascript","title":"nlog-all-2019-10-14.log"},{"location":"Getting-started-with-ASP.NET-Core-3/#configure-nlog-targets-for-output","text":"Next step, see Configure NLog with nlog.config","title":"Configure NLog Targets for output"},{"location":"Getting-started-with-ASP.NET-Core-5/","text":"\u26a0\ufe0f Missing the trace/debug logs? Check your appsettings.json \u2139\ufe0f See also example in GitHub This tutorial is for ASP.NET Core 5. For ASP.NET Core 6, check Getting started with ASP.NET Core 6 For ASP.NET Core 3.1, check Getting started with ASP.NET Core 3.1 0. Create a new ASP.NET Core project In Visual Studio 2019. Version 16.8+ is needed 1. Add dependency in csproj manually or using NuGet Install the latest: - NLog.Web.AspNetCore 4.9+ - Update the NLog package if possible in csproj: <ItemGroup> <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.*\" /> <PackageReference Include=\"NLog\" Version=\"4.*\" /> </ItemGroup> 2. Create a nlog.config file. Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Info\" internalLogFile=\"c:\\temp\\internal-nlog-AspNetCore.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- File Target for all log messages with basic details --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-AspNetCore-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- File Target for own log messages with extra web details using some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-AspNetCore-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}\" /> <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection --> <target xsi:type=\"Console\" name=\"lifetimeConsole\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Output hosting lifetime messages to console target for faster startup detection --> <logger name=\"Microsoft.Hosting.Lifetime\" minlevel=\"Info\" writeTo=\"lifetimeConsole, ownFile-web\" final=\"true\" /> <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) --> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"System.Net.Http.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . Notice that one might have to pay special attention to the Hosting Lifetime Startup Messages , if removing all other LoggingProviders (Like Console) and only using NLog. As it can cause hosting environment (Visual Studio / Docker / Azure Container) to not see application as started. If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft . Check .NET Standard 2.1 for ASP.NET Core 5. 3. Update program.cs Update the program.cs using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using System; using NLog.Web; namespace ASP.NET_Core_5_NLog_Example { public class Program { public static void Main(string[] args) { var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); try { logger.Debug(\"init main\"); CreateHostBuilder(args).Build().Run(); } catch (Exception exception) { //NLog: catch setup errors logger.Error(exception, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } } public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }) .ConfigureLogging(logging => { logging.ClearProviders(); logging.SetMinimumLevel(LogLevel.Trace); }) .UseNLog(); // NLog: Setup NLog for Dependency injection } } 4. Configure appsettings.json The Logging configuration specified in appsettings.json overrides any call to SetMinimumLevel . So either remove \"Default\": or adjust it correctly to your needs. { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, \"AllowedHosts\": \"*\" } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json 5. Write logs Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; _logger.LogDebug(1, \"NLog injected into HomeController\"); } public IActionResult Index() { _logger.LogInformation(\"Hello, this is the index!\"); return View(); } 6. Example Output When starting the ASP.NET Core website, we get two files: nlog-own-2020-12-29.log 2020-12-29 16:47:02.5291||DEBUG|ASP.NET_Core_5_NLog_Example.Program|init main |url: |action: 2020-12-29 16:47:03.5943|1|DEBUG|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|NLog injected into HomeController |url: https://localhost/|action: Index 2020-12-29 16:47:03.5943||INFO|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|Hello, this is the index! |url: https://localhost/|action: Index nlog-all-2020-12-29.log 2020-12-29 16:47:02.5291||DEBUG|ASP.NET_Core_5_NLog_Example.Program|init main 2020-12-29 16:47:03.5260||INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 2020-12-29 16:47:03.5260||INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 2020-12-29 16:47:03.5260||INFO|Microsoft.Hosting.Lifetime|Content root path: D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 5\\ASP.NET Core 5 NLog Example 2020-12-29 16:47:03.5943|1|DEBUG|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|NLog injected into HomeController 2020-12-29 16:47:03.5943||INFO|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|Hello, this is the index! Configure NLog Targets for output Next step, see Configure NLog with nlog.config","title":"Getting started with ASP.NET Core 5"},{"location":"Getting-started-with-ASP.NET-Core-5/#0-create-a-new-aspnet-core-project","text":"In Visual Studio 2019. Version 16.8+ is needed","title":"0. Create a new ASP.NET Core project"},{"location":"Getting-started-with-ASP.NET-Core-5/#1-add-dependency-in-csproj-manually-or-using-nuget","text":"Install the latest: - NLog.Web.AspNetCore 4.9+ - Update the NLog package if possible in csproj: <ItemGroup> <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.*\" /> <PackageReference Include=\"NLog\" Version=\"4.*\" /> </ItemGroup>","title":"1. Add dependency in csproj manually or using NuGet"},{"location":"Getting-started-with-ASP.NET-Core-5/#2-create-a-nlogconfig-file","text":"Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Info\" internalLogFile=\"c:\\temp\\internal-nlog-AspNetCore.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- File Target for all log messages with basic details --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-AspNetCore-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- File Target for own log messages with extra web details using some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-AspNetCore-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}\" /> <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection --> <target xsi:type=\"Console\" name=\"lifetimeConsole\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Output hosting lifetime messages to console target for faster startup detection --> <logger name=\"Microsoft.Hosting.Lifetime\" minlevel=\"Info\" writeTo=\"lifetimeConsole, ownFile-web\" final=\"true\" /> <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) --> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"System.Net.Http.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . Notice that one might have to pay special attention to the Hosting Lifetime Startup Messages , if removing all other LoggingProviders (Like Console) and only using NLog. As it can cause hosting environment (Visual Studio / Docker / Azure Container) to not see application as started. If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft . Check .NET Standard 2.1 for ASP.NET Core 5.","title":"2. Create a nlog.config file."},{"location":"Getting-started-with-ASP.NET-Core-5/#3-update-programcs","text":"Update the program.cs using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using System; using NLog.Web; namespace ASP.NET_Core_5_NLog_Example { public class Program { public static void Main(string[] args) { var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); try { logger.Debug(\"init main\"); CreateHostBuilder(args).Build().Run(); } catch (Exception exception) { //NLog: catch setup errors logger.Error(exception, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } } public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }) .ConfigureLogging(logging => { logging.ClearProviders(); logging.SetMinimumLevel(LogLevel.Trace); }) .UseNLog(); // NLog: Setup NLog for Dependency injection } }","title":"3. Update program.cs"},{"location":"Getting-started-with-ASP.NET-Core-5/#4-configure-appsettingsjson","text":"The Logging configuration specified in appsettings.json overrides any call to SetMinimumLevel . So either remove \"Default\": or adjust it correctly to your needs. { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, \"AllowedHosts\": \"*\" } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json","title":"4. Configure appsettings.json"},{"location":"Getting-started-with-ASP.NET-Core-5/#5-write-logs","text":"Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; _logger.LogDebug(1, \"NLog injected into HomeController\"); } public IActionResult Index() { _logger.LogInformation(\"Hello, this is the index!\"); return View(); }","title":"5. Write logs"},{"location":"Getting-started-with-ASP.NET-Core-5/#6-example-output","text":"When starting the ASP.NET Core website, we get two files:","title":"6. Example Output"},{"location":"Getting-started-with-ASP.NET-Core-5/#nlog-own-2020-12-29log","text":"2020-12-29 16:47:02.5291||DEBUG|ASP.NET_Core_5_NLog_Example.Program|init main |url: |action: 2020-12-29 16:47:03.5943|1|DEBUG|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|NLog injected into HomeController |url: https://localhost/|action: Index 2020-12-29 16:47:03.5943||INFO|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|Hello, this is the index! |url: https://localhost/|action: Index","title":"nlog-own-2020-12-29.log"},{"location":"Getting-started-with-ASP.NET-Core-5/#nlog-all-2020-12-29log","text":"2020-12-29 16:47:02.5291||DEBUG|ASP.NET_Core_5_NLog_Example.Program|init main 2020-12-29 16:47:03.5260||INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 2020-12-29 16:47:03.5260||INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 2020-12-29 16:47:03.5260||INFO|Microsoft.Hosting.Lifetime|Content root path: D:\\nlog\\NLog.Web\\examples\\ASP.NET Core 5\\ASP.NET Core 5 NLog Example 2020-12-29 16:47:03.5943|1|DEBUG|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|NLog injected into HomeController 2020-12-29 16:47:03.5943||INFO|ASP.NET_Core_5_NLog_Example.Controllers.HomeController|Hello, this is the index!","title":"nlog-all-2020-12-29.log"},{"location":"Getting-started-with-ASP.NET-Core-5/#configure-nlog-targets-for-output","text":"Next step, see Configure NLog with nlog.config","title":"Configure NLog Targets for output"},{"location":"Getting-started-with-ASP.NET-Core-6/","text":"\u26a0\ufe0f Missing the trace/debug logs? Check your appsettings.json \u2139\ufe0f See also example in GitHub This tutorial is for ASP.NET Core 6. For ASP.NET Core 3.1, check Getting started with ASP.NET Core 3.1 0. Create a new ASP.NET Core project In Visual Studio 2022. Version 17.0+ is needed 1. Add dependency in csproj manually or using NuGet Install the latest: - NLog.Web.AspNetCore v5+ - Update the NLog package if possible in csproj: <ItemGroup> <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"5.*\" /> <PackageReference Include=\"NLog\" Version=\"5.*\" /> </ItemGroup> 2. Create a nlog.config file. Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Info\" internalLogFile=\"c:\\temp\\internal-nlog-AspNetCore.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- File Target for all log messages with basic details --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-AspNetCore-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- File Target for own log messages with extra web details using some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-AspNetCore-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}\" /> <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection --> <target xsi:type=\"Console\" name=\"lifetimeConsole\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Output hosting lifetime messages to console target for faster startup detection --> <logger name=\"Microsoft.Hosting.Lifetime\" minlevel=\"Info\" writeTo=\"lifetimeConsole, ownFile-web\" final=\"true\" /> <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) --> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"System.Net.Http.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . Notice that one might have to pay special attention to the Hosting Lifetime Startup Messages , if removing all other LoggingProviders (Like Console) and only using NLog. As it can cause hosting environment (Visual Studio / Docker / Azure Container) to not see application as started. If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft . Check .NET Standard 2.1 for ASP.NET Core 6. 3. Update program.cs Update the program.cs using NLog; using NLog.Web; // Early init of NLog to allow startup and exception logging, before host is built var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); logger.Debug(\"init main\"); try { var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddControllersWithViews(); // NLog: Setup NLog for Dependency injection builder.Logging.ClearProviders(); builder.Host.UseNLog(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(\"/Home/Error\"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); app.Run(); } catch (Exception exception) { // NLog: catch setup errors logger.Error(exception, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); } 4. Microsoft Logging Filters The Microsoft Logging filters specified in appsettings.json are ignored by default when using NLog 5.0. Just make sure that NLog configuration rules are configured correctly. <rules> <logger name=\"System.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> If one specify RemoveLoggerFactoryFilter = false for the NLog Logging Provider options, then it will use the filters specified in appsettings.json. Notice it is also possible to specify the NLog configuration in the appsettings.json . { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, \"AllowedHosts\": \"*\" } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json 5. Write logs Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; _logger.LogDebug(1, \"NLog injected into HomeController\"); } public IActionResult Index() { _logger.LogInformation(\"Hello, this is the index!\"); return View(); } } 6. Example Output When starting the ASP.NET Core website, we get two files: nlog-own-2021-12-01.log 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7125 |url: |action: |Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5125 |url: |action: |Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. |url: |action: |Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.OnApplicationStarted 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development |url: |action: |Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.OnApplicationStarted 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\\Users\\snakefoot\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\ |url: |action: |Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.OnApplicationStarted 2022-08-18 18:35:25.6656|1|DEBUG|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|NLog injected into HomeController |url: https://localhost/|action: Index|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController..ctor 2022-08-18 18:35:25.6656|0|INFO|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|Hello, this is the index! |url: https://localhost/|action: Index|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index nlog-all-2021-12-01.log 2022-08-18 18:35:15.1343|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16TVPK9JQ\" received FIN. 2022-08-18 18:35:15.1694|48|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16TVPK9JQ\" is closed. The last processed stream ID was 29. 2022-08-18 18:35:15.1694|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16TVPK9JQ\" sending FIN because: \"The client closed the connection.\" 2022-08-18 18:35:15.1805|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16TVPK9JQ\" stopped. 2022-08-18 18:35:23.6686|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Home/Index.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Home/Privacy.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Shared/Error.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Shared/_ValidationScriptsPartial.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/_ViewImports.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/_ViewStart.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Shared/_Layout.cshtml'. 2022-08-18 18:35:23.7133|12|DEBUG|Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory|Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 2022-08-18 18:35:23.7746|1|DEBUG|Microsoft.Extensions.Hosting.Internal.Host|Hosting starting 2022-08-18 18:35:23.8067|63|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-237c4f12-6703-4dd8-8e04-b904f77128d3.xml'. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-6c9a4248-29ef-409e-9349-fe5e287b835d.xml'. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-750f4bc0-7cc0-4ad8-809a-39972a95298d.xml'. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-dab65855-4eb4-4890-a09b-93b48ace1718.xml'. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {237c4f12-6703-4dd8-8e04-b904f77128d3}. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {6c9a4248-29ef-409e-9349-fe5e287b835d}. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {750f4bc0-7cc0-4ad8-809a-39972a95298d}. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {dab65855-4eb4-4890-a09b-93b48ace1718}. 2022-08-18 18:35:23.8272|13|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver|Considering key {dab65855-4eb4-4890-a09b-93b48ace1718} with expiration date 2022-11-16 16:27:50Z as default key. 2022-08-18 18:35:23.8272|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2022-08-18 18:35:23.8272|51|DEBUG|Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor|Decrypting secret element using Windows DPAPI. 2022-08-18 18:35:23.8272|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2022-08-18 18:35:23.8367|4|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 2022-08-18 18:35:23.8367|3|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 2022-08-18 18:35:23.8367|2|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider|Using key {dab65855-4eb4-4890-a09b-93b48ace1718} as the default key. 2022-08-18 18:35:23.8367|65|DEBUG|Microsoft.AspNetCore.DataProtection.Internal.DataProtectionHostedService|Key ring with default key {dab65855-4eb4-4890-a09b-93b48ace1718} was loaded during application startup. 2022-08-18 18:35:23.9534|0|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer|Using development certificate: CN=localhost (Thumbprint: 3271A3360CD4E4DC9058F84E9FB3A1E651D0F7C9) 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7125 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5125 2022-08-18 18:35:24.0084|13|DEBUG|Microsoft.AspNetCore.Hosting.Diagnostics|Loaded hosting startup assembly ASP.NetCore6_NLog_Web_Example 2022-08-18 18:35:24.0084|13|DEBUG|Microsoft.AspNetCore.Hosting.Diagnostics|Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 2022-08-18 18:35:24.0084|13|DEBUG|Microsoft.AspNetCore.Hosting.Diagnostics|Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\ 2022-08-18 18:35:24.0084|2|DEBUG|Microsoft.Extensions.Hosting.Internal.Host|Hosting started 2022-08-18 18:35:24.4292|39|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TR\" accepted. 2022-08-18 18:35:24.4292|39|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TQ\" accepted. 2022-08-18 18:35:24.4306|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TQ\" started. 2022-08-18 18:35:24.4306|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TR\" started. 2022-08-18 18:35:24.4533|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16UJ982TQ\" received FIN. 2022-08-18 18:35:24.4533|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16UJ982TR\" received FIN. 2022-08-18 18:35:25.5421|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/ - - 2022-08-18 18:35:25.5892|0|DEBUG|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|Wildcard detected, all requests with hosts will be allowed. 2022-08-18 18:35:25.5892|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:25.5892|4|DEBUG|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The request path / does not match a supported file type 2022-08-18 18:35:25.6168|1001|DEBUG|Microsoft.AspNetCore.Routing.Matching.DfaMatcher|1 candidate(s) found for the request path '/' 2022-08-18 18:35:25.6198|1005|DEBUG|Microsoft.AspNetCore.Routing.Matching.DfaMatcher|Endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' with route pattern '{controller=Home}/{action=Index}/{id?}' is valid for the request path '/' 2022-08-18 18:35:25.6198|1|DEBUG|Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware|Request matched endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' 2022-08-18 18:35:25.6198|0|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' 2022-08-18 18:35:25.6595|3|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = \"Index\", controller = \"Home\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller ASP.NetCore6_NLog_Web_Example.Controllers.HomeController (ASP.NetCore6_NLog_Web_Example). 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of authorization filters (in the following order): None 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of resource filters (in the following order): Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.Filters.ControllerActionFilter (Order: -2147483648), Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000) 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of exception filters (in the following order): None 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter 2022-08-18 18:35:25.6656|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: Before executing OnResourceExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6656|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: After executing OnResourceExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6656|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executing controller factory for controller ASP.NetCore6_NLog_Web_Example.Controllers.HomeController (ASP.NetCore6_NLog_Web_Example) 2022-08-18 18:35:25.6656|1|DEBUG|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|NLog injected into HomeController 2022-08-18 18:35:25.6656|2|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed controller factory for controller ASP.NetCore6_NLog_Web_Example.Controllers.HomeController (ASP.NetCore6_NLog_Web_Example) 2022-08-18 18:35:25.6656|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: Before executing OnActionExecutionAsync on filter Microsoft.AspNetCore.Mvc.Filters.ControllerActionFilter. 2022-08-18 18:35:25.6656|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: Before executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6656|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: After executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6656|1|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executing action method ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example) - Validation state: Valid 2022-08-18 18:35:25.6656|0|INFO|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|Hello, this is the index! 2022-08-18 18:35:25.6831|2|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action method ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example), returned result Microsoft.AspNetCore.Mvc.ViewResult in 2.7721ms. 2022-08-18 18:35:25.6831|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: Before executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6831|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: After executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6831|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: After executing OnActionExecutionAsync on filter Microsoft.AspNetCore.Mvc.Filters.ControllerActionFilter. 2022-08-18 18:35:25.6831|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: Before executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6831|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: After executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6831|4|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Before executing action result Microsoft.AspNetCore.Mvc.ViewResult. 2022-08-18 18:35:25.6831|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view 'Index' in controller 'Home'. 2022-08-18 18:35:25.6831|5|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Located compiled view for view at path '/Views/Home/Index.cshtml'. 2022-08-18 18:35:25.6831|7|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Could not find a file for view at path '/Views/Home/_ViewStart.cshtml'. 2022-08-18 18:35:25.6831|5|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Located compiled view for view at path '/Views/_ViewStart.cshtml'. 2022-08-18 18:35:25.6831|7|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Could not find a file for view at path '/_ViewStart.cshtml'. 2022-08-18 18:35:25.6960|1|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Index. 2022-08-18 18:35:25.6960|2|DEBUG|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|The view path '/Views/Home/Index.cshtml' was found in 9.3119ms. 2022-08-18 18:35:25.7393|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view '_Layout' in controller 'Home'. 2022-08-18 18:35:25.7393|7|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Could not find a file for view at path '/Views/Home/_Layout.cshtml'. 2022-08-18 18:35:25.7393|5|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Located compiled view for view at path '/Views/Shared/_Layout.cshtml'. 2022-08-18 18:35:25.7816|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result / 2022-08-18 18:35:25.7899|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result / 2022-08-18 18:35:25.7899|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in /Home/Privacy and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result /Home/Privacy 2022-08-18 18:35:25.7899|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in /Home/Privacy and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result /Home/Privacy 2022-08-18 18:35:25.9178|4|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Index executed in 231.1047ms. 2022-08-18 18:35:25.9178|5|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|After executing action result Microsoft.AspNetCore.Mvc.ViewResult. 2022-08-18 18:35:25.9178|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: Before executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: After executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: Before executing OnResourceExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: After executing OnResourceExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|2|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example) in 261.5085ms 2022-08-18 18:35:25.9178|1|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' 2022-08-18 18:35:25.9417|1|DEBUG|Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware|Response markup is scheduled to include browser refresh script injection. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 1 with length 67 and flags END_HEADERS. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 1024 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 1024 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 917 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 65 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 18 and flags NONE. 2022-08-18 18:35:25.9749|2|DEBUG|Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware|Response markup was updated to include browser refresh script injection. 2022-08-18 18:35:25.9834|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 0 and flags END_STREAM. 2022-08-18 18:35:25.9962|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/ - - - 200 - text/html;+charset=utf-8 456.1640ms 2022-08-18 18:35:26.0191|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 3 with length 106 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 5 with length 67 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 7 with length 91 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/css/site.css?v=AKvNjO3dCPPS0eSU1Ez8T2wI280i08yGycV9ndytL-c - - 2022-08-18 18:35:26.0257|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/css/bootstrap.min.css - - 2022-08-18 18:35:26.0257|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0257|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 9 with length 55 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 11 with length 55 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 13 with length 67 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 15 with length 52 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 17 with length 34 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/ASP.NetCore6_NLog_Web_Example.styles.css?v=RE8iCRyLdOMjrQXlLNeo4W3xw0k_zNKqvYCiPxC_9nE - - 2022-08-18 18:35:26.0257|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/lib/jquery/dist/jquery.min.js - - 2022-08-18 18:35:26.0416|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/js/bootstrap.bundle.min.js - - 2022-08-18 18:35:26.0416|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 7 with length 77 and flags END_HEADERS. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 7 with length 1146 and flags NONE. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 9 with length 86 and flags END_HEADERS. 2022-08-18 18:35:26.0416|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/ASP.NetCore6_NLog_Web_Example.styles.css'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\obj\\Debug\\net6.0\\scopedcss\\bundle\\ASP.NetCore6_NLog_Web_Example.styles.css' 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 7 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.0416|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/ASP.NetCore6_NLog_Web_Example.styles.css?v=RE8iCRyLdOMjrQXlLNeo4W3xw0k_zNKqvYCiPxC_9nE - - - 200 1146 text/css 15.8363ms 2022-08-18 18:35:26.0416|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/js/site.js?v=4q1jwFhaPaZgr8WAUSrux6hAuh0XDg9kPS3xIVq36I0 - - 2022-08-18 18:35:26.0416|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 11 with length 33 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 3 with length 34 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.0553|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/_framework/aspnetcore-browser-refresh.js - - 2022-08-18 18:35:26.0553|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/_vs/browserLink - - 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 5 with length 31 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 13 with length 31 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 5 with length 194 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 13 with length 230 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 15 with length 60 and flags END_HEADERS. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 15 with length 12024 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 17 with length 119 and flags END_HEADERS. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 9986 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 15 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/_framework/aspnetcore-browser-refresh.js - - - 200 12024 application/javascript;+charset=utf-8 55.1341ms 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\css\\site.css' 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\js\\site.js' 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 5 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/css/site.css?v=AKvNjO3dCPPS0eSU1Ez8T2wI280i08yGycV9ndytL-c - - - 200 194 text/css 94.5017ms 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 13 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/js/site.js?v=4q1jwFhaPaZgr8WAUSrux6hAuh0XDg9kPS3xIVq36I0 - - - 200 230 application/javascript 77.4123ms 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 12938 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 7558 and flags NONE. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/jquery/dist/jquery.min.js'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\lib\\jquery\\dist\\jquery.min.js' 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.bundle.min.js'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.bundle.min.js' 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/lib/jquery/dist/jquery.min.js - - - 200 89478 application/javascript 93.8938ms 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/js/bootstrap.bundle.min.js - - - 200 78474 application/javascript 93.0748ms 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 9975 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 15270 and flags NONE. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.min.css'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.min.css' 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/css/bootstrap.min.css - - - 200 162726 text/css 109.3089ms 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 71.3116ms Configure NLog Targets for output Next step, see Configure NLog with nlog.config","title":"Getting started with ASP.NET Core 6"},{"location":"Getting-started-with-ASP.NET-Core-6/#0-create-a-new-aspnet-core-project","text":"In Visual Studio 2022. Version 17.0+ is needed","title":"0. Create a new ASP.NET Core project"},{"location":"Getting-started-with-ASP.NET-Core-6/#1-add-dependency-in-csproj-manually-or-using-nuget","text":"Install the latest: - NLog.Web.AspNetCore v5+ - Update the NLog package if possible in csproj: <ItemGroup> <PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"5.*\" /> <PackageReference Include=\"NLog\" Version=\"5.*\" /> </ItemGroup>","title":"1. Add dependency in csproj manually or using NuGet"},{"location":"Getting-started-with-ASP.NET-Core-6/#2-create-a-nlogconfig-file","text":"Create nlog.config (lowercase all) file in the root of your project. We use this example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Info\" internalLogFile=\"c:\\temp\\internal-nlog-AspNetCore.txt\"> <!-- enable asp.net core layout renderers --> <extensions> <add assembly=\"NLog.Web.AspNetCore\"/> </extensions> <!-- the targets to write to --> <targets> <!-- File Target for all log messages with basic details --> <target xsi:type=\"File\" name=\"allfile\" fileName=\"c:\\temp\\nlog-AspNetCore-all-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}\" /> <!-- File Target for own log messages with extra web details using some ASP.NET core renderers --> <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"c:\\temp\\nlog-AspNetCore-own-${shortdate}.log\" layout=\"${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}\" /> <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection --> <target xsi:type=\"Console\" name=\"lifetimeConsole\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <!-- rules to map from logger name to target --> <rules> <!--All logs, including from Microsoft--> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" /> <!--Output hosting lifetime messages to console target for faster startup detection --> <logger name=\"Microsoft.Hosting.Lifetime\" minlevel=\"Info\" writeTo=\"lifetimeConsole, ownFile-web\" final=\"true\" /> <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) --> <logger name=\"Microsoft.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"System.Net.Http.*\" maxlevel=\"Info\" final=\"true\" /> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> </nlog> More details of the config file are here . Notice that one might have to pay special attention to the Hosting Lifetime Startup Messages , if removing all other LoggingProviders (Like Console) and only using NLog. As it can cause hosting environment (Visual Studio / Docker / Azure Container) to not see application as started. If you like to include other targets or layout renderers, check the Platform support table, as there is a limited set implemented. Check the column NetStandard . To read more about NetStandard, see the docs from Microsoft . Check .NET Standard 2.1 for ASP.NET Core 6.","title":"2. Create a nlog.config file."},{"location":"Getting-started-with-ASP.NET-Core-6/#3-update-programcs","text":"Update the program.cs using NLog; using NLog.Web; // Early init of NLog to allow startup and exception logging, before host is built var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger(); logger.Debug(\"init main\"); try { var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddControllersWithViews(); // NLog: Setup NLog for Dependency injection builder.Logging.ClearProviders(); builder.Host.UseNLog(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(\"/Home/Error\"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); app.Run(); } catch (Exception exception) { // NLog: catch setup errors logger.Error(exception, \"Stopped program because of exception\"); throw; } finally { // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); }","title":"3. Update program.cs"},{"location":"Getting-started-with-ASP.NET-Core-6/#4-microsoft-logging-filters","text":"The Microsoft Logging filters specified in appsettings.json are ignored by default when using NLog 5.0. Just make sure that NLog configuration rules are configured correctly. <rules> <logger name=\"System.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" /> </rules> If one specify RemoveLoggerFactoryFilter = false for the NLog Logging Provider options, then it will use the filters specified in appsettings.json. Notice it is also possible to specify the NLog configuration in the appsettings.json . { \"Logging\": { \"LogLevel\": { \"Default\": \"Trace\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, \"AllowedHosts\": \"*\" } Remember to also update any environment specific configuration to avoid any surprises. Ex appsettings.Development.json","title":"4. Microsoft Logging Filters"},{"location":"Getting-started-with-ASP.NET-Core-6/#5-write-logs","text":"Inject the ILogger in your controller: using Microsoft.Extensions.Logging; public class HomeController : Controller { private readonly ILogger<HomeController> _logger; public HomeController(ILogger<HomeController> logger) { _logger = logger; _logger.LogDebug(1, \"NLog injected into HomeController\"); } public IActionResult Index() { _logger.LogInformation(\"Hello, this is the index!\"); return View(); } }","title":"5. Write logs"},{"location":"Getting-started-with-ASP.NET-Core-6/#6-example-output","text":"When starting the ASP.NET Core website, we get two files:","title":"6. Example Output"},{"location":"Getting-started-with-ASP.NET-Core-6/#nlog-own-2021-12-01log","text":"2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7125 |url: |action: |Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5125 |url: |action: |Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. |url: |action: |Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.OnApplicationStarted 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development |url: |action: |Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.OnApplicationStarted 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\\Users\\snakefoot\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\ |url: |action: |Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.OnApplicationStarted 2022-08-18 18:35:25.6656|1|DEBUG|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|NLog injected into HomeController |url: https://localhost/|action: Index|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController..ctor 2022-08-18 18:35:25.6656|0|INFO|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|Hello, this is the index! |url: https://localhost/|action: Index|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index","title":"nlog-own-2021-12-01.log"},{"location":"Getting-started-with-ASP.NET-Core-6/#nlog-all-2021-12-01log","text":"2022-08-18 18:35:15.1343|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16TVPK9JQ\" received FIN. 2022-08-18 18:35:15.1694|48|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16TVPK9JQ\" is closed. The last processed stream ID was 29. 2022-08-18 18:35:15.1694|7|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16TVPK9JQ\" sending FIN because: \"The client closed the connection.\" 2022-08-18 18:35:15.1805|2|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16TVPK9JQ\" stopped. 2022-08-18 18:35:23.6686|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Home/Index.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Home/Privacy.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Shared/Error.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Shared/_ValidationScriptsPartial.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/_ViewImports.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/_ViewStart.cshtml'. 2022-08-18 18:35:23.7133|3|DEBUG|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Initializing Razor view compiler with compiled view: '/Views/Shared/_Layout.cshtml'. 2022-08-18 18:35:23.7133|12|DEBUG|Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory|Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 2022-08-18 18:35:23.7746|1|DEBUG|Microsoft.Extensions.Hosting.Internal.Host|Hosting starting 2022-08-18 18:35:23.8067|63|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-237c4f12-6703-4dd8-8e04-b904f77128d3.xml'. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-6c9a4248-29ef-409e-9349-fe5e287b835d.xml'. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-750f4bc0-7cc0-4ad8-809a-39972a95298d.xml'. 2022-08-18 18:35:23.8067|37|DEBUG|Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository|Reading data from file 'C:\\Users\\XXX\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-dab65855-4eb4-4890-a09b-93b48ace1718.xml'. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {237c4f12-6703-4dd8-8e04-b904f77128d3}. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {6c9a4248-29ef-409e-9349-fe5e287b835d}. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {750f4bc0-7cc0-4ad8-809a-39972a95298d}. 2022-08-18 18:35:23.8067|18|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|Found key {dab65855-4eb4-4890-a09b-93b48ace1718}. 2022-08-18 18:35:23.8272|13|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver|Considering key {dab65855-4eb4-4890-a09b-93b48ace1718} with expiration date 2022-11-16 16:27:50Z as default key. 2022-08-18 18:35:23.8272|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2022-08-18 18:35:23.8272|51|DEBUG|Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor|Decrypting secret element using Windows DPAPI. 2022-08-18 18:35:23.8272|0|DEBUG|Microsoft.AspNetCore.DataProtection.TypeForwardingActivator|Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 2022-08-18 18:35:23.8367|4|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 2022-08-18 18:35:23.8367|3|DEBUG|Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory|Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 2022-08-18 18:35:23.8367|2|DEBUG|Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider|Using key {dab65855-4eb4-4890-a09b-93b48ace1718} as the default key. 2022-08-18 18:35:23.8367|65|DEBUG|Microsoft.AspNetCore.DataProtection.Internal.DataProtectionHostedService|Key ring with default key {dab65855-4eb4-4890-a09b-93b48ace1718} was loaded during application startup. 2022-08-18 18:35:23.9534|0|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer|Using development certificate: CN=localhost (Thumbprint: 3271A3360CD4E4DC9058F84E9FB3A1E651D0F7C9) 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: https://localhost:7125 2022-08-18 18:35:23.9930|14|INFO|Microsoft.Hosting.Lifetime|Now listening on: http://localhost:5125 2022-08-18 18:35:24.0084|13|DEBUG|Microsoft.AspNetCore.Hosting.Diagnostics|Loaded hosting startup assembly ASP.NetCore6_NLog_Web_Example 2022-08-18 18:35:24.0084|13|DEBUG|Microsoft.AspNetCore.Hosting.Diagnostics|Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 2022-08-18 18:35:24.0084|13|DEBUG|Microsoft.AspNetCore.Hosting.Diagnostics|Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development 2022-08-18 18:35:24.0084|0|INFO|Microsoft.Hosting.Lifetime|Content root path: C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\ 2022-08-18 18:35:24.0084|2|DEBUG|Microsoft.Extensions.Hosting.Internal.Host|Hosting started 2022-08-18 18:35:24.4292|39|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TR\" accepted. 2022-08-18 18:35:24.4292|39|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TQ\" accepted. 2022-08-18 18:35:24.4306|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TQ\" started. 2022-08-18 18:35:24.4306|1|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Connections|Connection id \"0HMK16UJ982TR\" started. 2022-08-18 18:35:24.4533|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16UJ982TQ\" received FIN. 2022-08-18 18:35:24.4533|6|DEBUG|Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Connection id \"0HMK16UJ982TR\" received FIN. 2022-08-18 18:35:25.5421|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/ - - 2022-08-18 18:35:25.5892|0|DEBUG|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|Wildcard detected, all requests with hosts will be allowed. 2022-08-18 18:35:25.5892|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:25.5892|4|DEBUG|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|The request path / does not match a supported file type 2022-08-18 18:35:25.6168|1001|DEBUG|Microsoft.AspNetCore.Routing.Matching.DfaMatcher|1 candidate(s) found for the request path '/' 2022-08-18 18:35:25.6198|1005|DEBUG|Microsoft.AspNetCore.Routing.Matching.DfaMatcher|Endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' with route pattern '{controller=Home}/{action=Index}/{id?}' is valid for the request path '/' 2022-08-18 18:35:25.6198|1|DEBUG|Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware|Request matched endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' 2022-08-18 18:35:25.6198|0|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' 2022-08-18 18:35:25.6595|3|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = \"Index\", controller = \"Home\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Index() on controller ASP.NetCore6_NLog_Web_Example.Controllers.HomeController (ASP.NetCore6_NLog_Web_Example). 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of authorization filters (in the following order): None 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of resource filters (in the following order): Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.Filters.ControllerActionFilter (Order: -2147483648), Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000) 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of exception filters (in the following order): None 2022-08-18 18:35:25.6595|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter 2022-08-18 18:35:25.6656|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: Before executing OnResourceExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6656|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: After executing OnResourceExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6656|1|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executing controller factory for controller ASP.NetCore6_NLog_Web_Example.Controllers.HomeController (ASP.NetCore6_NLog_Web_Example) 2022-08-18 18:35:25.6656|1|DEBUG|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|NLog injected into HomeController 2022-08-18 18:35:25.6656|2|DEBUG|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed controller factory for controller ASP.NetCore6_NLog_Web_Example.Controllers.HomeController (ASP.NetCore6_NLog_Web_Example) 2022-08-18 18:35:25.6656|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: Before executing OnActionExecutionAsync on filter Microsoft.AspNetCore.Mvc.Filters.ControllerActionFilter. 2022-08-18 18:35:25.6656|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: Before executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6656|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: After executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6656|1|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executing action method ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example) - Validation state: Valid 2022-08-18 18:35:25.6656|0|INFO|ASP.NetCore6_NLog_Web_Example.Controllers.HomeController|Hello, this is the index! 2022-08-18 18:35:25.6831|2|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action method ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example), returned result Microsoft.AspNetCore.Mvc.ViewResult in 2.7721ms. 2022-08-18 18:35:25.6831|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: Before executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6831|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: After executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter. 2022-08-18 18:35:25.6831|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Action Filter: After executing OnActionExecutionAsync on filter Microsoft.AspNetCore.Mvc.Filters.ControllerActionFilter. 2022-08-18 18:35:25.6831|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: Before executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6831|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: After executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.6831|4|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Before executing action result Microsoft.AspNetCore.Mvc.ViewResult. 2022-08-18 18:35:25.6831|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view 'Index' in controller 'Home'. 2022-08-18 18:35:25.6831|5|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Located compiled view for view at path '/Views/Home/Index.cshtml'. 2022-08-18 18:35:25.6831|7|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Could not find a file for view at path '/Views/Home/_ViewStart.cshtml'. 2022-08-18 18:35:25.6831|5|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Located compiled view for view at path '/Views/_ViewStart.cshtml'. 2022-08-18 18:35:25.6831|7|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Could not find a file for view at path '/_ViewStart.cshtml'. 2022-08-18 18:35:25.6960|1|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executing ViewResult, running view Index. 2022-08-18 18:35:25.6960|2|DEBUG|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|The view path '/Views/Home/Index.cshtml' was found in 9.3119ms. 2022-08-18 18:35:25.7393|1|DEBUG|Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine|View lookup cache miss for view '_Layout' in controller 'Home'. 2022-08-18 18:35:25.7393|7|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Could not find a file for view at path '/Views/Home/_Layout.cshtml'. 2022-08-18 18:35:25.7393|5|TRACE|Microsoft.AspNetCore.Mvc.Razor.Compilation.DefaultViewCompiler|Located compiled view for view at path '/Views/Shared/_Layout.cshtml'. 2022-08-18 18:35:25.7816|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result / 2022-08-18 18:35:25.7899|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result / 2022-08-18 18:35:25.7899|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in /Home/Privacy and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result /Home/Privacy 2022-08-18 18:35:25.7899|100|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Found the endpoints Route: {controller=Home}/{action=Index}/{id?} for address Microsoft.AspNetCore.Routing.RouteValuesAddress 2022-08-18 18:35:25.7899|102|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Successfully processed template {controller=Home}/{action=Index}/{id?} for Route: {controller=Home}/{action=Index}/{id?} resulting in /Home/Privacy and 2022-08-18 18:35:25.7899|105|DEBUG|Microsoft.AspNetCore.Routing.DefaultLinkGenerator|Link generation succeeded for endpoints Route: {controller=Home}/{action=Index}/{id?} with result /Home/Privacy 2022-08-18 18:35:25.9178|4|INFO|Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor|Executed ViewResult - view Index executed in 231.1047ms. 2022-08-18 18:35:25.9178|5|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|After executing action result Microsoft.AspNetCore.Mvc.ViewResult. 2022-08-18 18:35:25.9178|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: Before executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Result Filter: After executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|2|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: Before executing OnResourceExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|3|TRACE|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Resource Filter: After executing OnResourceExecuted on filter Microsoft.AspNetCore.Mvc.ViewFeatures.Filters.SaveTempDataFilter. 2022-08-18 18:35:25.9178|2|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example) in 261.5085ms 2022-08-18 18:35:25.9178|1|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'ASP.NetCore6_NLog_Web_Example.Controllers.HomeController.Index (ASP.NetCore6_NLog_Web_Example)' 2022-08-18 18:35:25.9417|1|DEBUG|Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware|Response markup is scheduled to include browser refresh script injection. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 1 with length 67 and flags END_HEADERS. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 1024 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 1024 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 917 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 65 and flags NONE. 2022-08-18 18:35:25.9571|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 18 and flags NONE. 2022-08-18 18:35:25.9749|2|DEBUG|Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware|Response markup was updated to include browser refresh script injection. 2022-08-18 18:35:25.9834|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 1 with length 0 and flags END_STREAM. 2022-08-18 18:35:25.9962|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/ - - - 200 - text/html;+charset=utf-8 456.1640ms 2022-08-18 18:35:26.0191|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 3 with length 106 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 5 with length 67 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 7 with length 91 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/css/site.css?v=AKvNjO3dCPPS0eSU1Ez8T2wI280i08yGycV9ndytL-c - - 2022-08-18 18:35:26.0257|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/css/bootstrap.min.css - - 2022-08-18 18:35:26.0257|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0257|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 9 with length 55 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 11 with length 55 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 13 with length 67 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 15 with length 52 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|37|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" received HEADERS frame for stream ID 17 with length 34 and flags END_STREAM, END_HEADERS, PRIORITY. 2022-08-18 18:35:26.0257|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/ASP.NetCore6_NLog_Web_Example.styles.css?v=RE8iCRyLdOMjrQXlLNeo4W3xw0k_zNKqvYCiPxC_9nE - - 2022-08-18 18:35:26.0257|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/lib/jquery/dist/jquery.min.js - - 2022-08-18 18:35:26.0416|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/js/bootstrap.bundle.min.js - - 2022-08-18 18:35:26.0416|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 7 with length 77 and flags END_HEADERS. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 7 with length 1146 and flags NONE. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 9 with length 86 and flags END_HEADERS. 2022-08-18 18:35:26.0416|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/ASP.NetCore6_NLog_Web_Example.styles.css'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\obj\\Debug\\net6.0\\scopedcss\\bundle\\ASP.NetCore6_NLog_Web_Example.styles.css' 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 7 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.0416|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/ASP.NetCore6_NLog_Web_Example.styles.css?v=RE8iCRyLdOMjrQXlLNeo4W3xw0k_zNKqvYCiPxC_9nE - - - 200 1146 text/css 15.8363ms 2022-08-18 18:35:26.0416|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/js/site.js?v=4q1jwFhaPaZgr8WAUSrux6hAuh0XDg9kPS3xIVq36I0 - - 2022-08-18 18:35:26.0416|2|TRACE|Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware|All hosts are allowed. 2022-08-18 18:35:26.0416|0|TRACE|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Range header's value is empty. 2022-08-18 18:35:26.0416|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 11 with length 33 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 3 with length 34 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.0553|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/_framework/aspnetcore-browser-refresh.js - - 2022-08-18 18:35:26.0553|1|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7125/_vs/browserLink - - 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 5 with length 31 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 13 with length 31 and flags END_HEADERS. 2022-08-18 18:35:26.0553|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 5 with length 194 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 13 with length 230 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 15 with length 60 and flags END_HEADERS. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 15 with length 12024 and flags NONE. 2022-08-18 18:35:26.0924|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending HEADERS frame for stream ID 17 with length 119 and flags END_HEADERS. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 9986 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1097|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 15 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/_framework/aspnetcore-browser-refresh.js - - - 200 12024 application/javascript;+charset=utf-8 55.1341ms 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/css/site.css'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\css\\site.css' 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/js/site.js'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\js\\site.js' 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 5 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/css/site.css?v=AKvNjO3dCPPS0eSU1Ez8T2wI280i08yGycV9ndytL-c - - - 200 194 text/css 94.5017ms 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 13 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1195|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/js/site.js?v=4q1jwFhaPaZgr8WAUSrux6hAuh0XDg9kPS3xIVq36I0 - - - 200 230 application/javascript 77.4123ms 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 16384 and flags NONE. 2022-08-18 18:35:26.1195|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 12938 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 7558 and flags NONE. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/jquery/dist/jquery.min.js'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\lib\\jquery\\dist\\jquery.min.js' 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 9 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.bundle.min.js'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.bundle.min.js' 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/lib/jquery/dist/jquery.min.js - - - 200 89478 application/javascript 93.8938ms 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 11 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/js/bootstrap.bundle.min.js - - - 200 78474 application/javascript 93.0748ms 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 10240 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 9975 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 16384 and flags NONE. 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 15270 and flags NONE. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware|Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.min.css'. Physical path: 'C:\\Users\\XXX\\source\\repos\\NLog.Web\\examples\\ASP.NET Core 6\\ASP.NET Core 6 NLog Example\\wwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.min.css' 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 3 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/lib/bootstrap/dist/css/bootstrap.min.css - - - 200 162726 text/css 109.3089ms 2022-08-18 18:35:26.1329|49|TRACE|Microsoft.AspNetCore.Server.Kestrel.Http2|Connection id \"0HMK16UJ982TT\" sending DATA frame for stream ID 17 with length 0 and flags END_STREAM. 2022-08-18 18:35:26.1329|2|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7125/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 71.3116ms","title":"nlog-all-2021-12-01.log"},{"location":"Getting-started-with-ASP.NET-Core-6/#configure-nlog-targets-for-output","text":"Next step, see Configure NLog with nlog.config","title":"Configure NLog Targets for output"},{"location":"GroupByWrapper-target/","text":"Allow one to to take an entire batch of logevents and group-by ex. request-identifier. Splitting the batch into individual emails / reports. Platforms Supported: All (Introduced with NLog 5.0) Configuration Syntax <targets> <target xsi:type=\"GroupByWrapper\" name=\"String\" key=\"Layout\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters Key - Layout used for grouping the LogEvents into smaller batches. Example Creates a buffer of the last 50 LogEvents, and flushes when receiving LogEvent with LogLevel.Error. Then groups the LogEvents by their individual request (Using ${activity} other correlationid). Then generates output only containing the LogEvents matching the failed request. <target name=\"String\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Error\" flushOnConditionOnly=\"true\"> <target name=\"String\" xsi:type=\"BufferingWrapper\" bufferSize=\"50\" overflowAction=\"Discard\"> <target name=\"String\" xsi:type=\"GroupByWrapper\" key=\"${ActivityId}\"> <target name=\"String\" xsi:type=\"PostFilteringWrapper\" defaultFilter=\"Ignore\"> <when exists=\"level >= LogLevel.Error\" filter=\"Log\"/> <target xsi:type=\"myTargetType\" ...target properties... /> </target> </target> </target> </target>","title":"GroupByWrapper target"},{"location":"GroupByWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"GroupByWrapper\" name=\"String\" key=\"Layout\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"GroupByWrapper-target/#parameters","text":"Key - Layout used for grouping the LogEvents into smaller batches.","title":"Parameters"},{"location":"GroupByWrapper-target/#example","text":"Creates a buffer of the last 50 LogEvents, and flushes when receiving LogEvent with LogLevel.Error. Then groups the LogEvents by their individual request (Using ${activity} other correlationid). Then generates output only containing the LogEvents matching the failed request. <target name=\"String\" xsi:type=\"AutoFlushWrapper\" condition=\"level >= LogLevel.Error\" flushOnConditionOnly=\"true\"> <target name=\"String\" xsi:type=\"BufferingWrapper\" bufferSize=\"50\" overflowAction=\"Discard\"> <target name=\"String\" xsi:type=\"GroupByWrapper\" key=\"${ActivityId}\"> <target name=\"String\" xsi:type=\"PostFilteringWrapper\" defaultFilter=\"Ignore\"> <when exists=\"level >= LogLevel.Error\" filter=\"Log\"/> <target xsi:type=\"myTargetType\" ...target properties... /> </target> </target> </target> </target>","title":"Example"},{"location":"Guid-layout-renderer/","text":"Globally-unique identifier (GUID). Platforms Supported: All Configuration Syntax ${guid:format=String} Parameters Rendering Options format - GUID format as accepted by Guid.ToString() method. Default: N GeneratedFromLogEvent - Creates a special GUID from the LogEvent, so if the LogEvent is written to multiple targets, then all targets will get the same GUID for the LogEvent (Like a CorrelationId). Default: False Introduced with NLog 4.5","title":"Guid layout renderer"},{"location":"Guid-layout-renderer/#configuration-syntax","text":"${guid:format=String}","title":"Configuration Syntax"},{"location":"Guid-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Guid-layout-renderer/#rendering-options","text":"format - GUID format as accepted by Guid.ToString() method. Default: N GeneratedFromLogEvent - Creates a special GUID from the LogEvent, so if the LogEvent is written to multiple targets, then all targets will get the same GUID for the LogEvent (Like a CorrelationId). Default: False Introduced with NLog 4.5","title":"Rendering Options"},{"location":"HTTP-target/","text":"NLog.Targets.HTTP NLog.Targets.HTTP is a HTTP POST target for NLog. Combined with JSON formatter it can be used to send events to an instance of Splunk and other HTTP based collectors. Getting started Add the library as an extension to nlog: <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" > <extensions> <add assembly=\"NLog.Targets.Http\" /> </extensions> <targets> ... Available Configuration Parameters Listed below are available configuration parameters with their default values <target name='target name' type='HTTP' URL='protocol://server:port/path' Method='POST' Authorization='phrase token' BatchSize='1' MaxQueueSize='2147483647' IgnoreSslErrors='true' FlushBeforeShutdown='true' ContentType='application/json' Accept='application/json' DefaultConnectionLimit='2' Expect100Continue='false' UseNagleAlgorithm='true' ConnectTimeout='30000' InMemoryCompression='true' ProxyUrl='' ProxyUser='' ProxyPassword='' > URL The URL to send messages to (mandatory) Method HTTP method to use (GET, POST ,PUT, etc.) Authorization The Authorization Header value to pass. BatchSize Number of messages to be sent together in one call separated by an empty new line MaxQueueSize Maximum number of messages awaiting to be send. Please note, that if this value is set, the logger might be blocking. IgnoreSsslErrors Some SSL certificates might be invalid or not-trusted. FlushBeforeShutdown Force all messages to be delivered before shutting down. ContentType HTTP ContentType Header value. Accept HTTP Accept Header value. DefaultConnectionLimit How many connections might be used at the same time. Changes ServicePointManager.DefaultConnectionLimit, which might affect other parts of your system. Expect100Continue See this article . UseNagleAlgorithm The Nagle algorithm is used to buffer small packets of data and transmit them as a single packet. This process, referred to as \"nagling,\" is widely used because it reduces the number of packets transmitted and lowers the overhead per packet. The Nagle algorithm is fully described in IETF RFC 896. ConnectTimeout How long should the client wait to connect (default is 30 seconds). InMemoryCompression Reduces the amount of memory consumed at the expense of increased CPU usage. ProxyUrl Designates a proxy server to use. Must include protocol (http|https) and port ProxyUser If proxy authentication is needed, you can specify it with a domain prefix, i.e. DOMAIN\\USER. ProxyPassword Password to use for proxy authentication. Sample SPLUNK Configuration <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" > <targets> <target name='splunk' type='HTTP' URL='server:port/services/collector' Authorization='Splunk auth-token' BatchSize='100'> <layout type='JsonLayout'> <attribute name='sourcetype' layout='_json' /> <attribute name='host' layout='${machinename}' /> <attribute name='event' encode='false'> <layout type='JsonLayout'> <attribute name='level' layout='${level:upperCase=true}' /> <attribute name='source' layout='${logger}' /> <attribute name='thread' layout='${threadid}' /> <attribute name='message' layout='${message}' /> <attribute name='utc' layout='${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff}' /> </layout> </attribute> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"splunk\" /> </rules> </nlog>","title":"NLog.Targets.HTTP"},{"location":"HTTP-target/#nlogtargetshttp","text":"NLog.Targets.HTTP is a HTTP POST target for NLog. Combined with JSON formatter it can be used to send events to an instance of Splunk and other HTTP based collectors.","title":"NLog.Targets.HTTP"},{"location":"HTTP-target/#getting-started","text":"Add the library as an extension to nlog: <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" > <extensions> <add assembly=\"NLog.Targets.Http\" /> </extensions> <targets> ...","title":"Getting started"},{"location":"HTTP-target/#available-configuration-parameters","text":"Listed below are available configuration parameters with their default values <target name='target name' type='HTTP' URL='protocol://server:port/path' Method='POST' Authorization='phrase token' BatchSize='1' MaxQueueSize='2147483647' IgnoreSslErrors='true' FlushBeforeShutdown='true' ContentType='application/json' Accept='application/json' DefaultConnectionLimit='2' Expect100Continue='false' UseNagleAlgorithm='true' ConnectTimeout='30000' InMemoryCompression='true' ProxyUrl='' ProxyUser='' ProxyPassword='' >","title":"Available Configuration Parameters"},{"location":"HTTP-target/#url","text":"The URL to send messages to (mandatory)","title":"URL"},{"location":"HTTP-target/#method","text":"HTTP method to use (GET, POST ,PUT, etc.)","title":"Method"},{"location":"HTTP-target/#authorization","text":"The Authorization Header value to pass.","title":"Authorization"},{"location":"HTTP-target/#batchsize","text":"Number of messages to be sent together in one call separated by an empty new line","title":"BatchSize"},{"location":"HTTP-target/#maxqueuesize","text":"Maximum number of messages awaiting to be send. Please note, that if this value is set, the logger might be blocking.","title":"MaxQueueSize"},{"location":"HTTP-target/#ignoressslerrors","text":"Some SSL certificates might be invalid or not-trusted.","title":"IgnoreSsslErrors"},{"location":"HTTP-target/#flushbeforeshutdown","text":"Force all messages to be delivered before shutting down.","title":"FlushBeforeShutdown"},{"location":"HTTP-target/#contenttype","text":"HTTP ContentType Header value.","title":"ContentType"},{"location":"HTTP-target/#accept","text":"HTTP Accept Header value.","title":"Accept"},{"location":"HTTP-target/#defaultconnectionlimit","text":"How many connections might be used at the same time. Changes ServicePointManager.DefaultConnectionLimit, which might affect other parts of your system.","title":"DefaultConnectionLimit"},{"location":"HTTP-target/#expect100continue","text":"See this article .","title":"Expect100Continue"},{"location":"HTTP-target/#usenaglealgorithm","text":"The Nagle algorithm is used to buffer small packets of data and transmit them as a single packet. This process, referred to as \"nagling,\" is widely used because it reduces the number of packets transmitted and lowers the overhead per packet. The Nagle algorithm is fully described in IETF RFC 896.","title":"UseNagleAlgorithm"},{"location":"HTTP-target/#connecttimeout","text":"How long should the client wait to connect (default is 30 seconds).","title":"ConnectTimeout"},{"location":"HTTP-target/#inmemorycompression","text":"Reduces the amount of memory consumed at the expense of increased CPU usage.","title":"InMemoryCompression"},{"location":"HTTP-target/#proxyurl","text":"Designates a proxy server to use. Must include protocol (http|https) and port","title":"ProxyUrl"},{"location":"HTTP-target/#proxyuser","text":"If proxy authentication is needed, you can specify it with a domain prefix, i.e. DOMAIN\\USER.","title":"ProxyUser"},{"location":"HTTP-target/#proxypassword","text":"Password to use for proxy authentication.","title":"ProxyPassword"},{"location":"HTTP-target/#sample-splunk-configuration","text":"<?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" > <targets> <target name='splunk' type='HTTP' URL='server:port/services/collector' Authorization='Splunk auth-token' BatchSize='100'> <layout type='JsonLayout'> <attribute name='sourcetype' layout='_json' /> <attribute name='host' layout='${machinename}' /> <attribute name='event' encode='false'> <layout type='JsonLayout'> <attribute name='level' layout='${level:upperCase=true}' /> <attribute name='source' layout='${logger}' /> <attribute name='thread' layout='${threadid}' /> <attribute name='message' layout='${message}' /> <attribute name='utc' layout='${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff}' /> </layout> </attribute> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"splunk\" /> </rules> </nlog>","title":"Sample SPLUNK Configuration"},{"location":"Home/","text":"Welcome to the NLog documentation! Just start with one of the tutorials to log messages within minutes! NLog supports the .NET Frameworks 3.5 - 4.8 along with ASP.NET Core using Microsoft dependency injection. See the getting started pages. For structured logging, introduced in NLog 4.5, see How to use structured logging There are many available output options: NLog Targets - Output destinations NLog Layout-Renderers - Output templates NLog Layouts - Output formats Are you missing some targets or layouts in NLog? Check extending NLog or even better, contribute to NLog ! Issues with logging? Check the Troubleshooting Guide","title":"Home"},{"location":"HostName-Layout-Renderer/","text":"The computer DNS HostName that the process is running on. Platforms Supported: All Introduced with NLog 4.6 Configuration Syntax ${hostname} Remarks See also ${machinename} For NetBIOS name See also ${local-ip} For IP Address","title":"HostName Layout Renderer"},{"location":"HostName-Layout-Renderer/#configuration-syntax","text":"${hostname}","title":"Configuration Syntax"},{"location":"HostName-Layout-Renderer/#remarks","text":"See also ${machinename} For NetBIOS name See also ${local-ip} For IP Address","title":"Remarks"},{"location":"How-to-Log-Exceptions/","text":"Exceptions require special treatment in NLog. You need to call the method on the Logger class which takes an Exception as its first argument. The method name matches the log level. For instance, to log an exception using the Error loglevel, do: logger.Error(ex, \"Oops, an exception occured\"); Please note : the methods have been changed in NLog 4.0. Previous versions expected the exception after the message. Example You typically log exceptions inside a catch handler. An example of logging an exception with the Error LogLevel is seen in the following: try { // some code which may throw } catch (MyException ex) { logger.Error(ex, \"Got exception.\"); // NLog 4.0 and newer logger.Error(\"Got exception.\", ex); // Before NLog 4.0, and now obsolete } Exception Formatting To write the details of the exception, use the ${exception} in your layout. Depending on the desired output you may want to specify different value for the format argument. The following example displays the result of calling ToString() on the exception object. <nlog> <targets> <target name=\"f\" type=\"File\" layout=\"${longdate} ${message} ${exception:format=tostring}\"/> </targets> <rules> <logger name=\"*\" writeTo=\"f\"/> </rules> </nlog> For simpler scenarios you may directly use the ${message:withException=true} , which is used in the default Layout in NLog v5.0: <nlog> <targets> <target name=\"f\" type=\"File\" layout=\"${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}\"/> </targets> <rules> <logger name=\"*\" writeTo=\"f\"/> </rules> </nlog>","title":"How to Log Exceptions"},{"location":"How-to-Log-Exceptions/#example","text":"You typically log exceptions inside a catch handler. An example of logging an exception with the Error LogLevel is seen in the following: try { // some code which may throw } catch (MyException ex) { logger.Error(ex, \"Got exception.\"); // NLog 4.0 and newer logger.Error(\"Got exception.\", ex); // Before NLog 4.0, and now obsolete }","title":"Example"},{"location":"How-to-Log-Exceptions/#exception-formatting","text":"To write the details of the exception, use the ${exception} in your layout. Depending on the desired output you may want to specify different value for the format argument. The following example displays the result of calling ToString() on the exception object. <nlog> <targets> <target name=\"f\" type=\"File\" layout=\"${longdate} ${message} ${exception:format=tostring}\"/> </targets> <rules> <logger name=\"*\" writeTo=\"f\"/> </rules> </nlog> For simpler scenarios you may directly use the ${message:withException=true} , which is used in the default Layout in NLog v5.0: <nlog> <targets> <target name=\"f\" type=\"File\" layout=\"${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}\"/> </targets> <rules> <logger name=\"*\" writeTo=\"f\"/> </rules> </nlog>","title":"Exception Formatting"},{"location":"How-to-create-Logger-for-sub-classes/","text":"When we wish to expose the logger into sub classes the following pattern could be used. class BaseClass { protected BaseClass() { Log = LogManager.GetLogger(GetType().ToString()); } protected Logger Log { get; private set; } } class ExactClass : BaseClass { public ExactClass() : base() { } ... } Alternative solution could be this: class BaseClass { protected virtual Logger Log { get { return _logger; } } private static Logger _logger = LogManager.GetCurrentClassLogger(); } class ExactClass : BaseClass { protected override Logger Log { get { return _logger; } } private static Logger _logger = LogManager.GetCurrentClassLogger(); }","title":"How to create Logger for sub classes"},{"location":"How-to-use-structured-logging/","text":"NLog 4.5 introduces structured logging - also called semantic logging. This document describes how to use structural logging. The implementation in NLog supports the message templates syntax, so it is recommended to check: https://messagetemplates.org/ Why structured logging Structured logging makes it easier to store and query log-events, as the logevent message-template and message-parameters are preserved, instead of just transforming them into a formatted message. The normal .NET string.Format(...) will only accept input strings like this: logger.Info(\"Logon by user:{0} from ip_address:{1}\", \"Kenny\", \"127.0.0.1\"); logger.Debug(\"Shopitem:{0} added to basket by user:{1}\", \"Jacket\", \"Kenny\"); When storing these log-events in a database (or somewhere else), then it can be difficult to query all actions performed by a certain user. Also it could be hard to group similar events. The workaround would then be to perform RegEx-queries to recognize logevent messages and convert them into a more structured format, and register which parameter index is the user. The RegEx might even have to extract the needed details from the formatted message, making it even more fragile. Maintaining these RegEx-queries can become rather cumbersome. Further history: messagetemplates.org Using structured logging NLog has always supported log-event metadata called event-properties , but it requires a little effort to generate a log-event with properties. See also the Fluent-Logger-API NLog 4.5 makes it a easier to capture and preserve log-event-properties, so they can be easily processed by the NLog destination target: logger.Info(\"Logon by {user} from {ip_address}\", \"Kenny\", \"127.0.0.1\"); // Logon by \"Kenny\" from \"127.0.0.1\" logger.Debug(\"{shopitem} added to basket by {user}\", new { Id=6, Name = \"Jacket\", Color = \"Orange\" }, \"Kenny\"); Any NLog destination target that is able to handle log-event-properties will automatically experience the benefit of doing structured logging. Formatting of the message The formatting of message depends on the datatype of the parameters. Example: logger.Info(\"Order {orderid} created for {user}\", 42, \"Kenny\"); Will be formatted as: Order 42 created for \"Kenny\" The formatting is controlled by the datatype of the parameter: - string: surrounded with double quotes, e.g \"hello\" - number: no quotes - null: printed as NULL - list/ienumerable/array: \"item1\", \"item2\" - dictionary: \"key1\"=\"value1\", \"key2\"=\"value2\" - objects: ToString() It's possible to control formatting by preceding @ or $ : @ will format the object as JSON $ forces ToString() Examples Object o = null; logger.Info(\"Test {value1}\", o); // null case. Result: Test NULL logger.Info(\"Test {value1}\", new DateTime(2018,03, 25)); // datetime case. Result: Test 25-3-2018 00:00:00 (locale TString) logger.Info(\"Test {value1}\", new List<string> { \"a\", \"b\" }); // list of strings. Result: Test \"a\", \"b\" logger.Info(\"Test {value1}\", new[] { \"a\", \"b\" }); // array. Result: Test \"a\", \"b\" logger.Info(\"Test {value1}\", new Dictionary<string, int> { { \"key1\", 1 }, { \"key2\", 2 } }); // dict. Result: Test \"key1\"=1, \"key2\"=2 var order = new Order { OrderId = 2, Status = OrderStatus.Processing }; logger.Info(\"Test {value1}\", order); // object Result: Test MyProgram.Program+Order logger.Info(\"Test {@value1}\", order); // object Result: Test {\"OrderId\":2, \"Status\":\"Processing\"} logger.Info(\"Test {value1}\", new { OrderId = 2, Status = \"Processing\"}); // anonymous object. Result: Test { OrderId = 2, Status = Processing } logger.Info(\"Test {@value1}\", new { OrderId = 2, Status = \"Processing\"}); // anonymous object. Result: Test {\"OrderId\":2, \"Status\":\"Processing\"} Output captured properties When formatting the log message, then it will automatically serialize the parameters (see Formatting of the message ). It is also possible to configure NLog Layout to serialize the individual properties. This can be done by using ${event-properties} or ${all-event-properties} , for example: <target xsi:type=\"File\" name=\"jsonFile\" fileName=\"c:\\temp\\nlog-json-${shortdate}.log\"> <layout>${longdate}|${level}|${logger}|${message}|${all-event-properties}{exception:format=tostring}</layout> </target> NLog Layouts with option includeEventProperties=\"true\" (Before NLog 5.0 it was includeAllProperties=\"true\" ) will output captured properties from structured logging: Json Layout Log4JXml Layout Xml Layout It can be configured like this: <target xsi:type=\"File\" name=\"jsonFile\" fileName=\"c:\\temp\\nlog-json-${shortdate}.log\"> <layout xsi:type=\"JsonLayout\" includeEventProperties=\"true\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level:upperCase=true}\"/> <attribute name=\"message\" layout=\"${message}\" /> </layout> </target> NLog 4.5 adds support for rendering the raw message-template, instead of just the formatted message: * ${message:raw=true} NLog 4.5 extends the following NLog LayoutRenderers with support for serializing with property reflection into JSON when format=\"@\" ${event-properties} ${exception} ${gdc} - Global Context ${scopeproperty} - Thread Context (Before NLog 5.0 it was ${mdc} + ${mdlc} ) In code you can use LogEventInfo.Properties . If having special interest in format-options for the captured parameters then one can use LogEventInfo.MessageTemplateParameters NLog Target Support Any NLog destination target that handles event-properties will be able to take advantage of structured logging. Many targets already has support for the option includeEventProperties=\"true\" , that comes automatically when inheriting from TargetWithContext . NLog Targets with supports for NLog Layout as payload will automatically support structured logging: NLogViewer Target makes use of Log4JXml Layout . WebService Target can perform JSON-post with Json Layout . Network Target can publish both Json Layout and Xml Layout to any TCP/UDP-endpoint. Database Target can write to an XML column using Xml Layout There are already many custom NLog targets that provide the ability to store log-events in central storage, and allow a Web-Application to query the log-events along with their event-properties. These targets will automatically benefit from structured logging, and allow the Web-Application to perform effective queries. Transform captured properties Extract single property NLog 4.6.3 allows you to navigate into a complex object and extract a single property. Ex: logger.Debug(\"{shopitem} added to basket by {user}\", new { Id=6, Name = \"Jacket\", Color = \"Orange\" }, \"Kenny\"); Then one can extract specific details from shopItem -property: <layout xsi:type=\"JsonLayout\"> <attribute name=\"shopitemId\" layout=\"${event-properties:shopitem:objectPath=Id}\" /> </layout> Customize Object Reflection To avoid object reflection for a custom type, then just implement the IFormattable -interface, and NLog will call ToString() instead of doing reflection of properties. NLog 4.7 allows you to transform large (or dangerous) objects into a more reduced/safe object: LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<System.Net.WebException>(ex => new { Type = ex.GetType().ToString(), Message = ex.Message, StackTrace = ex.StackTrace, Source = ex.Source, InnerException = ex.InnerException, Status = ex.Status, Response = ex.Response.ToString(), // Call your custom method to render stream as string }) ); This can also be used to output object-fields, as the NLog Object Reflection only sees object-properties. By transforming into an Anonymous Type, and assigning the wanted object-fields to named properties. If more dynamic reflection is required, then one can also just return a Dictionary<string, object> instead of returning an Anonymous Type (The performance hit is a little higher). Note when making an override for an object-type, then the returned object-type must be of a different object-type. Because NLog caches the reflection of the return object-type, and afterwards NLog skips checking for transformation for already cached object-types. Advanced How to override parameter value formatter Create a new class that NLog.IValueFormatter and set NLog.Config.ConfigurationItemFactory.Default.ValueFormatter How to override JSON formatter You can override the builtin NLog JSON converter with a different implementation. You need a custom NLog.IJsonConverter and set NLog.Config.ConfigurationItemFactory.Default.JsonConverter Example of using JSON.NET that supports JSON.NET object annotations like [JsonIgnore] : internal class JsonNetSerializer : NLog.IJsonConverter { readonly JsonSerializerSettings _settings; public JsonNetSerializer() { _settings = new JsonSerializerSettings { Formatting = Formatting.Indented, ReferenceLoopHandling = ReferenceLoopHandling.Ignore }; } /// <summary>Serialization of an object into JSON format.</summary> /// <param name=\"value\">The object to serialize to JSON.</param> /// <param name=\"builder\">Output destination.</param> /// <returns>Serialize succeeded (true/false)</returns> public bool SerializeObject(object value, StringBuilder builder) { try { var jsonSerializer = JsonSerializer.CreateDefault(_settings); var sw = new System.IO.StringWriter(builder, System.Globalization.CultureInfo.InvariantCulture); using (var jsonWriter = new JsonTextWriter(sw)) { jsonWriter.Formatting = jsonSerializer.Formatting; jsonSerializer.Serialize(jsonWriter, value, null); } } catch (Exception e) { NLog.Common.InternalLogger.Error(e, \"Error when custom JSON serialization\"); return false; } return true; } } Combine indexed and structured logging e.g. logging \"Hello {0} with {Message}\" For backward compatibility (and performance), then NLog will by default skip full parsing if it detects the first parameter as being positional index. This will ensure repeated positional-placeholders supported by string.Format will continue to work: string.Format(\"{1}{0}{2}{0}\", Environment.NewLine, \"Hello\", \"World\"); When parseMessageTemplates='true' then NLog will always parse all parameters, and if one is non-numeric, then all the parameters will be treated as structured parameters. Mixing and numeric and structured parameters is not recommended, as it hurts performance (backtrack) and numeric parameters are most of the time not so descriptive. Parameter Names The Names of the parameters should be unique I just need the template e.g. Order {orderId} Use ${message:raw=true} Disabling Structured Logging NLog will by default attempt to parse log-events as structured log-events. This gives a minor overhead, that will not be noticable by most. It is possible to disable this behavior, telling NLog it should not attempt to parse log-events as structured log-events, with this xml-setting: <nlog parseMessageTemplates=\"false\"> ... </nlog>","title":"How to use structured logging"},{"location":"How-to-use-structured-logging/#why-structured-logging","text":"Structured logging makes it easier to store and query log-events, as the logevent message-template and message-parameters are preserved, instead of just transforming them into a formatted message. The normal .NET string.Format(...) will only accept input strings like this: logger.Info(\"Logon by user:{0} from ip_address:{1}\", \"Kenny\", \"127.0.0.1\"); logger.Debug(\"Shopitem:{0} added to basket by user:{1}\", \"Jacket\", \"Kenny\"); When storing these log-events in a database (or somewhere else), then it can be difficult to query all actions performed by a certain user. Also it could be hard to group similar events. The workaround would then be to perform RegEx-queries to recognize logevent messages and convert them into a more structured format, and register which parameter index is the user. The RegEx might even have to extract the needed details from the formatted message, making it even more fragile. Maintaining these RegEx-queries can become rather cumbersome. Further history: messagetemplates.org","title":"Why structured logging"},{"location":"How-to-use-structured-logging/#using-structured-logging","text":"NLog has always supported log-event metadata called event-properties , but it requires a little effort to generate a log-event with properties. See also the Fluent-Logger-API NLog 4.5 makes it a easier to capture and preserve log-event-properties, so they can be easily processed by the NLog destination target: logger.Info(\"Logon by {user} from {ip_address}\", \"Kenny\", \"127.0.0.1\"); // Logon by \"Kenny\" from \"127.0.0.1\" logger.Debug(\"{shopitem} added to basket by {user}\", new { Id=6, Name = \"Jacket\", Color = \"Orange\" }, \"Kenny\"); Any NLog destination target that is able to handle log-event-properties will automatically experience the benefit of doing structured logging.","title":"Using structured logging"},{"location":"How-to-use-structured-logging/#formatting-of-the-message","text":"The formatting of message depends on the datatype of the parameters. Example: logger.Info(\"Order {orderid} created for {user}\", 42, \"Kenny\"); Will be formatted as: Order 42 created for \"Kenny\" The formatting is controlled by the datatype of the parameter: - string: surrounded with double quotes, e.g \"hello\" - number: no quotes - null: printed as NULL - list/ienumerable/array: \"item1\", \"item2\" - dictionary: \"key1\"=\"value1\", \"key2\"=\"value2\" - objects: ToString() It's possible to control formatting by preceding @ or $ : @ will format the object as JSON $ forces ToString()","title":"Formatting of the message"},{"location":"How-to-use-structured-logging/#examples","text":"Object o = null; logger.Info(\"Test {value1}\", o); // null case. Result: Test NULL logger.Info(\"Test {value1}\", new DateTime(2018,03, 25)); // datetime case. Result: Test 25-3-2018 00:00:00 (locale TString) logger.Info(\"Test {value1}\", new List<string> { \"a\", \"b\" }); // list of strings. Result: Test \"a\", \"b\" logger.Info(\"Test {value1}\", new[] { \"a\", \"b\" }); // array. Result: Test \"a\", \"b\" logger.Info(\"Test {value1}\", new Dictionary<string, int> { { \"key1\", 1 }, { \"key2\", 2 } }); // dict. Result: Test \"key1\"=1, \"key2\"=2 var order = new Order { OrderId = 2, Status = OrderStatus.Processing }; logger.Info(\"Test {value1}\", order); // object Result: Test MyProgram.Program+Order logger.Info(\"Test {@value1}\", order); // object Result: Test {\"OrderId\":2, \"Status\":\"Processing\"} logger.Info(\"Test {value1}\", new { OrderId = 2, Status = \"Processing\"}); // anonymous object. Result: Test { OrderId = 2, Status = Processing } logger.Info(\"Test {@value1}\", new { OrderId = 2, Status = \"Processing\"}); // anonymous object. Result: Test {\"OrderId\":2, \"Status\":\"Processing\"}","title":"Examples"},{"location":"How-to-use-structured-logging/#output-captured-properties","text":"When formatting the log message, then it will automatically serialize the parameters (see Formatting of the message ). It is also possible to configure NLog Layout to serialize the individual properties. This can be done by using ${event-properties} or ${all-event-properties} , for example: <target xsi:type=\"File\" name=\"jsonFile\" fileName=\"c:\\temp\\nlog-json-${shortdate}.log\"> <layout>${longdate}|${level}|${logger}|${message}|${all-event-properties}{exception:format=tostring}</layout> </target> NLog Layouts with option includeEventProperties=\"true\" (Before NLog 5.0 it was includeAllProperties=\"true\" ) will output captured properties from structured logging: Json Layout Log4JXml Layout Xml Layout It can be configured like this: <target xsi:type=\"File\" name=\"jsonFile\" fileName=\"c:\\temp\\nlog-json-${shortdate}.log\"> <layout xsi:type=\"JsonLayout\" includeEventProperties=\"true\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level:upperCase=true}\"/> <attribute name=\"message\" layout=\"${message}\" /> </layout> </target> NLog 4.5 adds support for rendering the raw message-template, instead of just the formatted message: * ${message:raw=true} NLog 4.5 extends the following NLog LayoutRenderers with support for serializing with property reflection into JSON when format=\"@\" ${event-properties} ${exception} ${gdc} - Global Context ${scopeproperty} - Thread Context (Before NLog 5.0 it was ${mdc} + ${mdlc} ) In code you can use LogEventInfo.Properties . If having special interest in format-options for the captured parameters then one can use LogEventInfo.MessageTemplateParameters","title":"Output captured properties"},{"location":"How-to-use-structured-logging/#nlog-target-support","text":"Any NLog destination target that handles event-properties will be able to take advantage of structured logging. Many targets already has support for the option includeEventProperties=\"true\" , that comes automatically when inheriting from TargetWithContext . NLog Targets with supports for NLog Layout as payload will automatically support structured logging: NLogViewer Target makes use of Log4JXml Layout . WebService Target can perform JSON-post with Json Layout . Network Target can publish both Json Layout and Xml Layout to any TCP/UDP-endpoint. Database Target can write to an XML column using Xml Layout There are already many custom NLog targets that provide the ability to store log-events in central storage, and allow a Web-Application to query the log-events along with their event-properties. These targets will automatically benefit from structured logging, and allow the Web-Application to perform effective queries.","title":"NLog Target Support"},{"location":"How-to-use-structured-logging/#transform-captured-properties","text":"","title":"Transform captured properties"},{"location":"How-to-use-structured-logging/#extract-single-property","text":"NLog 4.6.3 allows you to navigate into a complex object and extract a single property. Ex: logger.Debug(\"{shopitem} added to basket by {user}\", new { Id=6, Name = \"Jacket\", Color = \"Orange\" }, \"Kenny\"); Then one can extract specific details from shopItem -property: <layout xsi:type=\"JsonLayout\"> <attribute name=\"shopitemId\" layout=\"${event-properties:shopitem:objectPath=Id}\" /> </layout>","title":"Extract single property"},{"location":"How-to-use-structured-logging/#customize-object-reflection","text":"To avoid object reflection for a custom type, then just implement the IFormattable -interface, and NLog will call ToString() instead of doing reflection of properties. NLog 4.7 allows you to transform large (or dangerous) objects into a more reduced/safe object: LogManager.Setup().SetupSerialization(s => s.RegisterObjectTransformation<System.Net.WebException>(ex => new { Type = ex.GetType().ToString(), Message = ex.Message, StackTrace = ex.StackTrace, Source = ex.Source, InnerException = ex.InnerException, Status = ex.Status, Response = ex.Response.ToString(), // Call your custom method to render stream as string }) ); This can also be used to output object-fields, as the NLog Object Reflection only sees object-properties. By transforming into an Anonymous Type, and assigning the wanted object-fields to named properties. If more dynamic reflection is required, then one can also just return a Dictionary<string, object> instead of returning an Anonymous Type (The performance hit is a little higher). Note when making an override for an object-type, then the returned object-type must be of a different object-type. Because NLog caches the reflection of the return object-type, and afterwards NLog skips checking for transformation for already cached object-types.","title":"Customize Object Reflection"},{"location":"How-to-use-structured-logging/#advanced","text":"","title":"Advanced"},{"location":"How-to-use-structured-logging/#how-to-override-parameter-value-formatter","text":"Create a new class that NLog.IValueFormatter and set NLog.Config.ConfigurationItemFactory.Default.ValueFormatter","title":"How to override parameter value formatter"},{"location":"How-to-use-structured-logging/#how-to-override-json-formatter","text":"You can override the builtin NLog JSON converter with a different implementation. You need a custom NLog.IJsonConverter and set NLog.Config.ConfigurationItemFactory.Default.JsonConverter Example of using JSON.NET that supports JSON.NET object annotations like [JsonIgnore] : internal class JsonNetSerializer : NLog.IJsonConverter { readonly JsonSerializerSettings _settings; public JsonNetSerializer() { _settings = new JsonSerializerSettings { Formatting = Formatting.Indented, ReferenceLoopHandling = ReferenceLoopHandling.Ignore }; } /// <summary>Serialization of an object into JSON format.</summary> /// <param name=\"value\">The object to serialize to JSON.</param> /// <param name=\"builder\">Output destination.</param> /// <returns>Serialize succeeded (true/false)</returns> public bool SerializeObject(object value, StringBuilder builder) { try { var jsonSerializer = JsonSerializer.CreateDefault(_settings); var sw = new System.IO.StringWriter(builder, System.Globalization.CultureInfo.InvariantCulture); using (var jsonWriter = new JsonTextWriter(sw)) { jsonWriter.Formatting = jsonSerializer.Formatting; jsonSerializer.Serialize(jsonWriter, value, null); } } catch (Exception e) { NLog.Common.InternalLogger.Error(e, \"Error when custom JSON serialization\"); return false; } return true; } }","title":"How to override JSON formatter"},{"location":"How-to-use-structured-logging/#combine-indexed-and-structured-logging","text":"e.g. logging \"Hello {0} with {Message}\" For backward compatibility (and performance), then NLog will by default skip full parsing if it detects the first parameter as being positional index. This will ensure repeated positional-placeholders supported by string.Format will continue to work: string.Format(\"{1}{0}{2}{0}\", Environment.NewLine, \"Hello\", \"World\"); When parseMessageTemplates='true' then NLog will always parse all parameters, and if one is non-numeric, then all the parameters will be treated as structured parameters. Mixing and numeric and structured parameters is not recommended, as it hurts performance (backtrack) and numeric parameters are most of the time not so descriptive.","title":"Combine indexed and structured logging"},{"location":"How-to-use-structured-logging/#parameter-names","text":"The Names of the parameters should be unique","title":"Parameter Names"},{"location":"How-to-use-structured-logging/#i-just-need-the-template","text":"e.g. Order {orderId} Use ${message:raw=true}","title":"I just need the template"},{"location":"How-to-use-structured-logging/#disabling-structured-logging","text":"NLog will by default attempt to parse log-events as structured log-events. This gives a minor overhead, that will not be noticable by most. It is possible to disable this behavior, telling NLog it should not attempt to parse log-events as structured log-events, with this xml-setting: <nlog parseMessageTemplates=\"false\"> ... </nlog>","title":"Disabling Structured Logging"},{"location":"How-to-write-a-Target/","text":"See extending NLog","title":"How to write a Target"},{"location":"How-to-write-a-custom-async-target/","text":"Introduced with NLog 4.6 It is really easy: Create a class that inherits from NLog.Targets.AsyncTaskTarget Override the WriteAsyncTask(LogEventInfo logEvent, CancellationToken token) method. In the body of this method invoke this.RenderLogEvent(this.Layout, logEvent) to get the message text, and invoke this.GetAllProperties(logEvent) to get structured properties. Example using NLog; using NLog.Config; using NLog.Targets; namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget : AsyncTaskTarget { public MyFirstTarget() { this.IncludeEventProperties = true; // Include LogEvent Properties by default this.Host = \"localhost\"; } [RequiredParameter] public Layout Host { get; set; } protected override Task WriteAsyncTask(LogEventInfo logEvent, CancellationToken token) { string logMessage = this.RenderLogEvent(this.Layout, logEvent); string hostName = this.RenderLogEvent(this.Host, logEvent); IDictionary<string,object> logProperties = this.GetAllProperties(logEvent); return SendTheMessageToRemoteHost(hostName, logMessage, logProperties); } private async Task SendTheMessageToRemoteHost(string hostName, string message, IDictionary<string, object> properties) { // TODO - write me } } } AsyncTaskTarget Features AsyncTaskTarget has an internal queue (Initial capacity is 10000), so if the Tasks constantly performs timeout then at one point the queue will be filled. The OverflowAction will then take over (Default = Discard to avoid eating all memory). Timeout and Retry Logic There are several options: TaskTimeoutSeconds - How many seconds a Task is allowed to run before it is cancelled (Default 150 secs) RetryDelayMilliseconds - How many milliseconds to wait before next retry (Default 500ms, and will be doubled on each retry). RetryCount - How many attempts to retry the same Task, before it is aborted (Default 0) If wanting to have more control of when to retry (Checking the Exception ), or perform connection recovery on failure, then override this method: protected override bool RetryFailedAsyncTask(Exception exception, CancellationToken cancellationToken, int retryCountRemaining, out TimeSpan retryDelay) { return base.RetryFailedAsyncTask(exception, cancellationToken, retryCountRemaining, out retryDelay); // Default behavior } Batch Logic Activated when overriding this method: protected override Task WriteAsyncTask(IList<LogEventInfo> logEvents, CancellationToken cancellationToken) { // TODO - write batch } There are several options: - BatchSize - Gets or sets the number of log events that should be processed in a batch by the lazy writer thread. (Default 1) - TaskDelayMilliseconds - How many milliseconds to delay the actual write operation to optimize for batching (Default 1 ms) - QueueLimit - Gets or sets the limit on the number of requests in the lazy writer thread request queue (Default 10000) - OverflowAction - Gets or sets the action to be taken when the lazy writer thread request queue count exceeds the set limit (Default Discard). TargetWithContext Features AsyncTaskTarget inherits the TargetWithContext features , that allows one to configure additional context properties for extended structured logging capabilities. <target type=\"MyFirst\" name=\"first\" includeEventProperties=\"true\"> <contextproperty name=\"MachineName\" layout=\"${machinename}\" /> <contextproperty name=\"ThreadId\" layout=\"${threadid}\" /> </target> The structured properties can be retrieved inside WriteAsyncTask -method by calling this.GetAllProperties(logEvent) .","title":"How to write a custom async target"},{"location":"How-to-write-a-custom-async-target/#example","text":"using NLog; using NLog.Config; using NLog.Targets; namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget : AsyncTaskTarget { public MyFirstTarget() { this.IncludeEventProperties = true; // Include LogEvent Properties by default this.Host = \"localhost\"; } [RequiredParameter] public Layout Host { get; set; } protected override Task WriteAsyncTask(LogEventInfo logEvent, CancellationToken token) { string logMessage = this.RenderLogEvent(this.Layout, logEvent); string hostName = this.RenderLogEvent(this.Host, logEvent); IDictionary<string,object> logProperties = this.GetAllProperties(logEvent); return SendTheMessageToRemoteHost(hostName, logMessage, logProperties); } private async Task SendTheMessageToRemoteHost(string hostName, string message, IDictionary<string, object> properties) { // TODO - write me } } }","title":"Example"},{"location":"How-to-write-a-custom-async-target/#asynctasktarget-features","text":"AsyncTaskTarget has an internal queue (Initial capacity is 10000), so if the Tasks constantly performs timeout then at one point the queue will be filled. The OverflowAction will then take over (Default = Discard to avoid eating all memory).","title":"AsyncTaskTarget Features"},{"location":"How-to-write-a-custom-async-target/#timeout-and-retry-logic","text":"There are several options: TaskTimeoutSeconds - How many seconds a Task is allowed to run before it is cancelled (Default 150 secs) RetryDelayMilliseconds - How many milliseconds to wait before next retry (Default 500ms, and will be doubled on each retry). RetryCount - How many attempts to retry the same Task, before it is aborted (Default 0) If wanting to have more control of when to retry (Checking the Exception ), or perform connection recovery on failure, then override this method: protected override bool RetryFailedAsyncTask(Exception exception, CancellationToken cancellationToken, int retryCountRemaining, out TimeSpan retryDelay) { return base.RetryFailedAsyncTask(exception, cancellationToken, retryCountRemaining, out retryDelay); // Default behavior }","title":"Timeout and Retry Logic"},{"location":"How-to-write-a-custom-async-target/#batch-logic","text":"Activated when overriding this method: protected override Task WriteAsyncTask(IList<LogEventInfo> logEvents, CancellationToken cancellationToken) { // TODO - write batch } There are several options: - BatchSize - Gets or sets the number of log events that should be processed in a batch by the lazy writer thread. (Default 1) - TaskDelayMilliseconds - How many milliseconds to delay the actual write operation to optimize for batching (Default 1 ms) - QueueLimit - Gets or sets the limit on the number of requests in the lazy writer thread request queue (Default 10000) - OverflowAction - Gets or sets the action to be taken when the lazy writer thread request queue count exceeds the set limit (Default Discard).","title":"Batch Logic"},{"location":"How-to-write-a-custom-async-target/#targetwithcontext-features","text":"AsyncTaskTarget inherits the TargetWithContext features , that allows one to configure additional context properties for extended structured logging capabilities. <target type=\"MyFirst\" name=\"first\" includeEventProperties=\"true\"> <contextproperty name=\"MachineName\" layout=\"${machinename}\" /> <contextproperty name=\"ThreadId\" layout=\"${threadid}\" /> </target> The structured properties can be retrieved inside WriteAsyncTask -method by calling this.GetAllProperties(logEvent) .","title":"TargetWithContext Features"},{"location":"How-to-write-a-custom-layout-renderer/","text":"Since NLog 4.4 there are two ways to create a custom layout renderer. You could write a custom layout with one lambda function - it will be registered intermediately, or you could write a class which can be reused across projects along with configuration options. Lambda Function Introduced in NLog 4.4 For simple cases, you could create a layout renderer with a lambda. The lambda function will accept 1 or 2 parameters and should return a string . 1 parameter: the logEventInfo . 2 parameters: logEventInfo and the current NLog config. Examples //register ${text-fixed} LayoutRenderer.Register(\"text-fixed\", (logEvent) => \"2\"); //register ${trace-identifier} LayoutRenderer.Register(\"trace-identifier\", (logEvent) => HttpContext.Current.TraceIdentifier); //Using logEventInfo, ${message-length} LayoutRenderer.Register(\"message-length\", (logEvent) => logEvent.FormattedMessage.Length); //Using config, ${targetCount} LayoutRenderer.Register(\"targetCount\",(logEvent, config) => config.AllTargets.Count); Fluent setup NLog 4.7 introduces a fluent registration API using LogManager.Setup() NLog.LogManager.Setup().SetupExtensions(s => s.RegisterLayoutRenderer(\"trace_id\", (logevent) => CorrelationIdentifier.TraceId.ToString()) ); ASP.NET HttpContext Need the HTTP-context (e.g. Request, Session etc) for ASP.NET or ASP.NET Core? Include the NLog.Web (ASP.NET Classic) or NLog.Web.AspNetCore nuget-package. And usage: using NLog.Web.LayoutRenderers; AspNetLayoutRendererBase.Register(\"SessionItem1\", (logEventInfo, httpContext, loggingConfiguration) => httpContext.Session[\"SessionItem\"]); // usage ${SessionItem1} Class Create a class that inherits from NLog.LayoutRenderers.LayoutRenderer , set the [LayoutRenderer(\"your-name\")] on the class and override the Append(StringBuilder builder, LogEventInfo logEvent) method. Invoke in this method builder.Append(..) to render your custom layout renderer. Don't forget to Register-your-custom-component ! Example We create a ${hello-world} layout renderer, which renders...\"hello world!\". [LayoutRenderer(\"hello-world\")] public class HelloWorldLayoutRenderer : LayoutRenderer { protected override void Append(StringBuilder builder, LogEventInfo logEvent) { builder.Append(\"hello world!\"); } } How to pass configuration options to the layout render? Just create public properties on the Layout Renderer. The properties could be decorated with the [RequiredParameter] and [DefaultParameter] attributes. The [DefaultParameter] can be passed to the layout renderer without using the name. for example: [LayoutRenderer(\"hello-world\")] public class HelloWorldLayoutRenderer : LayoutRenderer { /// <summary> /// I'm not required or default /// </summary> public bool OtherOption { get; set; } /// <summary> /// I'm required, and will fail to initialize when not specified /// </summary> [RequiredParameter] public string RequiredOption { get; set; } /// <summary> /// I'm the default parameter, and can be assigned without specifying option-name /// </summary> [DefaultParameter] public string DefaultPlanet { get; set; } Example usages ${hello-world} - raises exception: required parameter RequiredOption isn't set ${hello-world:RequiredOption=abc} - OK, RequiredOption property set ${hello-world:Earth:RequiredOption=abc} - Default parameter DefaultPlanet set to Earth ${hello-world:Earth:RequiredOption=abc:OtherOption=true} - All 3 properties set How to optimize performance for the layout renderer NLog will automatically capture relevant context state, when using AsyncWrapper-target to perform actual writing on background-thread (to avoid logging objects after they have been disposed). The following class-attributes can used for the LayoutRenderer that enables additional performance: [ThreadAgnostic] LayoutRenderer does not capture state from the application-thread logging. Ex. ${threadid} cannot be [ThreadAgnostic] . For LayoutRenderer marked as [ThreadAgnostic] then NLog can skip the overhead of capturing state. If just a single LayoutRenderer in a Layout is not marked as [ThreadAgnostic] , then NLog introduces the overhead of state capture. [ThreadSafe] Introduced with NLog 4.5.3, and made obsolete with NLog 5.0 that expects all to be threadsafe. LayoutRenderer will render correct output regardless of the number of application-threads running inside. For LayoutRenderer marked as [ThreadSafe] then NLog will skip using \"global\" locks when capturing state, thus application-threads will not experience lock-congestion inside NLog. If just a single LayoutRenderer in a Layout is not marked as [ThreadSafe] , then NLog introduces the overhead of \"global\" lock when doing state capture. Example of class-attributes for LayoutRenderer: using NLog.Config; [LayoutRenderer(\"hello-world\")] [ThreadAgnostic] public class HelloWorldLayoutRenderer : LayoutRenderer { protected override void Append(StringBuilder builder, LogEventInfo logEvent) { builder.Append(\"hello world!\"); } } Multiple type-alias attributes NLog 5.0 enables you to have multiple type-aliases for a single class. Before one had to inherit from the same class to provide additional type-names. [LayoutRenderer(\"hello-world\")] // ${hello-world} [LayoutRenderer(\"hello-earth\")] // ${hello-earth} public class HelloWorldLayoutRenderer : LayoutRenderer { The type-alias can then be used when wanting to use the LayoutRenderer in NLog SimpleLayout. Notice NLog 5.0 automatically ignores dashes - in type-alias, so no extra alias is needed for this: Ex. ${helloworld}","title":"How to write a custom layout renderer"},{"location":"How-to-write-a-custom-layout-renderer/#lambda-function","text":"Introduced in NLog 4.4 For simple cases, you could create a layout renderer with a lambda. The lambda function will accept 1 or 2 parameters and should return a string . 1 parameter: the logEventInfo . 2 parameters: logEventInfo and the current NLog config. Examples //register ${text-fixed} LayoutRenderer.Register(\"text-fixed\", (logEvent) => \"2\"); //register ${trace-identifier} LayoutRenderer.Register(\"trace-identifier\", (logEvent) => HttpContext.Current.TraceIdentifier); //Using logEventInfo, ${message-length} LayoutRenderer.Register(\"message-length\", (logEvent) => logEvent.FormattedMessage.Length); //Using config, ${targetCount} LayoutRenderer.Register(\"targetCount\",(logEvent, config) => config.AllTargets.Count);","title":"Lambda Function"},{"location":"How-to-write-a-custom-layout-renderer/#fluent-setup","text":"NLog 4.7 introduces a fluent registration API using LogManager.Setup() NLog.LogManager.Setup().SetupExtensions(s => s.RegisterLayoutRenderer(\"trace_id\", (logevent) => CorrelationIdentifier.TraceId.ToString()) );","title":"Fluent setup"},{"location":"How-to-write-a-custom-layout-renderer/#aspnet-httpcontext","text":"Need the HTTP-context (e.g. Request, Session etc) for ASP.NET or ASP.NET Core? Include the NLog.Web (ASP.NET Classic) or NLog.Web.AspNetCore nuget-package. And usage: using NLog.Web.LayoutRenderers; AspNetLayoutRendererBase.Register(\"SessionItem1\", (logEventInfo, httpContext, loggingConfiguration) => httpContext.Session[\"SessionItem\"]); // usage ${SessionItem1}","title":"ASP.NET HttpContext"},{"location":"How-to-write-a-custom-layout-renderer/#class","text":"Create a class that inherits from NLog.LayoutRenderers.LayoutRenderer , set the [LayoutRenderer(\"your-name\")] on the class and override the Append(StringBuilder builder, LogEventInfo logEvent) method. Invoke in this method builder.Append(..) to render your custom layout renderer. Don't forget to Register-your-custom-component !","title":"Class"},{"location":"How-to-write-a-custom-layout-renderer/#example","text":"We create a ${hello-world} layout renderer, which renders...\"hello world!\". [LayoutRenderer(\"hello-world\")] public class HelloWorldLayoutRenderer : LayoutRenderer { protected override void Append(StringBuilder builder, LogEventInfo logEvent) { builder.Append(\"hello world!\"); } }","title":"Example"},{"location":"How-to-write-a-custom-layout-renderer/#how-to-pass-configuration-options-to-the-layout-render","text":"Just create public properties on the Layout Renderer. The properties could be decorated with the [RequiredParameter] and [DefaultParameter] attributes. The [DefaultParameter] can be passed to the layout renderer without using the name. for example: [LayoutRenderer(\"hello-world\")] public class HelloWorldLayoutRenderer : LayoutRenderer { /// <summary> /// I'm not required or default /// </summary> public bool OtherOption { get; set; } /// <summary> /// I'm required, and will fail to initialize when not specified /// </summary> [RequiredParameter] public string RequiredOption { get; set; } /// <summary> /// I'm the default parameter, and can be assigned without specifying option-name /// </summary> [DefaultParameter] public string DefaultPlanet { get; set; } Example usages ${hello-world} - raises exception: required parameter RequiredOption isn't set ${hello-world:RequiredOption=abc} - OK, RequiredOption property set ${hello-world:Earth:RequiredOption=abc} - Default parameter DefaultPlanet set to Earth ${hello-world:Earth:RequiredOption=abc:OtherOption=true} - All 3 properties set","title":"How to pass configuration options to the layout render?"},{"location":"How-to-write-a-custom-layout-renderer/#how-to-optimize-performance-for-the-layout-renderer","text":"NLog will automatically capture relevant context state, when using AsyncWrapper-target to perform actual writing on background-thread (to avoid logging objects after they have been disposed). The following class-attributes can used for the LayoutRenderer that enables additional performance: [ThreadAgnostic] LayoutRenderer does not capture state from the application-thread logging. Ex. ${threadid} cannot be [ThreadAgnostic] . For LayoutRenderer marked as [ThreadAgnostic] then NLog can skip the overhead of capturing state. If just a single LayoutRenderer in a Layout is not marked as [ThreadAgnostic] , then NLog introduces the overhead of state capture. [ThreadSafe] Introduced with NLog 4.5.3, and made obsolete with NLog 5.0 that expects all to be threadsafe. LayoutRenderer will render correct output regardless of the number of application-threads running inside. For LayoutRenderer marked as [ThreadSafe] then NLog will skip using \"global\" locks when capturing state, thus application-threads will not experience lock-congestion inside NLog. If just a single LayoutRenderer in a Layout is not marked as [ThreadSafe] , then NLog introduces the overhead of \"global\" lock when doing state capture. Example of class-attributes for LayoutRenderer: using NLog.Config; [LayoutRenderer(\"hello-world\")] [ThreadAgnostic] public class HelloWorldLayoutRenderer : LayoutRenderer { protected override void Append(StringBuilder builder, LogEventInfo logEvent) { builder.Append(\"hello world!\"); } }","title":"How to optimize performance for the layout renderer"},{"location":"How-to-write-a-custom-layout-renderer/#multiple-type-alias-attributes","text":"NLog 5.0 enables you to have multiple type-aliases for a single class. Before one had to inherit from the same class to provide additional type-names. [LayoutRenderer(\"hello-world\")] // ${hello-world} [LayoutRenderer(\"hello-earth\")] // ${hello-earth} public class HelloWorldLayoutRenderer : LayoutRenderer { The type-alias can then be used when wanting to use the LayoutRenderer in NLog SimpleLayout. Notice NLog 5.0 automatically ignores dashes - in type-alias, so no extra alias is needed for this: Ex. ${helloworld}","title":"Multiple type-alias attributes"},{"location":"How-to-write-a-custom-target-for-structured-logging/","text":"Introduced with NLog 4.5 It is really easy: Create a class that inherits from NLog.Targets.TargetWithContext Override the Write(LogEventInfo logEvent) method. In the body of this method invoke this.RenderLogEvent(this.Layout, logEvent) to get the message text, and invoke this.GetAllProperties(logEvent) to get structured properties. See also the updated How to write a custom async target Example using NLog; using NLog.Config; using NLog.Targets; namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget : TargetWithContext { public MyFirstTarget() { this.IncludeEventProperties = true; // Include LogEvent Properties by default this.Host = \"localhost\"; } [RequiredParameter] public Layout Host { get; set; } protected override void Write(LogEventInfo logEvent) { string logMessage = this.RenderLogEvent(this.Layout, logEvent); string hostName = this.RenderLogEvent(this.Host, logEvent); IDictionary<string,object> logProperties = this.GetAllProperties(logEvent); SendTheMessageToRemoteHost(hostName, logMessage, logProperties); } private void SendTheMessageToRemoteHost(string hostName, string message, IDictionary<string, object> properties) { // TODO - write me } } } TargetWithContext Features Additional Context Properties Users can easily configure additional context information: <target type=\"MyFirst\" name=\"first\"> <contextproperty name=\"MachineName\" layout=\"${machinename}\" /> <contextproperty name=\"ThreadId\" layout=\"${threadid}\" /> </target> Without needing to inject the details upfront when doing the logging. It is automatically captured by the NLog engine. Include ScopeContext ScopeContext Properties can be used to provide context-specific details (Ex. request-correlationid from ILogger.BeginScope ). To automatically capture properties injected into ScopeContext (Before NLog 5.0 it was called IncludeMDLC ) <target type=\"MyFirst\" name=\"first\" includeScopeProperties=\"true\"> ... </target>","title":"How to write a custom target for structured logging"},{"location":"How-to-write-a-custom-target-for-structured-logging/#example","text":"using NLog; using NLog.Config; using NLog.Targets; namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget : TargetWithContext { public MyFirstTarget() { this.IncludeEventProperties = true; // Include LogEvent Properties by default this.Host = \"localhost\"; } [RequiredParameter] public Layout Host { get; set; } protected override void Write(LogEventInfo logEvent) { string logMessage = this.RenderLogEvent(this.Layout, logEvent); string hostName = this.RenderLogEvent(this.Host, logEvent); IDictionary<string,object> logProperties = this.GetAllProperties(logEvent); SendTheMessageToRemoteHost(hostName, logMessage, logProperties); } private void SendTheMessageToRemoteHost(string hostName, string message, IDictionary<string, object> properties) { // TODO - write me } } }","title":"Example"},{"location":"How-to-write-a-custom-target-for-structured-logging/#targetwithcontext-features","text":"","title":"TargetWithContext Features"},{"location":"How-to-write-a-custom-target-for-structured-logging/#additional-context-properties","text":"Users can easily configure additional context information: <target type=\"MyFirst\" name=\"first\"> <contextproperty name=\"MachineName\" layout=\"${machinename}\" /> <contextproperty name=\"ThreadId\" layout=\"${threadid}\" /> </target> Without needing to inject the details upfront when doing the logging. It is automatically captured by the NLog engine.","title":"Additional Context Properties"},{"location":"How-to-write-a-custom-target-for-structured-logging/#include-scopecontext","text":"ScopeContext Properties can be used to provide context-specific details (Ex. request-correlationid from ILogger.BeginScope ). To automatically capture properties injected into ScopeContext (Before NLog 5.0 it was called IncludeMDLC ) <target type=\"MyFirst\" name=\"first\" includeScopeProperties=\"true\"> ... </target>","title":"Include ScopeContext"},{"location":"How-to-write-a-custom-target/","text":"It\u2019s really easy: Create a class that inherits from NLog.Targets.TargetWithLayout Override the Write() method. In the body of the method invoke this.Layout.Render() to get the message text, then send the text to the destination media. Don't forget to register your custom target ! See also the updated How to write a custom target for structured logging See also the updated How to write a custom async target Example This is a skeleton target that writes messages to the specified host: using NLog; using NLog.Config; using NLog.Targets; namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget: TargetWithLayout { public MyFirstTarget() { this.Host = \"localhost\"; } [RequiredParameter] public string Host { get; set; } protected override void Write(LogEventInfo logEvent) { string logMessage = RenderLogEvent(this.Layout, logEvent); string hostName = RenderLogEvent(this.Host, logEvent); SendTheMessageToRemoteHost(hostName, logMessage); } private void SendTheMessageToRemoteHost(string hostName, string message) { // TODO - write me } } } How to pass configuration options to the target? In the example above then one can see how the Host -property is used. Having a public property that sets the required configuration parameters is enough for NLog to use it. Each attribute that you put in the <target /> definition gets passed to the appropriate public property. NLog takes care of the appropriate conversions necessary so that you can use integer, string, datetime, boolean parameters. Check also Properties-constraints-for-custom-extensions It is recommended to use NLog Layouts or NLog Layout<T> for NLog Target Configuration options, as it will allow users to provide configuration-values from NLog LayoutRenderers (Ex. from appsettings.json , app.config or environment-variables) How to handle object lifetime When needing to create interfaces to external framework or start background-threads, then it is recommended to override InitializeTarget and close/release resources again in CloseTarget . namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget: TargetWithLayout { protected override void InitializeTarget() { base.InitializeTarget(); // TODO Custom Init Logic } protected override void CloseTarget() { // TODO Custom Close Logic base.CloseTarget(); } } } It is possible for the same target object to be initialized and closed many times during the lifetime of the application. It is recommended not to use the constructor to start background-threads or initialize interfaces, but merely focus on setting up initial state without starting anything. It is possible to override the Dispose-method, but this method will only be called at the end of application-lifetime. Multiple type-alias attributes NLog 5.0 enables you to have multiple type-aliases for a single class. Before one had to inherit from the same class to provide additional type-aliases. [Target(\"MyFirst\")] [Target(\"MyInitial\")] public sealed class MyFirstTarget: TargetWithLayout { The type-alias can then be used when wanting to use the target in the NLog Configuration File. Ex. <target type=\"MyFirst\" name=\"...\" /> Notice NLog 5.0 automatically ignores dashes - in type-aliases, so no extra alias is needed for this: Ex. <target type=\"My-First\" name=\"...\" />","title":"How to write a custom target"},{"location":"How-to-write-a-custom-target/#example","text":"This is a skeleton target that writes messages to the specified host: using NLog; using NLog.Config; using NLog.Targets; namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget: TargetWithLayout { public MyFirstTarget() { this.Host = \"localhost\"; } [RequiredParameter] public string Host { get; set; } protected override void Write(LogEventInfo logEvent) { string logMessage = RenderLogEvent(this.Layout, logEvent); string hostName = RenderLogEvent(this.Host, logEvent); SendTheMessageToRemoteHost(hostName, logMessage); } private void SendTheMessageToRemoteHost(string hostName, string message) { // TODO - write me } } }","title":"Example"},{"location":"How-to-write-a-custom-target/#how-to-pass-configuration-options-to-the-target","text":"In the example above then one can see how the Host -property is used. Having a public property that sets the required configuration parameters is enough for NLog to use it. Each attribute that you put in the <target /> definition gets passed to the appropriate public property. NLog takes care of the appropriate conversions necessary so that you can use integer, string, datetime, boolean parameters. Check also Properties-constraints-for-custom-extensions It is recommended to use NLog Layouts or NLog Layout<T> for NLog Target Configuration options, as it will allow users to provide configuration-values from NLog LayoutRenderers (Ex. from appsettings.json , app.config or environment-variables)","title":"How to pass configuration options to the target?"},{"location":"How-to-write-a-custom-target/#how-to-handle-object-lifetime","text":"When needing to create interfaces to external framework or start background-threads, then it is recommended to override InitializeTarget and close/release resources again in CloseTarget . namespace MyNamespace { [Target(\"MyFirst\")] public sealed class MyFirstTarget: TargetWithLayout { protected override void InitializeTarget() { base.InitializeTarget(); // TODO Custom Init Logic } protected override void CloseTarget() { // TODO Custom Close Logic base.CloseTarget(); } } } It is possible for the same target object to be initialized and closed many times during the lifetime of the application. It is recommended not to use the constructor to start background-threads or initialize interfaces, but merely focus on setting up initial state without starting anything. It is possible to override the Dispose-method, but this method will only be called at the end of application-lifetime.","title":"How to handle object lifetime"},{"location":"How-to-write-a-custom-target/#multiple-type-alias-attributes","text":"NLog 5.0 enables you to have multiple type-aliases for a single class. Before one had to inherit from the same class to provide additional type-aliases. [Target(\"MyFirst\")] [Target(\"MyInitial\")] public sealed class MyFirstTarget: TargetWithLayout { The type-alias can then be used when wanting to use the target in the NLog Configuration File. Ex. <target type=\"MyFirst\" name=\"...\" /> Notice NLog 5.0 automatically ignores dashes - in type-aliases, so no extra alias is needed for this: Ex. <target type=\"My-First\" name=\"...\" />","title":"Multiple type-alias attributes"},{"location":"IIS-site-name-Layout-Renderer/","text":"IIS site name - printing HostingEnvironment.SiteName Platforms Supported: All (Supported in AspNet and AspNetCore ) Configuration Syntax ${iis-site-name}","title":"IIS site name Layout Renderer"},{"location":"IIS-site-name-Layout-Renderer/#configuration-syntax","text":"${iis-site-name}","title":"Configuration Syntax"},{"location":"Identity-layout-renderer/","text":"Thread identity information (name and authentication information). Platforms Supported: Limited (Not supported on NetStandard1.3+1.5) Configuration Syntax ${identity:authType=Boolean:separator=String:name=Boolean :isAuthenticated=Boolean} Parameters Rendering Options authType - Indicates whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.Boolean Default: True separator - Separator to be used when concatenating parts of identity information. Default: : name - Indicates whether to render Thread.CurrentPrincipal.Identity.Name.Boolean Default: True isAuthenticated - Indicates whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.Boolean Default: True Notes ${environment-user} is an alternative that depends on Environment.UserName , which is compatible with both Windows/Linux (and less overhead). ${windows-identity} is an alternative that depends on WindowsIdentity.Getcurrent() ${aspnet-user-identity} is an alternative that only works on ASP.NET Applications with identity enabled. Note .NET Core 3 Set AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.UnauthenticatedPrincipal) in the Main method of your application, otherwise this renderer could render empty unexpectedly. ( Read more )","title":"Identity layout renderer"},{"location":"Identity-layout-renderer/#configuration-syntax","text":"${identity:authType=Boolean:separator=String:name=Boolean :isAuthenticated=Boolean}","title":"Configuration Syntax"},{"location":"Identity-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Identity-layout-renderer/#rendering-options","text":"authType - Indicates whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.Boolean Default: True separator - Separator to be used when concatenating parts of identity information. Default: : name - Indicates whether to render Thread.CurrentPrincipal.Identity.Name.Boolean Default: True isAuthenticated - Indicates whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.Boolean Default: True","title":"Rendering Options"},{"location":"Identity-layout-renderer/#notes","text":"${environment-user} is an alternative that depends on Environment.UserName , which is compatible with both Windows/Linux (and less overhead). ${windows-identity} is an alternative that depends on WindowsIdentity.Getcurrent() ${aspnet-user-identity} is an alternative that only works on ASP.NET Applications with identity enabled.","title":"Notes"},{"location":"Identity-layout-renderer/#note-net-core-3","text":"Set AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.UnauthenticatedPrincipal) in the Main method of your application, otherwise this renderer could render empty unexpectedly. ( Read more )","title":"Note .NET Core 3"},{"location":"ImpersonatingWrapper-target/","text":"Impersonates another user for the duration of the write. Platforms Supported: All - Requires nuget-package NLog.WindowsIdentity with NLog 5.0 Configuration Syntax <targets> <target xsi:type=\"ImpersonatingWrapper\" name=\"String\" userName=\"String\" password=\"String\" revertToSelf=\"Boolean\" impersonationLevel=\"Enum\" domain=\"String\" logOnType=\"Enum\" logOnProvider=\"Enum\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Impersonation Options userName - Username to change context to. password - User account password. revertToSelf - Indicates whether to revert to the credentials of the process instead of impersonating another user. Boolean Default: False impersonationLevel - Required impersonation level. Possible values: Anonymous - Anonymous Level. Delegation - Delegation Level. Identification - Identification Level. Impersonation - Impersonation Level. domain - Windows domain name to change context to. Default: . logOnType - Logon Type. Possible values: Batch - Batch Logon. Interactive - Interactive Logon. Network - Network Logon. NetworkClearText - Network Clear Text Logon. NewCredentials - New Network Credentials. Service - Logon as a Service. logOnProvider - Type of the logon provider. Possible values: Default - Use the standard logon provider for the system.","title":"ImpersonatingWrapper target"},{"location":"ImpersonatingWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"ImpersonatingWrapper\" name=\"String\" userName=\"String\" password=\"String\" revertToSelf=\"Boolean\" impersonationLevel=\"Enum\" domain=\"String\" logOnType=\"Enum\" logOnProvider=\"Enum\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"ImpersonatingWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"ImpersonatingWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"ImpersonatingWrapper-target/#impersonation-options","text":"userName - Username to change context to. password - User account password. revertToSelf - Indicates whether to revert to the credentials of the process instead of impersonating another user. Boolean Default: False impersonationLevel - Required impersonation level. Possible values: Anonymous - Anonymous Level. Delegation - Delegation Level. Identification - Identification Level. Impersonation - Impersonation Level. domain - Windows domain name to change context to. Default: . logOnType - Logon Type. Possible values: Batch - Batch Logon. Interactive - Interactive Logon. Network - Network Logon. NetworkClearText - Network Clear Text Logon. NewCredentials - New Network Credentials. Service - Logon as a Service. logOnProvider - Type of the logon provider. Possible values: Default - Use the standard logon provider for the system.","title":"Impersonation Options"},{"location":"InstallContext-layout-renderer/","text":"Installation parameter (passed to InstallNLogConfig). Platforms Supported: All Configuration Syntax ${install-context:parameter=String} Parameters Rendering Options parameter - Name of the parameter. Required","title":"InstallContext layout renderer"},{"location":"InstallContext-layout-renderer/#configuration-syntax","text":"${install-context:parameter=String}","title":"Configuration Syntax"},{"location":"InstallContext-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"InstallContext-layout-renderer/#rendering-options","text":"parameter - Name of the parameter. Required","title":"Rendering Options"},{"location":"Installing-targets/","text":"Some targets support installing. Current the following targets support installing Database target EventLogger target PerformanceCounter target Install Install all targets used in the config: LogManager.Configuration.Install(new InstallationContext()); Uninstall Uninstall all targets used in the config: LogManager.Configuration.Uninstall(new InstallationContext()); Example install database target <target xsi:type=\"Database\" name=\"db\" connectionStringName=\"LoggingDatabase\"> <install-command> <text> <!-- NOTE: call LogManager.Configuration.Install(new InstallationContext()); to execute this query. --> CREATE TABLE ${var:logTableName} ( Id bigint primary key not null identity(1,1), Logged datetime2, Level nvarchar(10), LogMessage nvarchar(max), MessageUid uniqueidentifier, MessagePartUid uniqueidentifier, MessagePartDataUid uniqueidentifier, ) </text> <ignoreFailures>false</ignoreFailures> </install-command> Troubleshooting installation issues Installation log You can enable the installation log by overriding the default output stream in your InstallationContext . For example, to have the installation log printed out to console, you can use: LogManager.Configuration.Install(new InstallationContext(Console.Out)); You can also redirect the installation log to a string in memory: var stringWriter = new StringWriter(); LogManager.Configuration.Install(new InstallationContext(stringWriter)); var installationLog = stringWriter.ToString(); // retrieve the installation output Note that the log output can also be accessed via InstallationContext.LogOutput : // This is equivalent to the previous example var installationContext = new InstallationContext(new StringWriter()) LogManager.Configuration.Install(installationContext); var installationLog = installationContext.LogOutput.ToString(); A note on exceptions Except for application critical exceptions (OutOfMemoryException. StackOverflowException and ThreadAbortException), LogManager.Configuration.Install() will not rethrow any other exception, even when NLog is Logging-troubleshooting#troubleshooting-steps . You can set up NLog to use a FallbackGroup-target if your primary target (for instance a log database) fails.","title":"Installing targets"},{"location":"Installing-targets/#install","text":"Install all targets used in the config: LogManager.Configuration.Install(new InstallationContext());","title":"Install"},{"location":"Installing-targets/#uninstall","text":"Uninstall all targets used in the config: LogManager.Configuration.Uninstall(new InstallationContext());","title":"Uninstall"},{"location":"Installing-targets/#example-install-database-target","text":"<target xsi:type=\"Database\" name=\"db\" connectionStringName=\"LoggingDatabase\"> <install-command> <text> <!-- NOTE: call LogManager.Configuration.Install(new InstallationContext()); to execute this query. --> CREATE TABLE ${var:logTableName} ( Id bigint primary key not null identity(1,1), Logged datetime2, Level nvarchar(10), LogMessage nvarchar(max), MessageUid uniqueidentifier, MessagePartUid uniqueidentifier, MessagePartDataUid uniqueidentifier, ) </text> <ignoreFailures>false</ignoreFailures> </install-command>","title":"Example install database target"},{"location":"Installing-targets/#troubleshooting-installation-issues","text":"","title":"Troubleshooting installation issues"},{"location":"Installing-targets/#installation-log","text":"You can enable the installation log by overriding the default output stream in your InstallationContext . For example, to have the installation log printed out to console, you can use: LogManager.Configuration.Install(new InstallationContext(Console.Out)); You can also redirect the installation log to a string in memory: var stringWriter = new StringWriter(); LogManager.Configuration.Install(new InstallationContext(stringWriter)); var installationLog = stringWriter.ToString(); // retrieve the installation output Note that the log output can also be accessed via InstallationContext.LogOutput : // This is equivalent to the previous example var installationContext = new InstallationContext(new StringWriter()) LogManager.Configuration.Install(installationContext); var installationLog = installationContext.LogOutput.ToString();","title":"Installation log"},{"location":"Installing-targets/#a-note-on-exceptions","text":"Except for application critical exceptions (OutOfMemoryException. StackOverflowException and ThreadAbortException), LogManager.Configuration.Install() will not rethrow any other exception, even when NLog is Logging-troubleshooting#troubleshooting-steps . You can set up NLog to use a FallbackGroup-target if your primary target (for instance a log database) fails.","title":"A note on exceptions"},{"location":"Internal-Logging/","text":"When Troubleshooting NLog logging issues , then it is a good idea to enable internal logging, which often helps to identify where the problem is. Internal log output can be sent to a file, console window or both. Enabling internal logging using configuration file When you configure NLog using Configuration File , you can enable internal logging by setting the following attribute on the <nlog> element: internalLogLevel=\"Off|Trace|Debug|Info|Warn|Error|Fatal\" \u2013 determines internal log level. The higher the level, the less verbose the internal log output. internalLogFile=\"file.txt\" - adding internalLogFile cause NLog to write its internal debugging messages to the specified file. This includes any exceptions that may be thrown during logging. Note: only a few layouts are supported, as the internal log needs to be as stable as possible. NLog 4.6+: Environment Variables are also supported: e.g. %appdata% or %HOME% NLog 4.6+: Supports renderers (without options): ${currentdir} , ${basedir} , ${tempdir} NLog 4.7.1+: Supports renderer (without options): ${processdir} NLog 5.0+: Supports renderers (without options): ${commonApplicationDataDir} , ${userApplicationDataDir} , ${userLocalApplicationDataDir} internalLogToConsole=\"false|true\" \u2013 sends internal logging messages to the console. internalLogToConsoleError=\"false|true\" \u2013 sends internal logging messages to the console error output (stderr). internalLogToTrace=\"false|true\" \u2013 sends internal logging messages to System.Diagnostics.Trace (introduced in NLog 4.3) internalLogIncludeTimestamp=\"false|true\" - indicates whether timestamps should be included in the internal log output (NLog 4.3+) Here is an example of a configuration file which enables internal logging to a file: <nlog internalLogFile=\"c:\\nlog-internal.txt\" internalLogLevel=\"Trace\"> <targets> <!-- target configuration here --> </targets> <rules> <!-- log routing rules --> </rules> </nlog> If not getting internal logger output, then make sure the NLog.config file has Build Action set. See also Logging-troubleshooting . Alternative try to activate Internal Logging programmatically. Enabling internal logging programmatically Internal logging can be configured through code by setting the following properties on InternalLogger class: * NLog.Common.InternalLogger.LogLevel - specifies internal logging level * NLog.Common.InternalLogger.LogFile - specifies name of the log file (null will disable logging to a file) * NLog.Common.InternalLogger.LogToConsole - enables or disables logging to the console * NLog.Common.InternalLogger.LogToConsoleError - enables or disables logging to the console error stream * NLog.Common.InternalLogger.LogWriter - specifies a TextWriter object to use for logging. * NLog.Common.InternalLogger.LogToTrace - enables or disables logging to System.Diagnostics.Trace Introduced with NLog 4.3 * NLog.Common.InternalLogger.IncludeTimestamp - enables or disables whether timestamps should be included in the internal log output Introduced with NLog 4.3 * NLog.Common.InternalLogger.LogMessageReceived - Raises an event for every message received by InternalLogger Introduced with NLog 4.7 For best diagnostic output then make sure to enable NLog InternalLogger, before creating the first NLog Logger-object. Here is an example of activating internal logging from code: using NLog; class Program { static void Main() { // enable internal logging to the console NLog.Common.InternalLogger.LogToConsole = true; // enable internal logging to a file NLog.Common.InternalLogger.LogFile = \"c:\\\\nlog-internal.txt\"; // On Linux one can use \"/home/nlog-internal.txt\" // enable internal logging to a custom TextWriter NLog.Common.InternalLogger.LogWriter = new StringWriter(); //e.g. TextWriter writer = File.CreateText(\"C:\\\\perl.txt\") // set internal log level NLog.Common.InternalLogger.LogLevel = NLog.LogLevel.Debug; // Perform test output, ensure first NLog Logger is created after InternalLogger is enabled. NLog.LogManager.GetLogger(\"Test\").Info(\"Hello World\"); } } Enabling internal logging using environment variables Before NLog 5.0 then environment variables and app.config settings would be automatically be applied on startup. But because of the startup overhead, then this has been disabled. Instead one now have to explicitly activate this behavior: NLog.LogFactory.Setup().SetupInternalLogger(b => b.SetupFromEnvironmentVariables()) These are environment variables which control internal logging: * NLOG_INTERNAL_LOG_LEVEL - sets the internal logging level. The available values are Trace, Debug, Info, Warn, Error or Fatal - the default is Info which should be appropriate for most cases, to get more detailed logging - set it to Debug or Trace. * NLOG_INTERNAL_LOG_FILE - if this variable is found in the environment NLog will save internal log to the specified file. The file must be writable by the current user or it will not be created. * NLOG_INTERNAL_LOG_TO_CONSOLE - if this variable is found in the environment, will outputs internal diagnostic information to the console * NLOG_INTERNAL_LOG_TO_CONSOLE_ERROR - sets internalLogToConsoleError * NLOG_INTERNAL_LOG_TO_TRACE - write internal log to System.Diagnostics.Trace (introduced in NLog 4.3) * NLOG_INTERNAL_INCLUDE_TIMESTAMP - sets internalLogIncludeTimestamp (introduced in NLog 4.3) Description of InternalLogger LogLevels LogLevel.Fatal - Just before application is going to crash. LogLevel.Error - Logging pipeline has failed, and logevents has been discarded. LogLevel.Warn - Detected invalid configuration but can recover. Detected connection lost but can recover. LogLevel.Info - Application lifetime events like logging configuration loaded, and shutting down logging engine. LogLevel.Debug - Reporting interesting events for detailed diagnostics. Having reflection issues when serializing logevents. LogLevel.Trace - Dumping verbose configuration details.","title":"Internal Logging"},{"location":"Internal-Logging/#enabling-internal-logging-using-configuration-file","text":"When you configure NLog using Configuration File , you can enable internal logging by setting the following attribute on the <nlog> element: internalLogLevel=\"Off|Trace|Debug|Info|Warn|Error|Fatal\" \u2013 determines internal log level. The higher the level, the less verbose the internal log output. internalLogFile=\"file.txt\" - adding internalLogFile cause NLog to write its internal debugging messages to the specified file. This includes any exceptions that may be thrown during logging. Note: only a few layouts are supported, as the internal log needs to be as stable as possible. NLog 4.6+: Environment Variables are also supported: e.g. %appdata% or %HOME% NLog 4.6+: Supports renderers (without options): ${currentdir} , ${basedir} , ${tempdir} NLog 4.7.1+: Supports renderer (without options): ${processdir} NLog 5.0+: Supports renderers (without options): ${commonApplicationDataDir} , ${userApplicationDataDir} , ${userLocalApplicationDataDir} internalLogToConsole=\"false|true\" \u2013 sends internal logging messages to the console. internalLogToConsoleError=\"false|true\" \u2013 sends internal logging messages to the console error output (stderr). internalLogToTrace=\"false|true\" \u2013 sends internal logging messages to System.Diagnostics.Trace (introduced in NLog 4.3) internalLogIncludeTimestamp=\"false|true\" - indicates whether timestamps should be included in the internal log output (NLog 4.3+) Here is an example of a configuration file which enables internal logging to a file: <nlog internalLogFile=\"c:\\nlog-internal.txt\" internalLogLevel=\"Trace\"> <targets> <!-- target configuration here --> </targets> <rules> <!-- log routing rules --> </rules> </nlog> If not getting internal logger output, then make sure the NLog.config file has Build Action set. See also Logging-troubleshooting . Alternative try to activate Internal Logging programmatically.","title":"Enabling internal logging using configuration file"},{"location":"Internal-Logging/#enabling-internal-logging-programmatically","text":"Internal logging can be configured through code by setting the following properties on InternalLogger class: * NLog.Common.InternalLogger.LogLevel - specifies internal logging level * NLog.Common.InternalLogger.LogFile - specifies name of the log file (null will disable logging to a file) * NLog.Common.InternalLogger.LogToConsole - enables or disables logging to the console * NLog.Common.InternalLogger.LogToConsoleError - enables or disables logging to the console error stream * NLog.Common.InternalLogger.LogWriter - specifies a TextWriter object to use for logging. * NLog.Common.InternalLogger.LogToTrace - enables or disables logging to System.Diagnostics.Trace Introduced with NLog 4.3 * NLog.Common.InternalLogger.IncludeTimestamp - enables or disables whether timestamps should be included in the internal log output Introduced with NLog 4.3 * NLog.Common.InternalLogger.LogMessageReceived - Raises an event for every message received by InternalLogger Introduced with NLog 4.7 For best diagnostic output then make sure to enable NLog InternalLogger, before creating the first NLog Logger-object. Here is an example of activating internal logging from code: using NLog; class Program { static void Main() { // enable internal logging to the console NLog.Common.InternalLogger.LogToConsole = true; // enable internal logging to a file NLog.Common.InternalLogger.LogFile = \"c:\\\\nlog-internal.txt\"; // On Linux one can use \"/home/nlog-internal.txt\" // enable internal logging to a custom TextWriter NLog.Common.InternalLogger.LogWriter = new StringWriter(); //e.g. TextWriter writer = File.CreateText(\"C:\\\\perl.txt\") // set internal log level NLog.Common.InternalLogger.LogLevel = NLog.LogLevel.Debug; // Perform test output, ensure first NLog Logger is created after InternalLogger is enabled. NLog.LogManager.GetLogger(\"Test\").Info(\"Hello World\"); } }","title":"Enabling internal logging programmatically"},{"location":"Internal-Logging/#enabling-internal-logging-using-environment-variables","text":"Before NLog 5.0 then environment variables and app.config settings would be automatically be applied on startup. But because of the startup overhead, then this has been disabled. Instead one now have to explicitly activate this behavior: NLog.LogFactory.Setup().SetupInternalLogger(b => b.SetupFromEnvironmentVariables()) These are environment variables which control internal logging: * NLOG_INTERNAL_LOG_LEVEL - sets the internal logging level. The available values are Trace, Debug, Info, Warn, Error or Fatal - the default is Info which should be appropriate for most cases, to get more detailed logging - set it to Debug or Trace. * NLOG_INTERNAL_LOG_FILE - if this variable is found in the environment NLog will save internal log to the specified file. The file must be writable by the current user or it will not be created. * NLOG_INTERNAL_LOG_TO_CONSOLE - if this variable is found in the environment, will outputs internal diagnostic information to the console * NLOG_INTERNAL_LOG_TO_CONSOLE_ERROR - sets internalLogToConsoleError * NLOG_INTERNAL_LOG_TO_TRACE - write internal log to System.Diagnostics.Trace (introduced in NLog 4.3) * NLOG_INTERNAL_INCLUDE_TIMESTAMP - sets internalLogIncludeTimestamp (introduced in NLog 4.3)","title":"Enabling internal logging using environment variables"},{"location":"Internal-Logging/#description-of-internallogger-loglevels","text":"LogLevel.Fatal - Just before application is going to crash. LogLevel.Error - Logging pipeline has failed, and logevents has been discarded. LogLevel.Warn - Detected invalid configuration but can recover. Detected connection lost but can recover. LogLevel.Info - Application lifetime events like logging configuration loaded, and shutting down logging engine. LogLevel.Debug - Reporting interesting events for detailed diagnostics. Having reflection issues when serializing logevents. LogLevel.Trace - Dumping verbose configuration details.","title":"Description of InternalLogger LogLevels"},{"location":"JSON-Encode-Layout-Renderer/","text":"Escapes output of another layout using JSON rules. Platforms Supported: All Configuration Syntax ${json-encode:jsonEncode=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:jsonEncode=Boolean} Parameters Transformation Options jsonEncode - Indicates whether to apply JSON encoding. Boolean Default: True escapeUnicode - Indicates whether it should escape unicode characters (non-ascii) using \\u . Boolean Default: True Introduced in NLog 4.4.7 inner - Wrapped layout. Layout EscapeForwardSlash - Should forward slashes be escaped? If true, / will be converted to \\/ . Default true Introduced in NLog 4.6.8 Example ${event-properties:item=MyValue:jsonEncode=true}","title":"JSON Encode Layout Renderer"},{"location":"JSON-Encode-Layout-Renderer/#configuration-syntax","text":"${json-encode:jsonEncode=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:jsonEncode=Boolean}","title":"Configuration Syntax"},{"location":"JSON-Encode-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"JSON-Encode-Layout-Renderer/#transformation-options","text":"jsonEncode - Indicates whether to apply JSON encoding. Boolean Default: True escapeUnicode - Indicates whether it should escape unicode characters (non-ascii) using \\u . Boolean Default: True Introduced in NLog 4.4.7 inner - Wrapped layout. Layout EscapeForwardSlash - Should forward slashes be escaped? If true, / will be converted to \\/ . Default true Introduced in NLog 4.6.8","title":"Transformation Options"},{"location":"JSON-Encode-Layout-Renderer/#example","text":"${event-properties:item=MyValue:jsonEncode=true}","title":"Example"},{"location":"JsonArrayLayout/","text":"A specialized layout that renders to JSON-Array. See also JsonLayout Platforms Supported: All Introduced with NLog 5.0 <target name=\"jsonFile\" xsi:type=\"File\" fileName=\"log-file.json\" > <layout xsi:type=\"JsonLayoutArray\"> <item type='SimpleLayout' text='${date:format=o}' /> <item type='SimpleLayout' text='${level}' /> <item type='SimpleLayout' text='${message}' /> </layout> </target> This would write: [ \"2010-01-01T12:34:56Z\", \"Info\", \"hello world\" ] Parameters Items type - Required. The type of Layout (Ex. SimpleLayout , JsonLayout , etc.) suppressSpaces - Enable to suppress extra spaces in the output JSON. Default: false . renderEmptyObject - When no array-items, then it should still render empty array-value [] . Default: true .","title":"JsonArrayLayout"},{"location":"JsonArrayLayout/#parameters","text":"Items type - Required. The type of Layout (Ex. SimpleLayout , JsonLayout , etc.) suppressSpaces - Enable to suppress extra spaces in the output JSON. Default: false . renderEmptyObject - When no array-items, then it should still render empty array-value [] . Default: true .","title":"Parameters"},{"location":"JsonLayout/","text":"A specialized layout that renders to JSON. Platforms Supported: All Introduced with NLog 4.0 <target name=\"jsonFile\" xsi:type=\"File\" fileName=\"log-file.json\" > <layout xsi:type=\"JsonLayout\" includeEventProperties=\"Boolean\" excludeProperties=\"Comma-separated list (string)\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level:upperCase=true}\"/> <attribute name=\"message\" layout=\"${message}\" /> </layout> </target> This would write: { \"time\": \"2010-01-01 12:34:56.0000\", \"level\": \"ERROR\", \"message\": \"hello, world\" } Added in NLog 4.1 Optional encode parameter. You can disable JSON encoding by setting encode=\"false\" . This will let you to write any string without JSON encoding. Including custom JSON (Ex. boolean/numeric values) <attribute name=\"Details\" layout=\"${event-properties:item=Details}\" encode=\"false\" /> Parameters Attribute name - Required. The name of the JSON-key layout - The layout for the JSON-value (Can be a nested JsonLayout) encode - Enable or disable JSON encoding for the attribute. Default = true > Introduced in NLog 4.1 escapeUnicode - Escape unicode-characters (non-ascii) using \\u . Default = true > Introduced in NLog 4.4.7 IncludeEmptyValue - Include attribute when Layout output is empty. Default = false > Introduced in NLog 4.5 EscapeForwardSlash - Should forward slashes also be escaped. Default = false, > Introduced in NLog 4.6.8. Before NLog 4.7 it did not inherit value from parent. Before NLog 5.0 the default was true suppressSpaces - Enable to suppress extra spaces in the output JSON. Default = false . Introduced in NLog 4.1 renderEmptyObject - When no json-attributes, then it should still render empty object-value {} . Default = true . Introduced in NLog 4.3.7 IncludeGdc - Indicates whether to include contents of the GDC-Layout-Renderer (GDC) dictionary. Default = false . Introduced in NLog 4.4.10 IncludeEventProperties - Include all events properties of a logevent? Default = false . Before NLog 5.0 option was named IncludeAllProperties IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default = false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc excludeProperties - comma separated string with names which properties to exclude. Only used when includeEventProperties is true . Case insensitive. Default empty When a name contains a comma, single quote the value. E.g. 'value,withquote',value2 . Introduced in NLog 4.4 excludeEmptyProperties - Exclude event properties with value null or empty (Also checks GDC, MDC, MDLC). Introduced in NLog 4.7.7 EscapeUnicode - escape non-ascii characters? Boolean. Default true . Introduced in NLog 4.4.7 MaxRecursionLimit - How far should the JSON serializer follow object references before backing off. Integer. Default 1 (0 = No object reflection) Introduced in NLog 4.5. Before NLog 5.0 the default was 0 (No object reflection) EscapeForwardSlash - Should forward slashes be escaped? If true, / will be converted to \\/ . Default = false . Introduced in NLog 4.6.8. Before NLog 5.0 the default was true Notes Currently the layout will always create a non-nested object with properties. The JSON will be written on one line, so no newlines. Advanced examples Nested JSON layouts: From the API: var jsonLayout = new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=Type}\"), new JsonAttribute(\"message\", \"${exception:format=Message}\"), new JsonAttribute(\"innerException\", new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=:innerFormat=Type:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), new JsonAttribute(\"message\", \"${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), } }, //don't escape layout false) } }; returns: { \"type\": \"NLog.NLogRuntimeException\", \"message\": \"test\", \"innerException\": { \"type\": \"System.NullReferenceException\", \"message\": \"null is bad!\" } } From XML <nlog> <targets> <target name='jsonFile' type='File' fileName='log.json'> <layout type='JsonLayout'> <attribute name='time' layout='${longdate}' /> <attribute name='level' layout='${level:upperCase=true}'/> <attribute name='nested' encode='false' > <layout type='JsonLayout'> <attribute name='message' layout='${message}' /> <attribute name='exception' layout='${exception}' /> </layout> </attribute> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"jsonFile\" /> </rules> </nlog> will render: { \"time\": \"2016-10-30 13:30:55.0000\", \"level\": \"INFO\", \"nested\": { \"message\": \"this is message\", \"exception\": \"test\" } } RenderEmptyObject var jsonLayout = new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=Type}\"), new JsonAttribute(\"message\", \"${exception:format=Message}\"), new JsonAttribute(\"innerException\", new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=:innerFormat=Type:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), new JsonAttribute(\"message\", \"${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), }, RenderEmptyObject = false }, //don't escape layout false) } }; Writing without an exception will render { \"type\": \"NLog.NLogRuntimeException\", \"message\": \"test\" } with RenderEmptyObject=true (default) it will render: \"type\": \"NLog.NLogRuntimeException\", \"message\": \"test\", \"innerException\": { } } Nested JSON with structured logging Writing JSON with the structured logging parameters as eventProperties. Object for test: public class TestObject { public string A { get; set; } public int B { get; set; } public override string ToString() { return A; } } Logger calls: var testObj = new TestObject { A = \"AlphaObject\", B = 2 }; var testObjB = new TestObject { A = \"BetaObject\", B = 3 }; log.Info(\"First: {alpha}, Second: {beta}\", testObj, testObjB) With this config: <target xsi:type=\"File\" name=\"jsonFile2\" fileName=\"c:\\temp\\nlog-json-nested-${shortdate}.log\"> <layout type=\"JsonLayout\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level}\" /> <attribute name=\"message\" layout=\"${message}\" /> <attribute name=\"eventProperties\" encode=\"false\" > <layout type='JsonLayout' includeEventProperties=\"true\" maxRecursionLimit=\"2\"/> </attribute> </layout> </target> Will render: { \"time\": \"2018-04-02 02:00:00.2349\", \"level\": \"Info\", \"message\": \"First: AlphaObject, Second: BetaObject\", \"eventProperties\": { \"alpha\": { \"A\": \"AlphaObject\", \"B\": 2 }, \"beta\": { \"A\": \"BetaObject\", \"B\": 3 } } } pretty printed: { \"time\": \"2018-04-02 02:00:00.2349\", \"level\": \"Info\", \"message\": \"First: AlphaObject, Second: BetaObject\", \"eventProperties\": { \"alpha\": { \"A\": \"AlphaObject\", \"B\": 2 }, \"beta\": { \"A\": \"BetaObject\", \"B\": 3 } } }","title":"JsonLayout"},{"location":"JsonLayout/#parameters","text":"Attribute name - Required. The name of the JSON-key layout - The layout for the JSON-value (Can be a nested JsonLayout) encode - Enable or disable JSON encoding for the attribute. Default = true > Introduced in NLog 4.1 escapeUnicode - Escape unicode-characters (non-ascii) using \\u . Default = true > Introduced in NLog 4.4.7 IncludeEmptyValue - Include attribute when Layout output is empty. Default = false > Introduced in NLog 4.5 EscapeForwardSlash - Should forward slashes also be escaped. Default = false, > Introduced in NLog 4.6.8. Before NLog 4.7 it did not inherit value from parent. Before NLog 5.0 the default was true suppressSpaces - Enable to suppress extra spaces in the output JSON. Default = false . Introduced in NLog 4.1 renderEmptyObject - When no json-attributes, then it should still render empty object-value {} . Default = true . Introduced in NLog 4.3.7 IncludeGdc - Indicates whether to include contents of the GDC-Layout-Renderer (GDC) dictionary. Default = false . Introduced in NLog 4.4.10 IncludeEventProperties - Include all events properties of a logevent? Default = false . Before NLog 5.0 option was named IncludeAllProperties IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default = false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc excludeProperties - comma separated string with names which properties to exclude. Only used when includeEventProperties is true . Case insensitive. Default empty When a name contains a comma, single quote the value. E.g. 'value,withquote',value2 . Introduced in NLog 4.4 excludeEmptyProperties - Exclude event properties with value null or empty (Also checks GDC, MDC, MDLC). Introduced in NLog 4.7.7 EscapeUnicode - escape non-ascii characters? Boolean. Default true . Introduced in NLog 4.4.7 MaxRecursionLimit - How far should the JSON serializer follow object references before backing off. Integer. Default 1 (0 = No object reflection) Introduced in NLog 4.5. Before NLog 5.0 the default was 0 (No object reflection) EscapeForwardSlash - Should forward slashes be escaped? If true, / will be converted to \\/ . Default = false . Introduced in NLog 4.6.8. Before NLog 5.0 the default was true","title":"Parameters"},{"location":"JsonLayout/#notes","text":"Currently the layout will always create a non-nested object with properties. The JSON will be written on one line, so no newlines.","title":"Notes"},{"location":"JsonLayout/#advanced-examples","text":"Nested JSON layouts:","title":"Advanced examples"},{"location":"JsonLayout/#from-the-api","text":"var jsonLayout = new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=Type}\"), new JsonAttribute(\"message\", \"${exception:format=Message}\"), new JsonAttribute(\"innerException\", new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=:innerFormat=Type:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), new JsonAttribute(\"message\", \"${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), } }, //don't escape layout false) } }; returns: { \"type\": \"NLog.NLogRuntimeException\", \"message\": \"test\", \"innerException\": { \"type\": \"System.NullReferenceException\", \"message\": \"null is bad!\" } }","title":"From the API:"},{"location":"JsonLayout/#from-xml","text":"<nlog> <targets> <target name='jsonFile' type='File' fileName='log.json'> <layout type='JsonLayout'> <attribute name='time' layout='${longdate}' /> <attribute name='level' layout='${level:upperCase=true}'/> <attribute name='nested' encode='false' > <layout type='JsonLayout'> <attribute name='message' layout='${message}' /> <attribute name='exception' layout='${exception}' /> </layout> </attribute> </layout> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"jsonFile\" /> </rules> </nlog> will render: { \"time\": \"2016-10-30 13:30:55.0000\", \"level\": \"INFO\", \"nested\": { \"message\": \"this is message\", \"exception\": \"test\" } }","title":"From XML"},{"location":"JsonLayout/#renderemptyobject","text":"var jsonLayout = new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=Type}\"), new JsonAttribute(\"message\", \"${exception:format=Message}\"), new JsonAttribute(\"innerException\", new JsonLayout { Attributes = { new JsonAttribute(\"type\", \"${exception:format=:innerFormat=Type:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), new JsonAttribute(\"message\", \"${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}\"), }, RenderEmptyObject = false }, //don't escape layout false) } }; Writing without an exception will render { \"type\": \"NLog.NLogRuntimeException\", \"message\": \"test\" } with RenderEmptyObject=true (default) it will render: \"type\": \"NLog.NLogRuntimeException\", \"message\": \"test\", \"innerException\": { } }","title":"RenderEmptyObject"},{"location":"JsonLayout/#nested-json-with-structured-logging","text":"Writing JSON with the structured logging parameters as eventProperties. Object for test: public class TestObject { public string A { get; set; } public int B { get; set; } public override string ToString() { return A; } } Logger calls: var testObj = new TestObject { A = \"AlphaObject\", B = 2 }; var testObjB = new TestObject { A = \"BetaObject\", B = 3 }; log.Info(\"First: {alpha}, Second: {beta}\", testObj, testObjB) With this config: <target xsi:type=\"File\" name=\"jsonFile2\" fileName=\"c:\\temp\\nlog-json-nested-${shortdate}.log\"> <layout type=\"JsonLayout\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level}\" /> <attribute name=\"message\" layout=\"${message}\" /> <attribute name=\"eventProperties\" encode=\"false\" > <layout type='JsonLayout' includeEventProperties=\"true\" maxRecursionLimit=\"2\"/> </attribute> </layout> </target> Will render: { \"time\": \"2018-04-02 02:00:00.2349\", \"level\": \"Info\", \"message\": \"First: AlphaObject, Second: BetaObject\", \"eventProperties\": { \"alpha\": { \"A\": \"AlphaObject\", \"B\": 2 }, \"beta\": { \"A\": \"BetaObject\", \"B\": 3 } } } pretty printed: { \"time\": \"2018-04-02 02:00:00.2349\", \"level\": \"Info\", \"message\": \"First: AlphaObject, Second: BetaObject\", \"eventProperties\": { \"alpha\": { \"A\": \"AlphaObject\", \"B\": 2 }, \"beta\": { \"A\": \"BetaObject\", \"B\": 3 } } }","title":"Nested JSON with structured logging"},{"location":"Layout-Renderers/","text":"Layout renderers are template macros that are used in Layouts , e.g. ${message} , ${level} etc Layout Renderers All layout renderers could be found here: https://nlog-project.org/config/?tab=layout-renderers NLog supports creating custom layout renderers. For more information, see: Extending NLog Passing Custom Values to a Layout Even though the layout renderers provide many pre-defined values, you may need to pass application specific values to your Layouts . You can provide own Context state, that can then be rendered by differents Layouts. For example by using LogEvent Properties, that can be rendered using using the ${event-properties} renderer.","title":"Layout Renderers"},{"location":"Layout-Renderers/#layout-renderers","text":"All layout renderers could be found here: https://nlog-project.org/config/?tab=layout-renderers NLog supports creating custom layout renderers. For more information, see: Extending NLog","title":"Layout Renderers"},{"location":"Layout-Renderers/#passing-custom-values-to-a-layout","text":"Even though the layout renderers provide many pre-defined values, you may need to pass application specific values to your Layouts . You can provide own Context state, that can then be rendered by differents Layouts. For example by using LogEvent Properties, that can be rendered using using the ${event-properties} renderer.","title":"Passing Custom Values to a Layout"},{"location":"Layout/","text":"See Layouts","title":"Layout"},{"location":"LayoutWithHeaderAndFooter/","text":"A specialized layout that supports header and footer. Platforms Supported: All Configuration Syntax <targets> <target> <layout xsi:type=\"LayoutWithHeaderAndFooter\"> <!-- Layout Options --> <layout xsi:type=\"layoutType\">Layout</layout> <header xsi:type=\"layoutType\">Layout</header> <footer xsi:type=\"layoutType\">Layout</footer> </layout> </target> </targets> Parameters Layout Options layout - Body layout (can be repeated multiple times). Layout header - Header layout. Layout footer - Footer layout. Layout","title":"LayoutWithHeaderAndFooter"},{"location":"LayoutWithHeaderAndFooter/#configuration-syntax","text":"<targets> <target> <layout xsi:type=\"LayoutWithHeaderAndFooter\"> <!-- Layout Options --> <layout xsi:type=\"layoutType\">Layout</layout> <header xsi:type=\"layoutType\">Layout</header> <footer xsi:type=\"layoutType\">Layout</footer> </layout> </target> </targets>","title":"Configuration Syntax"},{"location":"LayoutWithHeaderAndFooter/#parameters","text":"","title":"Parameters"},{"location":"LayoutWithHeaderAndFooter/#layout-options","text":"layout - Body layout (can be repeated multiple times). Layout header - Header layout. Layout footer - Footer layout. Layout","title":"Layout Options"},{"location":"Layouts/","text":"NLog Layout allows converting a LogEvent into a formatted string, which is highly customizable. The most common used Layout-type is the SimpleLayout which allows one to combine one or many LayoutRenderers to generate customized output. The default Layout for NLog Target is this: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Many more LayoutRenderers can be found here: https://nlog-project.org/config/?tab=layout-renderers Besides SimpleLayout there also exists JsonLayout, XmlLayout, CsvLayout, etc. These are optimized for generating log-output that conforms to the expected dataformat. See also: https://nlog-project.org/config/?tab=layouts Target Configuration with Layout NLog Layout are often used (and it is also encouraged) as datatype for NLog Target configuration properties. Forexample the NLog FileTarget has FileName-property. This enables use of LayoutRenderers for specifying relative directory-path, or to find specifc log-directory-path from configuration-files (Ex. ${appsetting} or ${configsetting} ) This allows one to keep environment specific configuration away from the pure NLog-configuration, and it instead lookup settings from deployed configuration-files or machine environment-variables using NLog LayoutRenderers. Example ${configsetting:Options.ConnectionString} can lookup value from appsettings.json : { \"Options\":{ \"ConnectionString\":\"UseDevelopmentStorage=true\", } } Typed Layout NLog 5.0 introduces Layout<T> that makes it even easier to use NLog Layout for configuration-options. Before one usually had to do this: int eventId = 0; string renderEventId = EventIdLayout.Render(logEvent); if (string.IsNullOrEmpty(renderEventId) || !int.TryParse(renderEventId, out eventId)) { eventId = 42; // fallback default value } Now with Layout<int> then one can do this: int eventId = EventIdLayout.RenderValue(logEvent, defaultValue: 42); Example An example of a simple layout looks like: layout=\"${machinename} ${message}\" This layout is used in the NLog.config file like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"console\" xsi:type=\"ColoredConsole\" layout=\"${machinename} ${message}\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"console\" /> </rules> </nlog>","title":"Layouts"},{"location":"Layouts/#target-configuration-with-layout","text":"NLog Layout are often used (and it is also encouraged) as datatype for NLog Target configuration properties. Forexample the NLog FileTarget has FileName-property. This enables use of LayoutRenderers for specifying relative directory-path, or to find specifc log-directory-path from configuration-files (Ex. ${appsetting} or ${configsetting} ) This allows one to keep environment specific configuration away from the pure NLog-configuration, and it instead lookup settings from deployed configuration-files or machine environment-variables using NLog LayoutRenderers. Example ${configsetting:Options.ConnectionString} can lookup value from appsettings.json : { \"Options\":{ \"ConnectionString\":\"UseDevelopmentStorage=true\", } }","title":"Target Configuration with Layout"},{"location":"Layouts/#typed-layout","text":"NLog 5.0 introduces Layout<T> that makes it even easier to use NLog Layout for configuration-options. Before one usually had to do this: int eventId = 0; string renderEventId = EventIdLayout.Render(logEvent); if (string.IsNullOrEmpty(renderEventId) || !int.TryParse(renderEventId, out eventId)) { eventId = 42; // fallback default value } Now with Layout<int> then one can do this: int eventId = EventIdLayout.RenderValue(logEvent, defaultValue: 42);","title":"Typed Layout"},{"location":"Layouts/#example","text":"An example of a simple layout looks like: layout=\"${machinename} ${message}\" This layout is used in the NLog.config file like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"console\" xsi:type=\"ColoredConsole\" layout=\"${machinename} ${message}\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"console\" /> </rules> </nlog>","title":"Example"},{"location":"Left-layout-renderer/","text":"Left part of a text. Platforms Supported: All Introduced in NLog 4.6 Related: ${substring} ${right} Configuration Syntax Explicit usage: ${left:inner=Layout:length=Integer} Ambient property truncate can be used as a shortcut (Introduced with NLog ver. 4.6.3) ${message:truncate=80} Read more about using the Configuration File . Parameters Transformation Options inner - Wrapped layout. [DefaultParameter] so Inner: is not required if it's the first Layout length - Length in characters. Integer Required.","title":"Left layout renderer"},{"location":"Left-layout-renderer/#configuration-syntax","text":"Explicit usage: ${left:inner=Layout:length=Integer} Ambient property truncate can be used as a shortcut (Introduced with NLog ver. 4.6.3) ${message:truncate=80} Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Left-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Left-layout-renderer/#transformation-options","text":"inner - Wrapped layout. [DefaultParameter] so Inner: is not required if it's the first Layout length - Length in characters. Integer Required.","title":"Transformation Options"},{"location":"Level-layout-renderer/","text":"The log level . Platforms Supported: All Configuration Syntax ${level:format=Ordinal} Alternatively, add padding to align the message. ${pad:padding=5:inner=${level:uppercase=true}} Alternatively, truncate to align the message: ${level:uppercase=true:truncate=3} Parameters format - Output format of the level. Introduced in 4.4.6 Default: Name Possible values: Name - Render the standard level name. > Introduced in NLog 4.4.6 FullName - Render the full level name (Expands \"Info\" and \"Warn\") > Introduced in NLog 4.7 FirstCharacter - Render the first character of the level. > Introduced in NLog 4.4.6 Ordinal - Render the ordinal (aka number) for the level. > Introduced in NLog 4.4.6 TriLetter - Renders LogLevel as 3 letter abbreviations (Trc, Dbg, Inf, Wrn, Err, Ftl) > Introduced in NLog 5.0.5 Name FullName TriLetter FirstCharacter Ordinal Trace Trace Trc T 0 Debug Debug Dbg D 1 Info Information Inf I 2 Warn Warning Wrn W 3 Error Error Err E 4 Fatal Fatal Ftl F 5 Off Off Off O 6 Examples Basic Configuration: ${level} Code: logger.Debug(\"Test Message\") Result: Debug Format Configuration: ${level:format=FirstCharacter} Code: logger.Debug(\"Test Message\") Result: D","title":"Level layout renderer"},{"location":"Level-layout-renderer/#configuration-syntax","text":"${level:format=Ordinal} Alternatively, add padding to align the message. ${pad:padding=5:inner=${level:uppercase=true}} Alternatively, truncate to align the message: ${level:uppercase=true:truncate=3}","title":"Configuration Syntax"},{"location":"Level-layout-renderer/#parameters","text":"format - Output format of the level. Introduced in 4.4.6 Default: Name Possible values: Name - Render the standard level name. > Introduced in NLog 4.4.6 FullName - Render the full level name (Expands \"Info\" and \"Warn\") > Introduced in NLog 4.7 FirstCharacter - Render the first character of the level. > Introduced in NLog 4.4.6 Ordinal - Render the ordinal (aka number) for the level. > Introduced in NLog 4.4.6 TriLetter - Renders LogLevel as 3 letter abbreviations (Trc, Dbg, Inf, Wrn, Err, Ftl) > Introduced in NLog 5.0.5 Name FullName TriLetter FirstCharacter Ordinal Trace Trace Trc T 0 Debug Debug Dbg D 1 Info Information Inf I 2 Warn Warning Wrn W 3 Error Error Err E 4 Fatal Fatal Ftl F 5 Off Off Off O 6","title":"Parameters"},{"location":"Level-layout-renderer/#examples","text":"","title":"Examples"},{"location":"Level-layout-renderer/#basic","text":"Configuration: ${level} Code: logger.Debug(\"Test Message\") Result: Debug","title":"Basic"},{"location":"Level-layout-renderer/#format","text":"Configuration: ${level:format=FirstCharacter} Code: logger.Debug(\"Test Message\") Result: D","title":"Format"},{"location":"LimitingWrapper-target/","text":"Limits the number of logs written to the wrapped target in a given time interval. Platforms Supported: All Introduced in NLog 4.4. Configuration Syntax <targets> <target xsi:type=\"LimitingWrapper\" name=\"String\" messageLimit=\"Integer\" interval=\"TimeSpan\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Limiting Options messageLimit - Indicates the maximum number of log events written per Interval. Log events in the current interval received after the message limit has been reached will be discarded. Integer Default: 1000 interval - Indicates a time interval in which messages will be written up to the maximum number of messages ( messageLimit ). TimeSpan Default: \"01:00\" (1 hour)","title":"LimitingWrapper target"},{"location":"LimitingWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"LimitingWrapper\" name=\"String\" messageLimit=\"Integer\" interval=\"TimeSpan\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"LimitingWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"LimitingWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"LimitingWrapper-target/#limiting-options","text":"messageLimit - Indicates the maximum number of log events written per Interval. Log events in the current interval received after the message limit has been reached will be discarded. Integer Default: 1000 interval - Indicates a time interval in which messages will be written up to the maximum number of messages ( messageLimit ). TimeSpan Default: \"01:00\" (1 hour)","title":"Limiting Options"},{"location":"Literal-Layout-Renderer/","text":"A string literal. Platforms Supported: All Configuration Syntax ${literal:text=String} Parameters Rendering Options text - Literal text. Remarks This is used to escape '${' sequence as ;${literal:text=${}' . Examples Basic Configuration: ${literal:text=Some Text with ${ in it} Code: logger.Debug(\"Test Message\") Result: Some Text with ${ in it","title":"Literal Layout Renderer"},{"location":"Literal-Layout-Renderer/#configuration-syntax","text":"${literal:text=String}","title":"Configuration Syntax"},{"location":"Literal-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Literal-Layout-Renderer/#rendering-options","text":"text - Literal text.","title":"Rendering Options"},{"location":"Literal-Layout-Renderer/#remarks","text":"This is used to escape '${' sequence as ;${literal:text=${}' .","title":"Remarks"},{"location":"Literal-Layout-Renderer/#examples","text":"","title":"Examples"},{"location":"Literal-Layout-Renderer/#basic","text":"Configuration: ${literal:text=Some Text with ${ in it} Code: logger.Debug(\"Test Message\") Result: Some Text with ${ in it","title":"Basic"},{"location":"Local-IP-Address-Layout-Renderer/","text":"The local IP address whether IPv4 or IPv6 from NetworkInterface.GetAllNetworkInterfaces Platforms Supported: Limited (Not supported on NetStandard1.3+1.5) Introduced with NLog 4.6.8 Configuration Syntax ${local-ip:addressFamily=InterNetwork} Parameters AddressFamily - Explicitly prioritize IP addresses from a certain AddressFamily (Ex. InterNetwork / InterNetworkV6) Improving Performance The lookup of the active IP-address on the local machine has a performance hit. For better performance then it is recommended to use it with cachedSeconds like this: ${local-ip:cachedSeconds=60}","title":"Local IP Address Layout Renderer"},{"location":"Local-IP-Address-Layout-Renderer/#configuration-syntax","text":"${local-ip:addressFamily=InterNetwork}","title":"Configuration Syntax"},{"location":"Local-IP-Address-Layout-Renderer/#parameters","text":"AddressFamily - Explicitly prioritize IP addresses from a certain AddressFamily (Ex. InterNetwork / InterNetworkV6)","title":"Parameters"},{"location":"Local-IP-Address-Layout-Renderer/#improving-performance","text":"The lookup of the active IP-address on the local machine has a performance hit. For better performance then it is recommended to use it with cachedSeconds like this: ${local-ip:cachedSeconds=60}","title":"Improving Performance"},{"location":"Log-levels/","text":"See Configuration-file","title":"Log levels"},{"location":"Log4JXMLEvent-Layout-Renderer/","text":"XML event description compatible with log4j, Chainsaw and NLogViewer. Platforms Supported: All Notice that Chainsaw-target works as a combined solution for sending Log4j-XML events over TCP / UDP / HTTP. Configuration Syntax ${log4jxmlevent:includeEventProperties=Boolean:includeSourceInfo=Boolean:includeCallSite=Boolean :includeNdc=Boolean:ndcItemSeparator=String:appInfo=String:indentXml=Boolean} Parameters Payload Options appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 4.5 includeSourceInfo - Indicates whether to include source info (file name and line number) in the information sent over the network. Boolean includeCallSite - Indicates whether to include call site (class and method name) in the information sent over the network. Boolean IncludeEventProperties - Include all events properties of a logevent? Default: true . Before NLog 5.0 option was named IncludeAllProperties with Default: false IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: WriteThrowableCData - Write Exception as CDATA in log4j:throwable xml-element (Not supported by all viewers). Default: false Introduced in NLog 5.0 indentXml - Indicates whether to enable XmlWriterSettings.Indent for XML indentation. Default: false . includeNLogData - Indicates whether to include NLog-specific extensions to log4j schema. Default: false . Before NLog 5.0 option had Default: true .","title":"Log4JXMLEvent Layout Renderer"},{"location":"Log4JXMLEvent-Layout-Renderer/#configuration-syntax","text":"${log4jxmlevent:includeEventProperties=Boolean:includeSourceInfo=Boolean:includeCallSite=Boolean :includeNdc=Boolean:ndcItemSeparator=String:appInfo=String:indentXml=Boolean}","title":"Configuration Syntax"},{"location":"Log4JXMLEvent-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Log4JXMLEvent-Layout-Renderer/#payload-options","text":"appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 4.5 includeSourceInfo - Indicates whether to include source info (file name and line number) in the information sent over the network. Boolean includeCallSite - Indicates whether to include call site (class and method name) in the information sent over the network. Boolean IncludeEventProperties - Include all events properties of a logevent? Default: true . Before NLog 5.0 option was named IncludeAllProperties with Default: false IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: WriteThrowableCData - Write Exception as CDATA in log4j:throwable xml-element (Not supported by all viewers). Default: false Introduced in NLog 5.0 indentXml - Indicates whether to enable XmlWriterSettings.Indent for XML indentation. Default: false . includeNLogData - Indicates whether to include NLog-specific extensions to log4j schema. Default: false . Before NLog 5.0 option had Default: true .","title":"Payload Options"},{"location":"Log4JXmlEventLayout/","text":"A specialized layout that renders Log4j-compatible XML events. Platforms Supported: All Notice that Chainsaw-target works as a combined solution for sending Log4j-XML events over TCP / UDP / HTTP. Notice that ${log4jxmlevent} can be used for shorthand-notation (when not needing additional context-parameters) Configuration Syntax <targets> <target xsi:type=\"SomeTarget\"> <layout xsi:type=\"Log4JXmlEventLayout\" includeEventProperties=\"true\"> <parameter name=\"processId\" value=\"${processid}\" /> <!-- Repeated --> </layout> </target> </targets> Parameters appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. Introduced in NLog 5.0 loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 5.0 IncludeEventProperties - Include all events properties of a logevent as log4j:data ? Default: true . Before NLog 5.0 option was named IncludeAllProperties with Default: false IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer as log4j:data . Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: includeSourceInfo - Indicates whether to include source info (file name and line number). Default: false . Introduced in NLog 4.6.5 includeCallSite - Indicates whether to include call site (class and method name). Default: false . Introduced in NLog 4.6.5 includeNLogData - Indicates whether to include NLog-specific extensions to log4j schema. Default: false . Before NLog 5.0 option had Default: true . WriteThrowableCData - Write Exception as CDATA in log4j:throwable xml-element (Not supported by all viewers). Default: false . Introduced in NLog 5.0 parameter - Additional context properties that should be included as log4j:data Introduced in NLog 4.6.4 name - Name of Parameter. Required. layout - The layout for the Parameter-Value. Required.","title":"Log4JXmlEventLayout"},{"location":"Log4JXmlEventLayout/#configuration-syntax","text":"<targets> <target xsi:type=\"SomeTarget\"> <layout xsi:type=\"Log4JXmlEventLayout\" includeEventProperties=\"true\"> <parameter name=\"processId\" value=\"${processid}\" /> <!-- Repeated --> </layout> </target> </targets>","title":"Configuration Syntax"},{"location":"Log4JXmlEventLayout/#parameters","text":"appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. Introduced in NLog 5.0 loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 5.0 IncludeEventProperties - Include all events properties of a logevent as log4j:data ? Default: true . Before NLog 5.0 option was named IncludeAllProperties with Default: false IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer as log4j:data . Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: includeSourceInfo - Indicates whether to include source info (file name and line number). Default: false . Introduced in NLog 4.6.5 includeCallSite - Indicates whether to include call site (class and method name). Default: false . Introduced in NLog 4.6.5 includeNLogData - Indicates whether to include NLog-specific extensions to log4j schema. Default: false . Before NLog 5.0 option had Default: true . WriteThrowableCData - Write Exception as CDATA in log4j:throwable xml-element (Not supported by all viewers). Default: false . Introduced in NLog 5.0 parameter - Additional context properties that should be included as log4j:data Introduced in NLog 4.6.4 name - Name of Parameter. Required. layout - The layout for the Parameter-Value. Required.","title":"Parameters"},{"location":"LogEvent-Context-Information/","text":"Moved to https://github.com/NLog/NLog/wiki/Context","title":"LogEvent Context Information"},{"location":"LogReceiverService-target/","text":"Sends log messages to a NLog Receiver Service (using WCF or Web Services). Platforms Supported: All - Requires nuget-package NLog.Wcf with NLog 5.0 Configuration Syntax <targets> <target xsi:type=\"LogReceiverService\" name=\"String\" endpointConfigurationName=\"String\" endpointAddress=\"String\" useBinaryEncoding=\"Boolean\" clientId=\"Layout\" includeEventProperties=\"Boolean\"> <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Connection Options endpointConfigurationName - Name of the endpoint configuration in WCF configuration file Only supported on .NET Framework platform with app.config . Trying to enable on .NET Core fails with: System.PlatformNotSupportedException: Configuration files are not supported. endpointAddress - Endpoint address. Required. Payload Options useBinaryEncoding - Indicates whether to use binary message encoding. Boolean parameters - The list of parameters. Collection Each collection item is represented by \\ element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. name - Name of the parameter. type - Type of the parameter.System.Type clientId - Client ID. Layout includeEventProperties - Indicates whether to include per-event properties in the payload sent to the server. Boolean Examples Passing Parameters Parameters are passed to the WCF LogReceiverService target using one or more configuration lines such as: <parameter name=\"MyParameter\" layout=\"My Value!\" /> <parameter name=\"nlogdir\" layout=\"${nlogdir}\" /> These parameters are passed over the network to the service and can be accessed by emitting events from your receiver application. Application for receiving events namespace MyLogReceiverApp { using System; using NLog; using NLog.LogReceiverService; /// <summary> /// Log service server object that logs messages. /// </summary> public class LogReceiverServer : ILogReceiverServer { public void ProcessLogMessages(NLogEvents nevents) { var events = nevents.ToEventInfo(\"Client.\"); Console.WriteLine(\"in: {0} {1}\", nevents.Events.Length, events.Count); foreach (var ev in events) { var logger = LogManager.GetLogger(ev.LoggerName); logger.Log(ev); } } } }","title":"LogReceiverService target"},{"location":"LogReceiverService-target/#configuration-syntax","text":"<targets> <target xsi:type=\"LogReceiverService\" name=\"String\" endpointConfigurationName=\"String\" endpointAddress=\"String\" useBinaryEncoding=\"Boolean\" clientId=\"Layout\" includeEventProperties=\"Boolean\"> <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"LogReceiverService-target/#parameters","text":"","title":"Parameters"},{"location":"LogReceiverService-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"LogReceiverService-target/#connection-options","text":"endpointConfigurationName - Name of the endpoint configuration in WCF configuration file Only supported on .NET Framework platform with app.config . Trying to enable on .NET Core fails with: System.PlatformNotSupportedException: Configuration files are not supported. endpointAddress - Endpoint address. Required.","title":"Connection Options"},{"location":"LogReceiverService-target/#payload-options","text":"useBinaryEncoding - Indicates whether to use binary message encoding. Boolean parameters - The list of parameters. Collection Each collection item is represented by \\ element with the following attributes: layout - Layout that should be use to calcuate the value for the parameter. Layout Required. name - Name of the parameter. type - Type of the parameter.System.Type clientId - Client ID. Layout includeEventProperties - Indicates whether to include per-event properties in the payload sent to the server. Boolean","title":"Payload Options"},{"location":"LogReceiverService-target/#examples","text":"","title":"Examples"},{"location":"LogReceiverService-target/#passing-parameters","text":"Parameters are passed to the WCF LogReceiverService target using one or more configuration lines such as: <parameter name=\"MyParameter\" layout=\"My Value!\" /> <parameter name=\"nlogdir\" layout=\"${nlogdir}\" /> These parameters are passed over the network to the service and can be accessed by emitting events from your receiver application.","title":"Passing Parameters"},{"location":"LogReceiverService-target/#application-for-receiving-events","text":"namespace MyLogReceiverApp { using System; using NLog; using NLog.LogReceiverService; /// <summary> /// Log service server object that logs messages. /// </summary> public class LogReceiverServer : ILogReceiverServer { public void ProcessLogMessages(NLogEvents nevents) { var events = nevents.ToEventInfo(\"Client.\"); Console.WriteLine(\"in: {0} {1}\", nevents.Events.Length, events.Count); foreach (var ev in events) { var logger = LogManager.GetLogger(ev.LoggerName); logger.Log(ev); } } } }","title":"Application for receiving events"},{"location":"Logger-Layout-Renderer/","text":"The logger name. Platforms Supported: All Configuration Syntax ${logger:shortName=Boolean} Parameters Rendering Options shortName - Indicates whether to render short logger name (the part after the trailing dot character). Boolean Default: False","title":"Logger Layout Renderer"},{"location":"Logger-Layout-Renderer/#configuration-syntax","text":"${logger:shortName=Boolean}","title":"Configuration Syntax"},{"location":"Logger-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Logger-Layout-Renderer/#rendering-options","text":"shortName - Indicates whether to render short logger name (the part after the trailing dot character). Boolean Default: False","title":"Rendering Options"},{"location":"Logging-Rules-FinalMinLevel/","text":"finalMinLevel is an Logging Rules option has been introduced with NLog ver 5.0. It is conceptually similar to the combination of the maxLevel and final option. The main reason for the finalMinLevel option is to easily silence all noisy loggers from one subcomponent (like Microsoft.* ), while overriding this behavior for a single logger of that subcomponent (like Microsoft.Hosting.Lifetime ). This is similar to how the default logging framework and configuration works in Microsoft Extension Logging. finalMinLevel is intended for configurations that have a catch-all logger at the bottom. Here's a small example to start with: if logs coming from Microsoft.* should only be logged if the log level is Warn or higher, and all other logs should be logged if the level is Info or higher, then the following configuration could be used: <rules> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"console\" /> </rules> This can also be implemented using maxLevel and final in NLog v4: <rules> <logger name=\"Microsoft.*\" maxLevel=\"Info\" final=\"true\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"console\" /> </rules> In both examples, the first rule is a \"black hole\" that swallows the applicable logs. Also keep in mind that the order of loggers is always very important. The advantage of finalMinLevel is that it is easier to read, comprehend and reduces the configuration required, especially with more complex configurations. Additionally, it allows overriding previous finalMinLevel filters, such a pattern is not possible otherwise. Levels The following table describes which log levels are enabled depending on the finalMinLevel value: FinalMinLevel Enabled log levels Trace Trace, Debug, Info, Warn, Error and Fatal Debug Debug, Info, Warn, Error and Fatal Info Info, Warn, Error and Fatal Warn Warn, Error and Fatal Error Error and Fatal Fatal Fatal Overrides As mentioned before, finalMinLevel can override previous rules. For example, if we want Warn logs of higher from Microsoft.* , but Info logs or higher from Microsoft.Hosting.Lifetime , then this is a possible configuration: <rules> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"console\" /> </rules> Keep in mind that the order is still important. If the \"Microsoft.* and Microsoft.Hosting.Lifetime* were reversed, then Microsoft.* would override Microsoft.Hosting.Lifetime* and both would be set to Warn . Microsoft Extensions Logging Filters The Microsoft Logging filters specified in appsettings.json are ignored by default when using NLog 5.0. This is to avoid that new users think NLog Logging Rules are not working, because Microsoft LoggerFactory filters are interfering. The default logging logging configuration in appsettings.json : { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } } } Can be configured through NLog.config like this: <rules> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"console\" /> </rules> Notice that the logger named Microsoft.Hosting.Lifetime* overrides the Microsoft.* logger. See also ASP.NET Core with NLog Tutorial Complete example This example also filters logs from System.* and separates informative logs and error logs between the stdout and stderr output streams. It is a good configuration for new ASP.NET projects. <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"stdout\" xsi:type=\"Console\" /> <target name=\"stderr\" xsi:type=\"Console\" error=\"true\" /> </targets> <rules> <logger name=\"System.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minLevel=\"Info\" maxLevel=\"Warn\" writeTo=\"stdout\" /> <logger name=\"*\" minLevel=\"Error\" writeTo=\"stderr\" /> </rules> </nlog> FinalMinLevel in combination with minLevel It can be useful to combine finalMinLevel with MinLevel . Suppose there's a sub-module RequestLogger that should have its own dedicated log-target, but at the same time all Error or higher logs should flow to the catch-all log-target. This can be achieved through: <logger name=\"RequestLogger\" minLevel=\"Debug\" writeTo=\"requestTarget\" finalMinLevel=\"Error\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"catchAllTarget\" /> It can also be configured like this if using NLog v4: <logger name=\"RequestLogger\" minLevel=\"Debug\" writeTo=\"requestTarget\" /> <logger name=\"RequestLogger\" maxLevel=\"Warn\" final=\"true\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"catchAllTarget\" /> All logs coming from RequestLogger with a level between Debug and higher will be logged to requestTarget . All other logs with a level Info or higher will be logged to catchAllTarget , including Error and Fatal logs from RequestLogger .","title":"Logging Rules FinalMinLevel"},{"location":"Logging-Rules-FinalMinLevel/#levels","text":"The following table describes which log levels are enabled depending on the finalMinLevel value: FinalMinLevel Enabled log levels Trace Trace, Debug, Info, Warn, Error and Fatal Debug Debug, Info, Warn, Error and Fatal Info Info, Warn, Error and Fatal Warn Warn, Error and Fatal Error Error and Fatal Fatal Fatal","title":"Levels"},{"location":"Logging-Rules-FinalMinLevel/#overrides","text":"As mentioned before, finalMinLevel can override previous rules. For example, if we want Warn logs of higher from Microsoft.* , but Info logs or higher from Microsoft.Hosting.Lifetime , then this is a possible configuration: <rules> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"console\" /> </rules> Keep in mind that the order is still important. If the \"Microsoft.* and Microsoft.Hosting.Lifetime* were reversed, then Microsoft.* would override Microsoft.Hosting.Lifetime* and both would be set to Warn .","title":"Overrides"},{"location":"Logging-Rules-FinalMinLevel/#microsoft-extensions-logging-filters","text":"The Microsoft Logging filters specified in appsettings.json are ignored by default when using NLog 5.0. This is to avoid that new users think NLog Logging Rules are not working, because Microsoft LoggerFactory filters are interfering. The default logging logging configuration in appsettings.json : { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } } } Can be configured through NLog.config like this: <rules> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"console\" /> </rules> Notice that the logger named Microsoft.Hosting.Lifetime* overrides the Microsoft.* logger. See also ASP.NET Core with NLog Tutorial","title":"Microsoft Extensions Logging Filters"},{"location":"Logging-Rules-FinalMinLevel/#complete-example","text":"This example also filters logs from System.* and separates informative logs and error logs between the stdout and stderr output streams. It is a good configuration for new ASP.NET projects. <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"stdout\" xsi:type=\"Console\" /> <target name=\"stderr\" xsi:type=\"Console\" error=\"true\" /> </targets> <rules> <logger name=\"System.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.*\" finalMinLevel=\"Warn\" /> <logger name=\"Microsoft.Hosting.Lifetime*\" finalMinLevel=\"Info\" /> <logger name=\"*\" minLevel=\"Info\" maxLevel=\"Warn\" writeTo=\"stdout\" /> <logger name=\"*\" minLevel=\"Error\" writeTo=\"stderr\" /> </rules> </nlog>","title":"Complete example"},{"location":"Logging-Rules-FinalMinLevel/#finalminlevel-in-combination-with-minlevel","text":"It can be useful to combine finalMinLevel with MinLevel . Suppose there's a sub-module RequestLogger that should have its own dedicated log-target, but at the same time all Error or higher logs should flow to the catch-all log-target. This can be achieved through: <logger name=\"RequestLogger\" minLevel=\"Debug\" writeTo=\"requestTarget\" finalMinLevel=\"Error\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"catchAllTarget\" /> It can also be configured like this if using NLog v4: <logger name=\"RequestLogger\" minLevel=\"Debug\" writeTo=\"requestTarget\" /> <logger name=\"RequestLogger\" maxLevel=\"Warn\" final=\"true\" /> <logger name=\"*\" minLevel=\"Info\" writeTo=\"catchAllTarget\" /> All logs coming from RequestLogger with a level between Debug and higher will be logged to requestTarget . All other logs with a level Info or higher will be logged to catchAllTarget , including Error and Fatal logs from RequestLogger .","title":"FinalMinLevel in combination with minLevel"},{"location":"Logging-Troubleshooting/","text":"Possible causes When you get no log output from NLog, then you should check these normal pitfalls: 1. NLog cannot find the configuration file. Ensure NLog.config is has Build Action = Content and Copy to Output Directory = Copy if newer in Visual Studio. 2. Is your configuration file valid XML? 3. Logging rules are incorrect or no rules are defined 4. Forgettting to call NLog.LogManager.Shutdown() before application exits, so targets are not flushed correctly . 4. Application tracing code is incorrect (Ex. LogLevel too low) 5. There is a runtime problem with the target (such as missing permissions) 6. Logs are written to a different location. Troubleshooting steps When the checkpoints listed above doesn't resolve the issue, then one can try these troubleshooting steps: The first step is to make sure that NLog finds your config file. It is recommended to use NLog.config located in the same directory as your application, but NLog does scan multiple file locations (See also NLog Configuration ). Once you've made sure that the configuration file is there, proceed to the next step. If nlog.config file is configured with Build Action = None or Copy to Output Directory = Do not copy in Visual Studio. Then fix it and set Build Action = Content and Copy to Output Directory = Copy if newer . If running on Linux, then make sure to use nlog.config in all lowercase, because of case-sensitive filenames. There are nuget-packages that automatically update Web.config / App.config /etc. which can overwrite the custom NLog-configuration. Do NOT use the NLog.Config -nuget-package, as it can reset nlog.config on application-deployment. If not having issues with finding NLog.config , then include the xml-attribute throwConfigExceptions=\"true\" for the NLog.config . This will ensure NLog will \"explode\" when something is wrong with loading the NLog.config (Also invalid XML): <nlog throwConfigExceptions=\"true\"> <targets> ... </targets> <rules> ... </rules> </nlog> If the problem is not loading an invalid NLog.config, then activate the NLog InternalLogger and check for issues when loading the NLog.config and writing to the targets. This will output all events happening while loading the NLog.config : NLog InternalLogger can tell you if you have permissions issues so it cannot write to the wanted location. <nlog internalLogLevel=\"Debug\" internalLogFile=\"c:\\temp\\nlog-internal.txt\" internalLogToConsole=\"true\" throwConfigExceptions=\"true\"> <targets> ... </targets> <rules> ... </rules> </nlog> If the NLog InternalLogger is not producing any output, then you are most likely having issues with loading the NLog.config. Instead you can activate the NLog InternalLogger within the application to see any errors when loading NLog.config. The Configuration is read when you create your first Logger, so make sure to enable the InternalLogger before having initialized any static Logger objects: class Program { // Make sure to comment out static Logger-objects, or else InternalLogger will not work // readonly static Logger = LogManager.GetCurrentClassLogger(); static void Main() { NLog.Common.InternalLogger.LogLevel = NLog.LogLevel.Debug; NLog.Common.InternalLogger.LogToConsole = true; NLog.Common.InternalLogger.LogFile = @\"c:\\temp\\nlog-internal.txt\"; // On Linux one can use \"/home/nlog-internal.txt\" Logger logger = LogManager.GetLogger(\"foo\"); logger.Info(\"Program started\"); LogManager.Shutdown(); // Remember to flush } } To eliminate the possibility that your logging rules are incorrect, add the rule which matches all loggers and all levels at the beginning of your <rules> section. Also ensure that an explicit flush is made before application shutdown, in case NLog target is having delays in network communication. Ex. by calling NLog.LogManager.Shutdown() . <nlog throwExceptions=\"true\"> <targets> <target name=\"file\" type=\"File\" fileName=\"${basedir}/log.txt\" /> </targets> <rules> <logger name=\"*\" minLevel=\"Trace\" writeTo=\"{all target names separated by comma}\" /> </rules> </nlog> Last resort when all other steps fail then you can try to enable LogManager.ThrowExceptions . It is only intended for unit-testing, and it can have unwanted side-effects like unwanted application crashes. So make sure to turn it off again when done with troubleshooting: > \u26a0\ufe0f If having throwExceptions=\"true\" enabled already, then it can be the cause of NLog is not working. The throwExceptions=\"true\" is intended for unit-testing of NLog itself, and will prevent NLog from doing self-recovery after failure, and should never be used in production environment. class Program { // Make sure to comment out static Logger-objects, or else InternalLogger will not work // readonly static Logger = LogManager.GetCurrentClassLogger(); static void Main() { NLog.LogManager.ThrowExceptions = true; // TODO Remove this when done trouble-shooting NLog.Common.InternalLogger.LogLevel = LogLevel.Debug; NLog.Common.InternalLogger.LogToConsole = true; NLog.Common.InternalLogger.LogFile = \"c:\\temp\\nlog-internal.txt\"; // On Linux one can use \"/home/nlog-internal.txt\" Logger logger = LogManager.GetLogger(\"foo\"); logger.Info(\"Program started\"); LogManager.Shutdown(); // Remember to flush } } If after following steps 1..6 you still don't see your log messages - there is another possibility: your log files may be written to a different location. If you don't use a fully qualified name of the file (such as c:\\logs\\log.txt, or ${basedir}\\log.txt your logs may be written to the working directory, which is not necessarily the same directory as where the application resides. Internal Logging NLog has its own internal logging system which can be used to troubleshoot problems with log routing and configuration. The simplest way to enable is to add the following attributes to your configuration file: internalLogFile=\"c:\\path\\to\\nlog-internal.txt\" - specifies the location of the internal log file internalLogLevel=\"Trace\" specifies the level of detail of information written to the internal log file internalLogToConsole=\"true\" writes internal log to the console output More ways to enable internal logging are explained here . Other troubleshooting tools and techniques You may use a tracing application such as Process Monitor from SysInternals to monitor file activity in your system. This should give you an idea of what files are being read and written and their exact locations. Process Explorer is another indispensable utility which can help with investigation of various system-level issues, such as permissions, threading, deadlocks, performance, etc.","title":"Logging Troubleshooting"},{"location":"Logging-Troubleshooting/#possible-causes","text":"When you get no log output from NLog, then you should check these normal pitfalls: 1. NLog cannot find the configuration file. Ensure NLog.config is has Build Action = Content and Copy to Output Directory = Copy if newer in Visual Studio. 2. Is your configuration file valid XML? 3. Logging rules are incorrect or no rules are defined 4. Forgettting to call NLog.LogManager.Shutdown() before application exits, so targets are not flushed correctly . 4. Application tracing code is incorrect (Ex. LogLevel too low) 5. There is a runtime problem with the target (such as missing permissions) 6. Logs are written to a different location.","title":"Possible causes"},{"location":"Logging-Troubleshooting/#troubleshooting-steps","text":"When the checkpoints listed above doesn't resolve the issue, then one can try these troubleshooting steps: The first step is to make sure that NLog finds your config file. It is recommended to use NLog.config located in the same directory as your application, but NLog does scan multiple file locations (See also NLog Configuration ). Once you've made sure that the configuration file is there, proceed to the next step. If nlog.config file is configured with Build Action = None or Copy to Output Directory = Do not copy in Visual Studio. Then fix it and set Build Action = Content and Copy to Output Directory = Copy if newer . If running on Linux, then make sure to use nlog.config in all lowercase, because of case-sensitive filenames. There are nuget-packages that automatically update Web.config / App.config /etc. which can overwrite the custom NLog-configuration. Do NOT use the NLog.Config -nuget-package, as it can reset nlog.config on application-deployment. If not having issues with finding NLog.config , then include the xml-attribute throwConfigExceptions=\"true\" for the NLog.config . This will ensure NLog will \"explode\" when something is wrong with loading the NLog.config (Also invalid XML): <nlog throwConfigExceptions=\"true\"> <targets> ... </targets> <rules> ... </rules> </nlog> If the problem is not loading an invalid NLog.config, then activate the NLog InternalLogger and check for issues when loading the NLog.config and writing to the targets. This will output all events happening while loading the NLog.config : NLog InternalLogger can tell you if you have permissions issues so it cannot write to the wanted location. <nlog internalLogLevel=\"Debug\" internalLogFile=\"c:\\temp\\nlog-internal.txt\" internalLogToConsole=\"true\" throwConfigExceptions=\"true\"> <targets> ... </targets> <rules> ... </rules> </nlog> If the NLog InternalLogger is not producing any output, then you are most likely having issues with loading the NLog.config. Instead you can activate the NLog InternalLogger within the application to see any errors when loading NLog.config. The Configuration is read when you create your first Logger, so make sure to enable the InternalLogger before having initialized any static Logger objects: class Program { // Make sure to comment out static Logger-objects, or else InternalLogger will not work // readonly static Logger = LogManager.GetCurrentClassLogger(); static void Main() { NLog.Common.InternalLogger.LogLevel = NLog.LogLevel.Debug; NLog.Common.InternalLogger.LogToConsole = true; NLog.Common.InternalLogger.LogFile = @\"c:\\temp\\nlog-internal.txt\"; // On Linux one can use \"/home/nlog-internal.txt\" Logger logger = LogManager.GetLogger(\"foo\"); logger.Info(\"Program started\"); LogManager.Shutdown(); // Remember to flush } } To eliminate the possibility that your logging rules are incorrect, add the rule which matches all loggers and all levels at the beginning of your <rules> section. Also ensure that an explicit flush is made before application shutdown, in case NLog target is having delays in network communication. Ex. by calling NLog.LogManager.Shutdown() . <nlog throwExceptions=\"true\"> <targets> <target name=\"file\" type=\"File\" fileName=\"${basedir}/log.txt\" /> </targets> <rules> <logger name=\"*\" minLevel=\"Trace\" writeTo=\"{all target names separated by comma}\" /> </rules> </nlog> Last resort when all other steps fail then you can try to enable LogManager.ThrowExceptions . It is only intended for unit-testing, and it can have unwanted side-effects like unwanted application crashes. So make sure to turn it off again when done with troubleshooting: > \u26a0\ufe0f If having throwExceptions=\"true\" enabled already, then it can be the cause of NLog is not working. The throwExceptions=\"true\" is intended for unit-testing of NLog itself, and will prevent NLog from doing self-recovery after failure, and should never be used in production environment. class Program { // Make sure to comment out static Logger-objects, or else InternalLogger will not work // readonly static Logger = LogManager.GetCurrentClassLogger(); static void Main() { NLog.LogManager.ThrowExceptions = true; // TODO Remove this when done trouble-shooting NLog.Common.InternalLogger.LogLevel = LogLevel.Debug; NLog.Common.InternalLogger.LogToConsole = true; NLog.Common.InternalLogger.LogFile = \"c:\\temp\\nlog-internal.txt\"; // On Linux one can use \"/home/nlog-internal.txt\" Logger logger = LogManager.GetLogger(\"foo\"); logger.Info(\"Program started\"); LogManager.Shutdown(); // Remember to flush } } If after following steps 1..6 you still don't see your log messages - there is another possibility: your log files may be written to a different location. If you don't use a fully qualified name of the file (such as c:\\logs\\log.txt, or ${basedir}\\log.txt your logs may be written to the working directory, which is not necessarily the same directory as where the application resides.","title":"Troubleshooting steps"},{"location":"Logging-Troubleshooting/#internal-logging","text":"NLog has its own internal logging system which can be used to troubleshoot problems with log routing and configuration. The simplest way to enable is to add the following attributes to your configuration file: internalLogFile=\"c:\\path\\to\\nlog-internal.txt\" - specifies the location of the internal log file internalLogLevel=\"Trace\" specifies the level of detail of information written to the internal log file internalLogToConsole=\"true\" writes internal log to the console output More ways to enable internal logging are explained here .","title":"Internal Logging"},{"location":"Logging-Troubleshooting/#other-troubleshooting-tools-and-techniques","text":"You may use a tracing application such as Process Monitor from SysInternals to monitor file activity in your system. This should give you an idea of what files are being read and written and their exact locations. Process Explorer is another indispensable utility which can help with investigation of various system-level issues, such as permissions, threading, deadlocks, performance, etc.","title":"Other troubleshooting tools and techniques"},{"location":"Longdate-Layout-Renderer/","text":"The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.ffff . Platforms Supported: All Alternative ${date:format=yyyy-MM-dd_HH} can be used to customize the DateTime-format. Configuration Syntax ${longdate:universalTime=Boolean} Parameters Rendering Options universalTime - Indicates whether to output UTC time instead of local time.Boolean Default: False","title":"Longdate Layout Renderer"},{"location":"Longdate-Layout-Renderer/#configuration-syntax","text":"${longdate:universalTime=Boolean}","title":"Configuration Syntax"},{"location":"Longdate-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Longdate-Layout-Renderer/#rendering-options","text":"universalTime - Indicates whether to output UTC time instead of local time.Boolean Default: False","title":"Rendering Options"},{"location":"Lowercase-Layout-Renderer/","text":"Converts the result of another layout output to lower case. Platforms Supported: All Configuration Syntax ${lowercase:lowercase=Boolean:inner=Layout:culture=Culture} or by using ambient property to modify output of other layout renderer: ${other:lowercase=Boolean} Parameters Transformation Options lowercase - Indicates whether lower case conversion should be applied. Boolean Default: True. Required when using as ambient. inner - Wrapped layout. Layout culture - Culture used for rendering. Culture Examples ${lowercase:${level}} ${lowercase:Inner=${level}} ${level:lowercase=true}","title":"Lowercase Layout Renderer"},{"location":"Lowercase-Layout-Renderer/#configuration-syntax","text":"${lowercase:lowercase=Boolean:inner=Layout:culture=Culture} or by using ambient property to modify output of other layout renderer: ${other:lowercase=Boolean}","title":"Configuration Syntax"},{"location":"Lowercase-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Lowercase-Layout-Renderer/#transformation-options","text":"lowercase - Indicates whether lower case conversion should be applied. Boolean Default: True. Required when using as ambient. inner - Wrapped layout. Layout culture - Culture used for rendering. Culture","title":"Transformation Options"},{"location":"Lowercase-Layout-Renderer/#examples","text":"${lowercase:${level}} ${lowercase:Inner=${level}} ${level:lowercase=true}","title":"Examples"},{"location":"MDC-Layout-Renderer/","text":"Mapped Diagnostics Context (MDC) - a thread-local structure that keeps a dictionary of strings and provides methods to output them in layouts. Platforms Supported: All (NLog 4.1 supports any Object type, not just String ) NLog 5.0 introduces ScopeContext that unifies MDLC + MDC into a single context. MDC is considered legacy, and instead is recommended to use MDLC that includes support for async Tasks. See also NLog Context Configuration Syntax ${mdc:item=String} Parameters Rendering Options item - Name of the item. Required. Note : case sensitive! Example Simple Properties The following example demonstrates the basic usage of the Mapped Diagnostics Context. MappedDiagnosticsContext.Set(\"PropertyName\", \"PropertyValue\"); MappedDiagnosticsContext.Set(\"Property2\", new { Part1 = 2.0m, Part2 = \"Two parts\" }); MappedDiagnosticsContext.Set(\"Property3\", AnyObjectOrString); Add the following to your logger configuration to reference the above properties. ${mdc:item=PropertyName} ${mdc:item=Property2} ${mdc:item=Property3} Dynamic Properties The following example demonstrates a Mapped Diagnostics Context property that renders the value of Environment.TickCount at the time that the context item is rendered. public class MdcTickProperty { public static readonly MdcTickProperty Default = new MdcTickProperty(); private MdcTickProperty () { } public override string ToString () { return Environment.TickCount.ToString(); } } Add the MdcTickProperty instance to the Mapped Diagnostics Context. This will only affect the current thread, as the Mapped Diagnostics Context is thread-local. MappedDiagnosticsContext.Set(\"TickCount\", MdcTickProperty.Default); In the logging configuration, include: ${mdc:item=TickCount} Scoped item The SetScoped method returns an IDisposable that removes the added item when disposed. It can be used in conjunction with the using statement to limit the scope during which the item will be present in the context. using (MappedDiagnosticsContext.SetScoped(\"Property\", \"PropertyValue\")) { // \"Property\" item is present in current context } // \"Property\" item has been removed from current context Notes When rendering context items, the item is passed to String.Format along with the current configuration's DefaultCultureInfo value.","title":"MDC Layout Renderer"},{"location":"MDC-Layout-Renderer/#configuration-syntax","text":"${mdc:item=String}","title":"Configuration Syntax"},{"location":"MDC-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"MDC-Layout-Renderer/#rendering-options","text":"item - Name of the item. Required. Note : case sensitive!","title":"Rendering Options"},{"location":"MDC-Layout-Renderer/#example","text":"","title":"Example"},{"location":"MDC-Layout-Renderer/#simple-properties","text":"The following example demonstrates the basic usage of the Mapped Diagnostics Context. MappedDiagnosticsContext.Set(\"PropertyName\", \"PropertyValue\"); MappedDiagnosticsContext.Set(\"Property2\", new { Part1 = 2.0m, Part2 = \"Two parts\" }); MappedDiagnosticsContext.Set(\"Property3\", AnyObjectOrString); Add the following to your logger configuration to reference the above properties. ${mdc:item=PropertyName} ${mdc:item=Property2} ${mdc:item=Property3}","title":"Simple Properties"},{"location":"MDC-Layout-Renderer/#dynamic-properties","text":"The following example demonstrates a Mapped Diagnostics Context property that renders the value of Environment.TickCount at the time that the context item is rendered. public class MdcTickProperty { public static readonly MdcTickProperty Default = new MdcTickProperty(); private MdcTickProperty () { } public override string ToString () { return Environment.TickCount.ToString(); } } Add the MdcTickProperty instance to the Mapped Diagnostics Context. This will only affect the current thread, as the Mapped Diagnostics Context is thread-local. MappedDiagnosticsContext.Set(\"TickCount\", MdcTickProperty.Default); In the logging configuration, include: ${mdc:item=TickCount}","title":"Dynamic Properties"},{"location":"MDC-Layout-Renderer/#scoped-item","text":"The SetScoped method returns an IDisposable that removes the added item when disposed. It can be used in conjunction with the using statement to limit the scope during which the item will be present in the context. using (MappedDiagnosticsContext.SetScoped(\"Property\", \"PropertyValue\")) { // \"Property\" item is present in current context } // \"Property\" item has been removed from current context","title":"Scoped item"},{"location":"MDC-Layout-Renderer/#notes","text":"When rendering context items, the item is passed to String.Format along with the current configuration's DefaultCultureInfo value.","title":"Notes"},{"location":"MDLC-Layout-Renderer/","text":"Mapped Diagnostic Logical Context (MDLC) acts like a dictionary of named properties with values, that are stored in an Async-Local structure (Similar to \"Thread Context Map\" in Log4j). It is the async version of MDC Layout Renderer . Platforms Supported: All Introduced with NLog 4.1 (NLog 4.1.1 add support for any Object type, not just String ) NLog 5.0 introduces ScopeContext that unifies MDLC + MDC into a single context. It enables one to assign one or more named properties to the active scope (Ex. a request CorrelationId). Then all logger-events created within the scoped logical context, can automatically capture the scope-properties without needing to specify it with each LogEvent. The specified scope properties will automatically flow together with async Tasks. See also NLog Context . Configuration Syntax ${mdlc:item=String} Parameters Rendering Options item - Name of the item. Required. Note : case sensitive! Example Simple Properties The following example demonstrates the basic usage of the Mapped Diagnostic Logical Context. MappedDiagnosticsLogicalContext.Set(\"PropertyName\", \"PropertyValue\"); MappedDiagnosticsLogicalContext.Set(\"PropertyName2\", \"AnotherPropertyValue\"); Add the following to your logger configuration to reference the above properties. ${mdlc:item=PropertyName} ${mdlc:item=PropertyName2} Scoped item The SetScoped method returns an IDisposable that removes the added item when disposed. It can be used in conjunction with the using statement to limit the scope during which the item will be present in the context. using (MappedDiagnosticsLogicalContext.SetScoped(\"Property\", \"PropertyValue\")) { // \"Property\" item is present in current context } // \"Property\" item has been removed from current context .NET Core logging When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : //note: render userId via ${mdlc:userid} using (_logger.BeginScope(new[] { new KeyValuePair<string, object>(\"userid\", request.UserId) })) { _logger.LogDebug(\"Start process {ProccessName}, \"Main\"); }","title":"MDLC Layout Renderer"},{"location":"MDLC-Layout-Renderer/#configuration-syntax","text":"${mdlc:item=String}","title":"Configuration Syntax"},{"location":"MDLC-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"MDLC-Layout-Renderer/#rendering-options","text":"item - Name of the item. Required. Note : case sensitive!","title":"Rendering Options"},{"location":"MDLC-Layout-Renderer/#example","text":"","title":"Example"},{"location":"MDLC-Layout-Renderer/#simple-properties","text":"The following example demonstrates the basic usage of the Mapped Diagnostic Logical Context. MappedDiagnosticsLogicalContext.Set(\"PropertyName\", \"PropertyValue\"); MappedDiagnosticsLogicalContext.Set(\"PropertyName2\", \"AnotherPropertyValue\"); Add the following to your logger configuration to reference the above properties. ${mdlc:item=PropertyName} ${mdlc:item=PropertyName2}","title":"Simple Properties"},{"location":"MDLC-Layout-Renderer/#scoped-item","text":"The SetScoped method returns an IDisposable that removes the added item when disposed. It can be used in conjunction with the using statement to limit the scope during which the item will be present in the context. using (MappedDiagnosticsLogicalContext.SetScoped(\"Property\", \"PropertyValue\")) { // \"Property\" item is present in current context } // \"Property\" item has been removed from current context","title":"Scoped item"},{"location":"MDLC-Layout-Renderer/#net-core-logging","text":"When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : //note: render userId via ${mdlc:userid} using (_logger.BeginScope(new[] { new KeyValuePair<string, object>(\"userid\", request.UserId) })) { _logger.LogDebug(\"Start process {ProccessName}, \"Main\"); }","title":".NET Core logging"},{"location":"MSMQ-target/","text":"Writes log message to the specified message queue handled by MSMQ. Platforms Supported: Limited - .NET Framework only and requires nuget-package NLog.MSMQ Configuration Syntax <targets> <target xsi:type=\"MSMQ\" name=\"String\" useXmlEncoding=\"Boolean\" encoding=\"Encoding\" layout=\"Layout\" recoverable=\"Boolean\" createQueueIfNotExists=\"Boolean\" checkIfQueueExists=\"Boolean\" label=\"Layout\" queue=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters name - Name of the target. useXmlEncoding - Indicates whether to use the XML format when serializing message. Boolean Default: False encoding - Encoding to be used when writing text to the queue. Encoding layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} Queue Options: * queue - Name of the queue to write to. Layout Required . To write to a private queue on a local machine use .\\private$\\QueueName. For other available queue names, consult MSMQ documentation. recoverable - Indicates whether to use recoverable messages (with guaranteed delivery). Boolean Default: False createQueueIfNotExists - Indicates whether to create the queue if it doesn't exists. Won't do anything when checkIfQueueExists is false. Boolean Default: False checkIfQueueExists - If false, won't check for the existence of the queue. This is sometimes needed for private remote queues (where the .exists would throw an Exception). Boolean Default: True label - Label to associate with each message. Layout Default: \"NLog\" Notes The MSMQ target requires that: * Installing Nuget-package NLog.MSMQ (Before NLog 5.0 it was NLog.Extended ) * The machine doing the logging have MSMQ installed with the Active Directory Domain Services Integration option. If the option is not installed, the target will throw an exception. * The queue being written to is NOT transactional.","title":"MSMQ target"},{"location":"MSMQ-target/#configuration-syntax","text":"<targets> <target xsi:type=\"MSMQ\" name=\"String\" useXmlEncoding=\"Boolean\" encoding=\"Encoding\" layout=\"Layout\" recoverable=\"Boolean\" createQueueIfNotExists=\"Boolean\" checkIfQueueExists=\"Boolean\" label=\"Layout\" queue=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"MSMQ-target/#parameters","text":"name - Name of the target. useXmlEncoding - Indicates whether to use the XML format when serializing message. Boolean Default: False encoding - Encoding to be used when writing text to the queue. Encoding layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} Queue Options: * queue - Name of the queue to write to. Layout Required . To write to a private queue on a local machine use .\\private$\\QueueName. For other available queue names, consult MSMQ documentation. recoverable - Indicates whether to use recoverable messages (with guaranteed delivery). Boolean Default: False createQueueIfNotExists - Indicates whether to create the queue if it doesn't exists. Won't do anything when checkIfQueueExists is false. Boolean Default: False checkIfQueueExists - If false, won't check for the existence of the queue. This is sometimes needed for private remote queues (where the .exists would throw an Exception). Boolean Default: True label - Label to associate with each message. Layout Default: \"NLog\"","title":"Parameters"},{"location":"MSMQ-target/#notes","text":"The MSMQ target requires that: * Installing Nuget-package NLog.MSMQ (Before NLog 5.0 it was NLog.Extended ) * The machine doing the logging have MSMQ installed with the Active Directory Domain Services Integration option. If the option is not installed, the target will throw an exception. * The queue being written to is NOT transactional.","title":"Notes"},{"location":"Machinename-Layout-Renderer/","text":"The NetBIOS Machine name that the process is running on. Platforms Supported: All Configuration Syntax ${machinename} Remarks NetBIOS name is limited to MAX_COMPUTERNAME_LENGTH which is 15 for Windows. ${hostname} has support for the full DNS-name.","title":"Machinename Layout Renderer"},{"location":"Machinename-Layout-Renderer/#configuration-syntax","text":"${machinename}","title":"Configuration Syntax"},{"location":"Machinename-Layout-Renderer/#remarks","text":"NetBIOS name is limited to MAX_COMPUTERNAME_LENGTH which is 15 for Windows. ${hostname} has support for the full DNS-name.","title":"Remarks"},{"location":"Mail-target/","text":"Sends log messages by email using SMTP protocol. Platforms Supported: Limited (Not available for NetStandard1.3+1.5 must use MailKit ) Combines well with FallbackGroup Target in order to create a fallback with multiple SMTP Hosts, example see here . Configuration Syntax <targets> <target xsi:type=\"Mail\" name=\"String\" header=\"Layout\" footer=\"Layout\" layout=\"Layout\" html=\"Boolean\" addNewLines=\"Boolean\" replaceNewlineWithBrTagInHtml=\"Boolean\" encoding=\"Encoding\" subject=\"Layout\" to=\"Layout\" bcc=\"Layout\" cc=\"Layout\" from=\"Layout\" body=\"Layout\" smtpUserName=\"Layout\" enableSsl=\"Boolean\" secureSocketOption=\"None|Auto|SslOnConnect|StartTls|StartTlsWhenAvailable\"* smtpPassword=\"Layout\" smtpAuthentication=\"Enum\" smtpServer=\"Layout\" smtpPort=\"Integer\" useSystemNetMailSettings=\"Boolean\" deliveryMethod=\"Enum\" pickupDirectoryLocation=\"String\" timeout=\"Integer\" skipCertificateValidation=\"Boolean\" priority=\"Layout\"> <mailheader name=\"header-name\" layout=\"header-value\" /> <!-- repeatable --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options header - Header for the message-body. Layout footer - Footer for the message-body. Layout layout - Text to be rendered for message-body. Layout Required. Default: ${message}${newline} . html - Indicates whether to send message as HTML instead of plain text. Boolean Default: false addNewLines - Indicates whether to add new lines between log entries. Boolean replaceNewlineWithBrTagInHtml - Indicates whether NewLine characters in the body should be replaced with <br/> tags. Boolean Default: false encoding - Encoding to be used for sending e-mail. Encoding Default: UTF-8 Message Options subject - Mail subject. Layout Required. Default: Message from NLog on ${machinename} to - Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). Layout . Starting in NLog 4.0 this field is no longer required, but To, BCC or CC should be defined otherwise an exception is thrown. bcc - BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). Layout cc - CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). Layout from - Sender's email address (e.g. joe@domain.com). Layout Required. body - Same as Layout property. Mail message body (repeated for each log message send in one mail). Layout Default: ${message}${newline} priority - The mail message priority. When using NLog without NLog.MailKit package, use System.Net.Mail.MailPriority. Low , Normal , High . When using Nlog + NLog.MailKit versions up to v3.1, the valid values are MimeKit.MessagePriority. NonUrgent , Normal , Urgent NLog.MailKit v3.2 and above accepts NonUrgent / Low , Normal , Urgent / High for backward compatibility SMTP Options smtpUserName - Username used to connect to SMTP server (used when SmtpAuthentication is set to \"basic\"). Layout enableSsl - Indicates whether SSL (secure sockets layer) should be used when communicating with SMTP server. Boolean Default: False. Note: port 465 only works with SSL if NLog.MailKit is used. See issue 1226 secureSocketOption - Only in NLog.Mailkit 2.1+. Provides a way of specifying the SSL and/or TLS encryption. Default StartTlsWhenAvailable. Options: None, Auto, SslOnConnect, StartTls & StartTlsWhenAvailable. If enableSsl is set to true , SslOnConnect will be used smtpPassword - Password used to authenticate against SMTP server (used when SmtpAuthentication is set to \"basic\"). Layout smtpAuthentication - SMTP Authentication mode. Default: None Possible values: Basic - Basic - username and password. None - No authentication. Ntlm - NTLM Authentication using network credentials of user currently logged on (Same as SmtpClient.UseDefaultCredentials = true ) smtpServer - SMTP Server to be used for sending. Layout Required. smtpPort - Port number that SMTP Server is listening on. Integer Default: 25. Note: port 465 isn't working with SSL. See issue 1226 useSystemNetMailSettings - Force using smtp configuration from system.net/mailSettings. Boolean Default: False timeout - Indicates the SMTP client timeout in milliseconds. Integer Default: 10000 (10 seconds) pickupDirectoryLocation - Gets or sets the folder where applications save mail messages to be processed by the local SMTP server ( introduced in NLog 4.2 ). deliveryMethod - Specifies how outgoing email messages will be handled ( introduced in NLog 4.2 ). Default: Network Possible values: Network - Email is sent through the network to an SMTP server. PickupDirectoryFromIis - Email is copied to the pickup directory used by a local Internet Information Services (IIS) for delivery. SpecifiedPickupDirectory - Email is copied to the directory specified by the PickupDirectoryLocation property for delivery by an external application. skipCertificateValidation - Only for NLog.MailKit. Introduced in NLog.MailKit 1.1 - skip SSL certification check mailheader - Specify one or more email-message-headers (Ex. Message-Id ) Introduced with NLog v5.1.3 Remarks .NET Standard 1.x / MailKit package The SmtpClient is not part of .NET Standard 1.x. Also notice that the original SmtpClient of .NET is obsolete in favor of MailKit: The NLog.MailKit is the Mail target implementation which uses MailKit. Including the NLog.MailKit package will replace the original mail target and has the same options as the original mail target Install-Package NLog.MailKit or use <PackageReference Include=\"NLog.MailKit\" Version=\"3.0.0\" /> And add to your nlog.config: <nlog> <extensions> <add assembly=\"NLog.MailKit\"/> </extensions> ... Bug/feature requests for NLog.MailKit please on the NLog.MailKit repo Application Configuration File If the application config file contains mail settings, fx.: <system.net> <mailSettings> <smtp from=\"mail@domain.com\" deliveryMethod=\"SpecifiedPickupDirectory\"> <network host=\"localhost\" port=\"25\"/> <specifiedPickupDirectory pickupDirectoryLocation=\"C:/Temp/Email\"/> </smtp> </mailSettings> </system.net> These values will be used, if target doesn't override them (see useSystemNetMailSettings attribute). * NetStandard2.X does not support mail settings in the application config file. Email Address Format It is possible to use an address in format \"John Doe <john.doe@example.com>\" but the special characters < and > must be escaped. The result would be John Doe &lt;john.doe@example.com&gt; MailKit Target using Amazon AWS SMTP: <target name=\"MailAWS\" xsi:type=\"Mail\" smtpServer=\"email-smtp.us-east-1.amazonaws.com\" smtpPort=\"587\" smtpAuthentication=\"Basic\" smtpUserName=\"xxxxxxxx\" smtpPassword=\"xxxxxxxxxx\" secureSocketOption=\"StartTls\" from=\"logger@xxxx.xxx\" to=\"xxx@gmail.com\" /> Mail Target wrapped by FallbackGroup Target Example configuration for a Mailserver Fallback with multiple hosts. <target xsi:type=\"FallbackGroup\" name=\"mail\" returnToFirstOnSuccess=\"true\"> <target xsi:type=\"Mail\" name=\"mailserver1\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx1.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> <target xsi:type=\"Mail\" name=\"mailserver2\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx2.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> </target> Mail Target send LogEvent history on error Example configuration that buffers LogEvents and sends entire batch on error LogEvent: <target xsi:type=\"AutoFlushWrapper\" name=\"MailErrorFlush\" condition=\"level >= LogLevel.Error\" flushOnConditionOnly=\"true\"> <target xsi:type=\"BufferingWrapper\" name=\"MailBuffer\" bufferSize=\"50\" overflowAction=\"Discard\"> <target xsi:type=\"Mail\" name=\"MailTarget\" /> </target> </target> Using Mail-Target with GMail <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"gmail\" xsi:type=\"Mail\" smtpServer=\"smtp.gmail.com\" smtpPort=\"587\" smtpAuthentication=\"Basic\" smtpUserName=\"user@gmail.com\" smtpPassword=\"password\" enableSsl=\"true\" from=\"emailaddress@gmail.com\" to=\"recipient@example.com\" cc=\"alice@example.com;bob@example.com;charlie@example.com\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"gmail\" /> </rules> </nlog>","title":"Mail target"},{"location":"Mail-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Mail\" name=\"String\" header=\"Layout\" footer=\"Layout\" layout=\"Layout\" html=\"Boolean\" addNewLines=\"Boolean\" replaceNewlineWithBrTagInHtml=\"Boolean\" encoding=\"Encoding\" subject=\"Layout\" to=\"Layout\" bcc=\"Layout\" cc=\"Layout\" from=\"Layout\" body=\"Layout\" smtpUserName=\"Layout\" enableSsl=\"Boolean\" secureSocketOption=\"None|Auto|SslOnConnect|StartTls|StartTlsWhenAvailable\"* smtpPassword=\"Layout\" smtpAuthentication=\"Enum\" smtpServer=\"Layout\" smtpPort=\"Integer\" useSystemNetMailSettings=\"Boolean\" deliveryMethod=\"Enum\" pickupDirectoryLocation=\"String\" timeout=\"Integer\" skipCertificateValidation=\"Boolean\" priority=\"Layout\"> <mailheader name=\"header-name\" layout=\"header-value\" /> <!-- repeatable --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Mail-target/#parameters","text":"","title":"Parameters"},{"location":"Mail-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Mail-target/#layout-options","text":"header - Header for the message-body. Layout footer - Footer for the message-body. Layout layout - Text to be rendered for message-body. Layout Required. Default: ${message}${newline} . html - Indicates whether to send message as HTML instead of plain text. Boolean Default: false addNewLines - Indicates whether to add new lines between log entries. Boolean replaceNewlineWithBrTagInHtml - Indicates whether NewLine characters in the body should be replaced with <br/> tags. Boolean Default: false encoding - Encoding to be used for sending e-mail. Encoding Default: UTF-8","title":"Layout Options"},{"location":"Mail-target/#message-options","text":"subject - Mail subject. Layout Required. Default: Message from NLog on ${machinename} to - Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). Layout . Starting in NLog 4.0 this field is no longer required, but To, BCC or CC should be defined otherwise an exception is thrown. bcc - BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). Layout cc - CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com). Layout from - Sender's email address (e.g. joe@domain.com). Layout Required. body - Same as Layout property. Mail message body (repeated for each log message send in one mail). Layout Default: ${message}${newline} priority - The mail message priority. When using NLog without NLog.MailKit package, use System.Net.Mail.MailPriority. Low , Normal , High . When using Nlog + NLog.MailKit versions up to v3.1, the valid values are MimeKit.MessagePriority. NonUrgent , Normal , Urgent NLog.MailKit v3.2 and above accepts NonUrgent / Low , Normal , Urgent / High for backward compatibility","title":"Message Options"},{"location":"Mail-target/#smtp-options","text":"smtpUserName - Username used to connect to SMTP server (used when SmtpAuthentication is set to \"basic\"). Layout enableSsl - Indicates whether SSL (secure sockets layer) should be used when communicating with SMTP server. Boolean Default: False. Note: port 465 only works with SSL if NLog.MailKit is used. See issue 1226 secureSocketOption - Only in NLog.Mailkit 2.1+. Provides a way of specifying the SSL and/or TLS encryption. Default StartTlsWhenAvailable. Options: None, Auto, SslOnConnect, StartTls & StartTlsWhenAvailable. If enableSsl is set to true , SslOnConnect will be used smtpPassword - Password used to authenticate against SMTP server (used when SmtpAuthentication is set to \"basic\"). Layout smtpAuthentication - SMTP Authentication mode. Default: None Possible values: Basic - Basic - username and password. None - No authentication. Ntlm - NTLM Authentication using network credentials of user currently logged on (Same as SmtpClient.UseDefaultCredentials = true ) smtpServer - SMTP Server to be used for sending. Layout Required. smtpPort - Port number that SMTP Server is listening on. Integer Default: 25. Note: port 465 isn't working with SSL. See issue 1226 useSystemNetMailSettings - Force using smtp configuration from system.net/mailSettings. Boolean Default: False timeout - Indicates the SMTP client timeout in milliseconds. Integer Default: 10000 (10 seconds) pickupDirectoryLocation - Gets or sets the folder where applications save mail messages to be processed by the local SMTP server ( introduced in NLog 4.2 ). deliveryMethod - Specifies how outgoing email messages will be handled ( introduced in NLog 4.2 ). Default: Network Possible values: Network - Email is sent through the network to an SMTP server. PickupDirectoryFromIis - Email is copied to the pickup directory used by a local Internet Information Services (IIS) for delivery. SpecifiedPickupDirectory - Email is copied to the directory specified by the PickupDirectoryLocation property for delivery by an external application. skipCertificateValidation - Only for NLog.MailKit. Introduced in NLog.MailKit 1.1 - skip SSL certification check mailheader - Specify one or more email-message-headers (Ex. Message-Id ) Introduced with NLog v5.1.3","title":"SMTP Options"},{"location":"Mail-target/#remarks","text":"","title":"Remarks"},{"location":"Mail-target/#net-standard-1x-mailkit-package","text":"The SmtpClient is not part of .NET Standard 1.x. Also notice that the original SmtpClient of .NET is obsolete in favor of MailKit: The NLog.MailKit is the Mail target implementation which uses MailKit. Including the NLog.MailKit package will replace the original mail target and has the same options as the original mail target Install-Package NLog.MailKit or use <PackageReference Include=\"NLog.MailKit\" Version=\"3.0.0\" /> And add to your nlog.config: <nlog> <extensions> <add assembly=\"NLog.MailKit\"/> </extensions> ... Bug/feature requests for NLog.MailKit please on the NLog.MailKit repo","title":".NET Standard 1.x / MailKit package"},{"location":"Mail-target/#application-configuration-file","text":"If the application config file contains mail settings, fx.: <system.net> <mailSettings> <smtp from=\"mail@domain.com\" deliveryMethod=\"SpecifiedPickupDirectory\"> <network host=\"localhost\" port=\"25\"/> <specifiedPickupDirectory pickupDirectoryLocation=\"C:/Temp/Email\"/> </smtp> </mailSettings> </system.net> These values will be used, if target doesn't override them (see useSystemNetMailSettings attribute). * NetStandard2.X does not support mail settings in the application config file.","title":"Application Configuration File"},{"location":"Mail-target/#email-address-format","text":"It is possible to use an address in format \"John Doe <john.doe@example.com>\" but the special characters < and > must be escaped. The result would be John Doe &lt;john.doe@example.com&gt;","title":"Email Address Format"},{"location":"Mail-target/#mailkit-target-using-amazon-aws-smtp","text":"<target name=\"MailAWS\" xsi:type=\"Mail\" smtpServer=\"email-smtp.us-east-1.amazonaws.com\" smtpPort=\"587\" smtpAuthentication=\"Basic\" smtpUserName=\"xxxxxxxx\" smtpPassword=\"xxxxxxxxxx\" secureSocketOption=\"StartTls\" from=\"logger@xxxx.xxx\" to=\"xxx@gmail.com\" />","title":"MailKit Target using Amazon AWS SMTP:"},{"location":"Mail-target/#mail-target-wrapped-by-fallbackgroup-target","text":"Example configuration for a Mailserver Fallback with multiple hosts. <target xsi:type=\"FallbackGroup\" name=\"mail\" returnToFirstOnSuccess=\"true\"> <target xsi:type=\"Mail\" name=\"mailserver1\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx1.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> <target xsi:type=\"Mail\" name=\"mailserver2\" subject=\"Layout\" to=\"Layout\" from=\"Layout\" smtpServer=\"mx2.example.com\" smtpPort=\"Integer\" layout=\"Layout\" /> </target>","title":"Mail Target wrapped by FallbackGroup Target"},{"location":"Mail-target/#mail-target-send-logevent-history-on-error","text":"Example configuration that buffers LogEvents and sends entire batch on error LogEvent: <target xsi:type=\"AutoFlushWrapper\" name=\"MailErrorFlush\" condition=\"level >= LogLevel.Error\" flushOnConditionOnly=\"true\"> <target xsi:type=\"BufferingWrapper\" name=\"MailBuffer\" bufferSize=\"50\" overflowAction=\"Discard\"> <target xsi:type=\"Mail\" name=\"MailTarget\" /> </target> </target>","title":"Mail Target send LogEvent history on error"},{"location":"Mail-target/#using-mail-target-with-gmail","text":"<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"gmail\" xsi:type=\"Mail\" smtpServer=\"smtp.gmail.com\" smtpPort=\"587\" smtpAuthentication=\"Basic\" smtpUserName=\"user@gmail.com\" smtpPassword=\"password\" enableSsl=\"true\" from=\"emailaddress@gmail.com\" to=\"recipient@example.com\" cc=\"alice@example.com;bob@example.com;charlie@example.com\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"gmail\" /> </rules> </nlog>","title":"Using Mail-Target with GMail"},{"location":"Memory-target/","text":"Writes log messages to an ArrayList in memory for programmatic retrieval. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"Memory\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} MaxLogsCount Max count, will remove first if over this threshold. Default: 0 (No limit). Introduced with NLog v4.6 Examples Setup MemoryTarget and enumerate messages var config = new NLog.Config.LoggingConfiguration(); var memoryTarget = new NLog.Targets.MemoryTarget(); memoryTarget.Layout = \"${message}\"; // Message format config.AddRuleForAllLevels(memoryTarget); LogManager.Configuration = config; Logger logger = LogManager.GetLogger(\"Example\"); logger.Debug(\"log message\"); foreach (string s in memoryTarget.Logs) { Console.Write(\"logged: {0}\", s); } See also Memory Target Tests See also Memory Simple Example.cs Reading from existing target var target = LogManager.Configuration.FindTargetByName<MemoryTarget>(\"target1\"); var logEvents = target.Logs;","title":"Memory target"},{"location":"Memory-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Memory\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Memory-target/#parameters","text":"","title":"Parameters"},{"location":"Memory-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Memory-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message} MaxLogsCount Max count, will remove first if over this threshold. Default: 0 (No limit). Introduced with NLog v4.6","title":"Layout Options"},{"location":"Memory-target/#examples","text":"","title":"Examples"},{"location":"Memory-target/#setup-memorytarget-and-enumerate-messages","text":"var config = new NLog.Config.LoggingConfiguration(); var memoryTarget = new NLog.Targets.MemoryTarget(); memoryTarget.Layout = \"${message}\"; // Message format config.AddRuleForAllLevels(memoryTarget); LogManager.Configuration = config; Logger logger = LogManager.GetLogger(\"Example\"); logger.Debug(\"log message\"); foreach (string s in memoryTarget.Logs) { Console.Write(\"logged: {0}\", s); } See also Memory Target Tests See also Memory Simple Example.cs","title":"Setup MemoryTarget and enumerate messages"},{"location":"Memory-target/#reading-from-existing-target","text":"var target = LogManager.Configuration.FindTargetByName<MemoryTarget>(\"target1\"); var logEvents = target.Logs;","title":"Reading from existing target"},{"location":"Message-Layout-Renderer/","text":"The formatted log message. Platforms Supported: All Configuration Syntax ${message:exceptionSeparator=String:withException=Boolean:raw=Boolean} Parameters Layout Options exceptionSeparator - String that separates message from the exception. withException - Indicates whether to log exception along with message. Boolean raw - Render the unformatted input message without using input parameters (Message-Template for structured logging ). Boolean Introduced with NLog 4.5","title":"Message Layout Renderer"},{"location":"Message-Layout-Renderer/#configuration-syntax","text":"${message:exceptionSeparator=String:withException=Boolean:raw=Boolean}","title":"Configuration Syntax"},{"location":"Message-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Message-Layout-Renderer/#layout-options","text":"exceptionSeparator - String that separates message from the exception. withException - Indicates whether to log exception along with message. Boolean raw - Render the unformatted input message without using input parameters (Message-Template for structured logging ). Boolean Introduced with NLog 4.5","title":"Layout Options"},{"location":"MessageBox-target/","text":"Pops up log messages as message boxes. Platforms Supported: .NetFramework + NETCore3.1 + NET5.0 - Requires nuget-package NLog.Windows.Forms Configuration Syntax <targets> <target xsi:type=\"MessageBox\" name=\"String\" layout=\"Layout\" caption=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} UI Options caption - Message box title. Layout","title":"MessageBox target"},{"location":"MessageBox-target/#configuration-syntax","text":"<targets> <target xsi:type=\"MessageBox\" name=\"String\" layout=\"Layout\" caption=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"MessageBox-target/#parameters","text":"","title":"Parameters"},{"location":"MessageBox-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"MessageBox-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}","title":"Layout Options"},{"location":"MessageBox-target/#ui-options","text":"caption - Message box title. Layout","title":"UI Options"},{"location":"MethodCall-target/","text":"Calls the specified static method on each log message and passes contextual parameters to it. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"MethodCall\" name=\"String\" methodName=\"String\" className=\"String\"> <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Invocation Options methodName - Method name. The method must be public and static . className - Class name. Do include the assembly name, e.g. \"NLog.UnitTests.Targets.MethodCallTests, NLog.UnitTests\" Parameter Options parameters - The array of parameters to be passed. Collection Each collection item is represented by <parameter /> element with the following attributes: layout - Layout that should be use to calculate the value for the parameter. Layout Required. name - Name of the parameter. type - Type of the parameter. System.Type Note: Since NLog 4.3 these parameters can be optional. Examples Configure call of lambda at runtime Introduced with NLog ver. 4.5.8 One can make it call a user defined delegate using Configuration API : public class Example { static void Main(string[] args) { MethodCallTarget target = new MethodCallTarget(\"MyTarget\", (logEvent,parms) => Console.WriteLine(logEvent.FormattedMessage)); NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); Logger logger = LogManager.GetLogger(\"Example\"); logger.Info(\"log message\"); } } Configure call of static method with NLog.config In order to send all logs to a static method, use the following configuration file: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"m\" xsi:type=\"MethodCall\" className=\"SomeNamespace.MyClass, MyAssembly\" methodName=\"LogMethod\"> <parameter layout=\"${level}\" /> <parameter layout=\"${message}\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"m\" /> </rules> </nlog> Per the configuration, the log method needs to be called \"LogMethod\" be declared in \"SomeNamespace.MyClass\" class. The class must be compiled to MyAssembly.dll. Each parameter of the log method must correspond to \\ entry in the target configuration. namespace SomeNamespace { using System; public class MyClass { public static void LogMethod(string level, string message) { Console.WriteLine(\"l: {0} m: {1}\", level, message); } } } Names of parameters are not important, only their order is. The default type of each parameter is string, but it can be overridden by adding type attribute to <parameter /> element. Configure call of static method at runtime It is also possible to configure logging using Configuration API : using System; using NLog; using NLog.Targets; using System.Diagnostics; public class Example { public static void LogMethod(string level, string message) { Console.WriteLine(\"l: {0} m: {1}\", level, message); } static void Main(string[] args) { MethodCallTarget target = new MethodCallTarget(); target.ClassName = typeof(Example).AssemblyQualifiedName; target.MethodName = \"LogMethod\"; target.Parameters.Add(new MethodCallParameter(\"${level}\")); target.Parameters.Add(new MethodCallParameter(\"${message}\")); NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); Logger logger = LogManager.GetLogger(\"Example\"); logger.Debug(\"log message\"); logger.Error(\"error message\"); } }","title":"MethodCall target"},{"location":"MethodCall-target/#configuration-syntax","text":"<targets> <target xsi:type=\"MethodCall\" name=\"String\" methodName=\"String\" className=\"String\"> <parameter layout=\"Layout\" name=\"String\" type=\"System.Type\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"MethodCall-target/#parameters","text":"","title":"Parameters"},{"location":"MethodCall-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"MethodCall-target/#invocation-options","text":"methodName - Method name. The method must be public and static . className - Class name. Do include the assembly name, e.g. \"NLog.UnitTests.Targets.MethodCallTests, NLog.UnitTests\"","title":"Invocation Options"},{"location":"MethodCall-target/#parameter-options","text":"parameters - The array of parameters to be passed. Collection Each collection item is represented by <parameter /> element with the following attributes: layout - Layout that should be use to calculate the value for the parameter. Layout Required. name - Name of the parameter. type - Type of the parameter. System.Type Note: Since NLog 4.3 these parameters can be optional.","title":"Parameter Options"},{"location":"MethodCall-target/#examples","text":"","title":"Examples"},{"location":"MethodCall-target/#configure-call-of-lambda-at-runtime","text":"Introduced with NLog ver. 4.5.8 One can make it call a user defined delegate using Configuration API : public class Example { static void Main(string[] args) { MethodCallTarget target = new MethodCallTarget(\"MyTarget\", (logEvent,parms) => Console.WriteLine(logEvent.FormattedMessage)); NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); Logger logger = LogManager.GetLogger(\"Example\"); logger.Info(\"log message\"); } }","title":"Configure call of lambda at runtime"},{"location":"MethodCall-target/#configure-call-of-static-method-with-nlogconfig","text":"In order to send all logs to a static method, use the following configuration file: <?xml version=\"1.0\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"m\" xsi:type=\"MethodCall\" className=\"SomeNamespace.MyClass, MyAssembly\" methodName=\"LogMethod\"> <parameter layout=\"${level}\" /> <parameter layout=\"${message}\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"m\" /> </rules> </nlog> Per the configuration, the log method needs to be called \"LogMethod\" be declared in \"SomeNamespace.MyClass\" class. The class must be compiled to MyAssembly.dll. Each parameter of the log method must correspond to \\ entry in the target configuration. namespace SomeNamespace { using System; public class MyClass { public static void LogMethod(string level, string message) { Console.WriteLine(\"l: {0} m: {1}\", level, message); } } } Names of parameters are not important, only their order is. The default type of each parameter is string, but it can be overridden by adding type attribute to <parameter /> element.","title":"Configure call of static method with NLog.config"},{"location":"MethodCall-target/#configure-call-of-static-method-at-runtime","text":"It is also possible to configure logging using Configuration API : using System; using NLog; using NLog.Targets; using System.Diagnostics; public class Example { public static void LogMethod(string level, string message) { Console.WriteLine(\"l: {0} m: {1}\", level, message); } static void Main(string[] args) { MethodCallTarget target = new MethodCallTarget(); target.ClassName = typeof(Example).AssemblyQualifiedName; target.MethodName = \"LogMethod\"; target.Parameters.Add(new MethodCallParameter(\"${level}\")); target.Parameters.Add(new MethodCallParameter(\"${message}\")); NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(target, LogLevel.Debug); Logger logger = LogManager.GetLogger(\"Example\"); logger.Debug(\"log message\"); logger.Error(\"error message\"); } }","title":"Configure call of static method at runtime"},{"location":"MicrosoftConsoleJsonLayout/","text":"A custom NLog JsonLayout that renders to JSON to simulate Microsoft Logging AddJsonConsole . Platforms Supported: All Introduced with NLog.Extensions.Logging ver. 5.0 <target name=\"jsonFile\" xsi:type=\"File\" fileName=\"${logFileNamePrefix}.json\" > <layout xsi:type=\"MicrosoftConsoleJsonLayout\" includeScopes=\"Boolean\"> <attribute name=\"extraPropertyName\" layout=\"extraPropertyValue\" /> <state name=\"extraStateName\" layout=\"extraStateValue\" /> </layout> </target> This would write: { \"Timestamp\": \"2010-01-01 12:34:56.0000Z\", \"EventId\": 110, \"LogLevel\": \"Debug\", \"Category\": \"ConsoleApp.Program\", \"message\": \"hello, world\", \"State\": { \"location:\" \"world\", \"{OriginalFormat}\": \"hello, {location}\" } } Parameters Attribute - Additional attributes. State - Additional state attributes, besides the message properties. IncludeScopes - Include ScopeContext Nested states as additional Scopes-attribute. TimestampFormat - Override the format of the UTC Timestamp. Default = \"O\"","title":"MicrosoftConsoleJsonLayout"},{"location":"MicrosoftConsoleJsonLayout/#parameters","text":"Attribute - Additional attributes. State - Additional state attributes, besides the message properties. IncludeScopes - Include ScopeContext Nested states as additional Scopes-attribute. TimestampFormat - Override the format of the UTC Timestamp. Default = \"O\"","title":"Parameters"},{"location":"MicrosoftConsoleLayout/","text":"A specialized layout that renders like default Microsoft Console Logger with Microsoft AddConsole Formatter. Platforms Supported: All Introduced with NLog.Extensions.Logging ver. 1.7.2 <nlog> <targets> <target name=\"lifetimeConsole\" xsi:type=\"Console\" layout=\"${MicrosoftConsoleLayout}\" /> </targets> <rules> <logger name=\"Microsoft.Hosting.Lifetime\" level=\"Info\" writeTo=\"lifetimeConsole\" final=\"true\" /> </rules> </nlog> This would write: info: Microsoft.Hosting.Lifetime[0] Application started. Press CTRL-C to shut down. Parameters TimestampFormat - Override the format to output the LogEvent Timestamp. Default (null) means skip timestamp. Introduced with NLog.Extensions.Logging ver. 5.0 UseUtcTimestamp - Configure whether to use UTC timezone for the LogEvent Timestamp. Default false . Introduced with NLog.Extensions.Logging ver. 5.0 Notes MicrosoftConsoleJsonLayout is also available and matches Microsoft AddJsonConsole Formatter.","title":"MicrosoftConsoleLayout"},{"location":"MicrosoftConsoleLayout/#parameters","text":"TimestampFormat - Override the format to output the LogEvent Timestamp. Default (null) means skip timestamp. Introduced with NLog.Extensions.Logging ver. 5.0 UseUtcTimestamp - Configure whether to use UTC timezone for the LogEvent Timestamp. Default false . Introduced with NLog.Extensions.Logging ver. 5.0","title":"Parameters"},{"location":"MicrosoftConsoleLayout/#notes","text":"MicrosoftConsoleJsonLayout is also available and matches Microsoft AddJsonConsole Formatter.","title":"Notes"},{"location":"MicrosoftILogger-Target/","text":"Forwards messages to Microsoft Extensions Logging (MEL) ILogger-interface. Introduced with NLog.Extensions.Logging ver. 1.5.0 Target can be used in Azure functions for capturing output from existing components that already uses NLog Loggers. Target can also be used for transforming standard log-messages into Json-output. Configuration Parameters EventId - Layout for rendering ILogger EventId Layout EventName - Layout for rendering ILogger EventName Layout includeMdlc - Include contents of the async MDLC-Layout-Renderer dictionary. Boolean ContextProperties - Collection of additional context properties Name - Name of context property Layout - Value for the context property Layout Example var loggerTarget = new NLog.Extensions.Logging.MicrosoftILoggerTarget(azureILogger); var nlogConfig = new NLog.Config.LoggingConfiguration(); nlogConfig.AddRuleForAllLevels(loggerTarget); NLog.LogManager.Configuration = nlogConfig; var nlogLogger = NLog.LogManager.GetCurrentClassLogger(); nlogLogger.Info(\"Hello {planet}\", \"Earth\"); Example with extra context properties var loggerTarget = new NLog.Extensions.Logging.MicrosoftILoggerTarget(azureILogger); loggerTarget.IncludeMdlc = true; loggerTarget.ContextProperties.Add(new TargetPropertyWithContext(\"threadid\", \"${threadid}\")); loggerTarget.ContextProperties.Add(new TargetPropertyWithContext(\"hostname\", \"${hostname}\")); var nlogConfig = new NLog.Config.LoggingConfiguration(); nlogConfig.AddRuleForAllLevels(loggerTarget); NLog.LogManager.Configuration = nlogConfig; var nlogLogger = NLog.LogManager.GetCurrentClassLogger(); using (NLog.MappedDiagnosticsLogicalContext.SetScoped(\"TraceId\", Guid.NewGuid()) { nlogLogger.Info(\"Hello {planet}\", \"Earth\"); } Example with JsonLayout var jsonLayout = new NLog.Layouts.JsonLayout(); jsonLayout.IncludeEventProperties = true; var loggerTarget = new NLog.Extensions.Logging.MicrosoftILoggerTarget(azureILogger) { Layout = jsonLayout }; var nlogConfig = new NLog.Config.LoggingConfiguration(); nlogConfig.AddRuleForAllLevels(loggerTarget); NLog.LogManager.Configuration = nlogConfig; var nlogLogger = NLog.LogManager.GetCurrentClassLogger(); nlogLogger.Info(\"Hello {planet}\", \"Earth\");","title":"MicrosoftILogger Target"},{"location":"MicrosoftILogger-Target/#configuration-parameters","text":"EventId - Layout for rendering ILogger EventId Layout EventName - Layout for rendering ILogger EventName Layout includeMdlc - Include contents of the async MDLC-Layout-Renderer dictionary. Boolean ContextProperties - Collection of additional context properties Name - Name of context property Layout - Value for the context property Layout","title":"Configuration Parameters"},{"location":"MicrosoftILogger-Target/#example","text":"var loggerTarget = new NLog.Extensions.Logging.MicrosoftILoggerTarget(azureILogger); var nlogConfig = new NLog.Config.LoggingConfiguration(); nlogConfig.AddRuleForAllLevels(loggerTarget); NLog.LogManager.Configuration = nlogConfig; var nlogLogger = NLog.LogManager.GetCurrentClassLogger(); nlogLogger.Info(\"Hello {planet}\", \"Earth\");","title":"Example"},{"location":"MicrosoftILogger-Target/#example-with-extra-context-properties","text":"var loggerTarget = new NLog.Extensions.Logging.MicrosoftILoggerTarget(azureILogger); loggerTarget.IncludeMdlc = true; loggerTarget.ContextProperties.Add(new TargetPropertyWithContext(\"threadid\", \"${threadid}\")); loggerTarget.ContextProperties.Add(new TargetPropertyWithContext(\"hostname\", \"${hostname}\")); var nlogConfig = new NLog.Config.LoggingConfiguration(); nlogConfig.AddRuleForAllLevels(loggerTarget); NLog.LogManager.Configuration = nlogConfig; var nlogLogger = NLog.LogManager.GetCurrentClassLogger(); using (NLog.MappedDiagnosticsLogicalContext.SetScoped(\"TraceId\", Guid.NewGuid()) { nlogLogger.Info(\"Hello {planet}\", \"Earth\"); }","title":"Example with extra context properties"},{"location":"MicrosoftILogger-Target/#example-with-jsonlayout","text":"var jsonLayout = new NLog.Layouts.JsonLayout(); jsonLayout.IncludeEventProperties = true; var loggerTarget = new NLog.Extensions.Logging.MicrosoftILoggerTarget(azureILogger) { Layout = jsonLayout }; var nlogConfig = new NLog.Config.LoggingConfiguration(); nlogConfig.AddRuleForAllLevels(loggerTarget); NLog.LogManager.Configuration = nlogConfig; var nlogLogger = NLog.LogManager.GetCurrentClassLogger(); nlogLogger.Info(\"Hello {planet}\", \"Earth\");","title":"Example with JsonLayout"},{"location":"NDC-Layout-Renderer/","text":"Nested Diagnostics Context - a thread-local structure that keeps a stack of strings and provides methods to output them in layouts. Platforms Supported: All NLog 5.0 introduces ScopeContext that unifies NDLC + NDC into a single context. NDC is considered legacy, and instead is recommended to use NDLC-Layout-Renderer that includes support for async Tasks. See also NLog Context Configuration Syntax ${ndc:bottomFrames=Integer:topFrames=Integer:separator=String} Parameters Rendering Options bottomFrames - Number of bottom stack frames to be rendered. -1 is no limit. Integer . Default -1 . topFrames - Number of top stack frames to be rendered. -1 is no limit. Integer . Default -1 separator - Separator to be used for concatenating nested diagnostics context output. string . Default (space) Examples One level NestedDiagnosticsContext.Push(\"entering method X\"); ... // log here NestedDiagnosticsContext.Pop(); //leaving methods Then in the log config: ${ndc} logs entering method X if logged between push() and pop() Multiple levels c# NestedDiagnosticsContext.Push(\"entering method X1\"); NestedDiagnosticsContext.Push(\"entering method X2\"); ... // log here NestedDiagnosticsContext.Pop(); //leaving method X2 NestedDiagnosticsContext.Pop(); //leaving method X1 logs entering method X1 entering method X2","title":"NDC Layout Renderer"},{"location":"NDC-Layout-Renderer/#configuration-syntax","text":"${ndc:bottomFrames=Integer:topFrames=Integer:separator=String}","title":"Configuration Syntax"},{"location":"NDC-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"NDC-Layout-Renderer/#rendering-options","text":"bottomFrames - Number of bottom stack frames to be rendered. -1 is no limit. Integer . Default -1 . topFrames - Number of top stack frames to be rendered. -1 is no limit. Integer . Default -1 separator - Separator to be used for concatenating nested diagnostics context output. string . Default (space)","title":"Rendering Options"},{"location":"NDC-Layout-Renderer/#examples","text":"","title":"Examples"},{"location":"NDC-Layout-Renderer/#one-level","text":"NestedDiagnosticsContext.Push(\"entering method X\"); ... // log here NestedDiagnosticsContext.Pop(); //leaving methods Then in the log config: ${ndc} logs entering method X if logged between push() and pop()","title":"One level"},{"location":"NDC-Layout-Renderer/#multiple-levels","text":"c# NestedDiagnosticsContext.Push(\"entering method X1\"); NestedDiagnosticsContext.Push(\"entering method X2\"); ... // log here NestedDiagnosticsContext.Pop(); //leaving method X2 NestedDiagnosticsContext.Pop(); //leaving method X1 logs entering method X1 entering method X2","title":"Multiple levels"},{"location":"NDLC-Layout-Renderer/","text":"Nested Diagnostics Logical Context (NDLC) acts like a stack of string, that are stored in an Async-Local structure (Similar to \"Thread Context\" in Log4j). It is the async version of NDC-Layout-Renderer Platforms Supported: All Introduced in NLog 4.4.1 NLog 5.0 introduces ScopeContext that unifies NDLC + NDC into a single context. It enables one to assign a scope-name to the active scope (Ex. a request method-name). Then all logger-events created within the scoped logical context, can automatically capture the scope-name without needing to specify it with each LogEvent. The specified scope states will automatically flow together with async Tasks. See also NLog Context . Configuration Syntax ${ndlc:bottomFrames=Integer:topFrames=Integer:separator=String} Parameters Rendering Options bottomFrames - Number of bottom stack frames to be rendered. -1 is no limit. Integer . Default -1 . topFrames - Number of top stack frames to be rendered. -1 is no limit. Integer . Default -1 separator - Separator to be used for concatenating nested diagnostics context output. string . Default (space) Examples using (NLog.NestedDiagnosticsLogicalContext.Push(\"Outer Scope\")) { Logger.Info(\"Hello Outer\"); await InnerOperationAsync(); } static async Task InnerOperationAsync() { using (NLog.NestedDiagnosticsLogicalContext.Push(\"Inner Scope\")) { Logger.Info(\"Hello Inner\"); await Task.Yield(); } }","title":"NDLC Layout Renderer"},{"location":"NDLC-Layout-Renderer/#configuration-syntax","text":"${ndlc:bottomFrames=Integer:topFrames=Integer:separator=String}","title":"Configuration Syntax"},{"location":"NDLC-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"NDLC-Layout-Renderer/#rendering-options","text":"bottomFrames - Number of bottom stack frames to be rendered. -1 is no limit. Integer . Default -1 . topFrames - Number of top stack frames to be rendered. -1 is no limit. Integer . Default -1 separator - Separator to be used for concatenating nested diagnostics context output. string . Default (space)","title":"Rendering Options"},{"location":"NDLC-Layout-Renderer/#examples","text":"using (NLog.NestedDiagnosticsLogicalContext.Push(\"Outer Scope\")) { Logger.Info(\"Hello Outer\"); await InnerOperationAsync(); } static async Task InnerOperationAsync() { using (NLog.NestedDiagnosticsLogicalContext.Push(\"Inner Scope\")) { Logger.Info(\"Hello Inner\"); await Task.Yield(); } }","title":"Examples"},{"location":"NLog-Install/","text":"Installing NLog ASP.NET Core users should follow Getting started with ASP.NET Core first. Standard install Install the latest NLog from NuGet. Setup initial NLog.config xml-file Example NLog.config can be downloaded and just added to your main application project. Set \"Copy To Output Directory\" to \"Copy if newer\" for the NLog.config . That's it, you can now compile and run your application and it will be able to use NLog. Tutorial Next step, see Tutorial Troubleshooting If something is not working as expected then check here: * Troubleshooting Configuration * Troubleshooting Logging * Check Internal Logging * FAQ * Platform support * External articles and tutorials","title":"NLog Install"},{"location":"NLog-Install/#installing-nlog","text":"ASP.NET Core users should follow Getting started with ASP.NET Core first. Standard install Install the latest NLog from NuGet. Setup initial NLog.config xml-file Example NLog.config can be downloaded and just added to your main application project. Set \"Copy To Output Directory\" to \"Copy if newer\" for the NLog.config . That's it, you can now compile and run your application and it will be able to use NLog.","title":"Installing NLog"},{"location":"NLog-Install/#tutorial","text":"Next step, see Tutorial","title":"Tutorial"},{"location":"NLog-Install/#troubleshooting","text":"If something is not working as expected then check here: * Troubleshooting Configuration * Troubleshooting Logging * Check Internal Logging * FAQ * Platform support * External articles and tutorials","title":"Troubleshooting"},{"location":"NLog-Trace-Listener-for-System-Diagnostics-Trace/","text":"NLogTraceListener Captures output from System Diagnostics Trace and redirects to NLog Targets. Attributes DisableFlush - Ignore flush operations from System.Diagnostics.Trace (Default = True) DefaultLogLevel - Use this default LogLevel for all LogEvents without any LogLevel. ForceLogLevel - Always use this LogLevel for all LogEvents (independent on the one provided). AutoLoggerName - Always capture StackTrace for each LogEvent and resolve Logger-name from callsite (Default = False) Example config Needed in your config: <system.diagnostics> <sources> <source name=\"System.ServiceModel.MessageLogging\" switchValue=\"All\"> <listeners> <add name=\"nlog\" /> </listeners> </source> </sources> <sharedListeners> <add name=\"nlog\" type=\"NLog.NLogTraceListener, NLog\" /> </sharedListeners> </system.diagnostics> and <system.serviceModel> <diagnostics> <messageLogging logEntireMessage=\"true\" logMalformedMessages=\"true\" logMessagesAtServiceLevel=\"true\" logMessagesAtTransportLevel=\"true\" /> </diagnostics> </system.serviceModel> Performance Optimizations NLogTraceListener is threadsafe and supports multithreading. To improve concurrency then ensure useGlobalLock is false (Default = true). See also LowLevelDesign.org - Case of deadlock NLogTraceListener does not need help with flushing, since this is handled automatically by the NLog engine. To improve performance then ensure autoflush is false (Default = false). <system.diagnostics> <trace useGlobalLock=\"false\" /> <trace autoflush=\"false\" /> </system.diagnostics>","title":"NLogTraceListener"},{"location":"NLog-Trace-Listener-for-System-Diagnostics-Trace/#nlogtracelistener","text":"Captures output from System Diagnostics Trace and redirects to NLog Targets.","title":"NLogTraceListener"},{"location":"NLog-Trace-Listener-for-System-Diagnostics-Trace/#attributes","text":"DisableFlush - Ignore flush operations from System.Diagnostics.Trace (Default = True) DefaultLogLevel - Use this default LogLevel for all LogEvents without any LogLevel. ForceLogLevel - Always use this LogLevel for all LogEvents (independent on the one provided). AutoLoggerName - Always capture StackTrace for each LogEvent and resolve Logger-name from callsite (Default = False)","title":"Attributes"},{"location":"NLog-Trace-Listener-for-System-Diagnostics-Trace/#example-config","text":"Needed in your config: <system.diagnostics> <sources> <source name=\"System.ServiceModel.MessageLogging\" switchValue=\"All\"> <listeners> <add name=\"nlog\" /> </listeners> </source> </sources> <sharedListeners> <add name=\"nlog\" type=\"NLog.NLogTraceListener, NLog\" /> </sharedListeners> </system.diagnostics> and <system.serviceModel> <diagnostics> <messageLogging logEntireMessage=\"true\" logMalformedMessages=\"true\" logMessagesAtServiceLevel=\"true\" logMessagesAtTransportLevel=\"true\" /> </diagnostics> </system.serviceModel>","title":"Example config"},{"location":"NLog-Trace-Listener-for-System-Diagnostics-Trace/#performance-optimizations","text":"NLogTraceListener is threadsafe and supports multithreading. To improve concurrency then ensure useGlobalLock is false (Default = true). See also LowLevelDesign.org - Case of deadlock NLogTraceListener does not need help with flushing, since this is handled automatically by the NLog engine. To improve performance then ensure autoflush is false (Default = false). <system.diagnostics> <trace useGlobalLock=\"false\" /> <trace autoflush=\"false\" /> </system.diagnostics>","title":"Performance Optimizations"},{"location":"NLog-config-Example/","text":"Save this file as \"nlog.config\" in the root of your application (Add to project with Copy if newer ) Simple config example: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Warn\" internalLogFile=\"${basedir}/nlog-internal.txt\"> <variable name=\"defaultLayout\" value=\"${longdate}|${level}|${message:withException=true}\" /> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" layout=\"${defaultLayout}\" /> <target name=\"console\" xsi:type=\"ColoredConsole\" layout=\"${defaultLayout}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> <logger name=\"*\" minlevel=\"Info\" writeTo=\"console\" /> </rules> </nlog> Advanced config example: ```xml <!-- write log message to database --> <target xsi:type=\"Database\" name=\"db\"> <!-- SQL command to be executed for each entry --> <commandText>INSERT INTO [LogEntries](TimeStamp, Message, Level, Logger) VALUES(getutcdate(), @msg, @level, @logger)</commandText> <!-- parameters for the command --> <parameter name=\"@msg\" layout=\"${message}\" /> <parameter name=\"@level\" layout=\"${level}\" /> <parameter name=\"@logger\" layout=\"${logger}\" /> <!-- connection string --> <dbProvider>System.Data.SqlClient</dbProvider> <connectionString>server=.\\SQLEXPRESS;database=MyLogs;integrated security=sspi</connectionString> <!-- commands to install database --> <install-command> <text>CREATE DATABASE MyLogs</text> <connectionString>server=.\\SQLEXPRESS;database=master;integrated security=sspi</connectionString> <ignoreFailures>true</ignoreFailures> </install-command> <install-command> <text> CREATE TABLE LogEntries( id int primary key not null identity(1,1), TimeStamp datetime2, Message nvarchar(max), level nvarchar(10), logger nvarchar(128)) </text> </install-command> <!-- commands to uninstall database --> <uninstall-command> <text>DROP DATABASE MyLogs</text> <connectionString>server=.\\SQLEXPRESS;database=master;integrated security=sspi</connectionString> <ignoreFailures>true</ignoreFailures> </uninstall-command> </target> <!-- log message to event log --> <target xsi:type=\"EventLog\" name=\"eventLog\" source=\"NLog Demo\" layout=\"${message}${newline}Call site: ${callsite:className=true:methodName=true}${newline}Logger: ${logger}\"> </target> <!-- increase the performance counter --> <target xsi:type=\"PerfCounter\" name=\"pc1\" categoryName=\"My Log\" counterName=\"My Counter\"> </target> <!-- send mail through GMail server --> <target xsi:type=\"Mail\" name=\"mail\" smtpServer=\"smtp.gmail.com\" smtpPort=\"587\" enableSsl=\"true\" smtpAuthentication=\"Basic\" smtpUserName=\"${gmailUsername}\" smtpPassword=\"${gmailPassword}\" from=\"${gmailUsername}\" to=\"${gmailUsername}\" subject=\"NLogDemo logs\" addNewLines=\"true\" /> <!-- send mail asynchronously, so that it does not block the calling thread --> <wrapper-target xsi:type=\"AsyncWrapper\" name=\"asyncMail\"> <target-ref name=\"mail\"/> </wrapper-target> <wrapper-target xsi:type=\"AspNetBufferingWrapper\" name=\"allOutputs\"> <wrapper-target xsi:type=\"PostFilteringWrapper\"> <compound-target xsi:type=\"SplitGroup\"> <target-ref name=\"file\" /> <target-ref name=\"db\" /> <target-ref name=\"eventLog\" /> <target-ref name=\"pc1\" /> <target-ref name=\"asyncMail\" /> </compound-target> <!-- during normal execution only log Info messages --> <defaultFilter>level >= LogLevel.Info</defaultFilter> <!-- if there is at least one error, log everything from trace level --> <when exists=\"level >= LogLevel.Error\" filter=\"level >= LogLevel.Trace\" /> </wrapper-target> </wrapper-target> ````","title":"NLog config Example"},{"location":"NLog-config-Example/#simple-config-example","text":"<?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Warn\" internalLogFile=\"${basedir}/nlog-internal.txt\"> <variable name=\"defaultLayout\" value=\"${longdate}|${level}|${message:withException=true}\" /> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" layout=\"${defaultLayout}\" /> <target name=\"console\" xsi:type=\"ColoredConsole\" layout=\"${defaultLayout}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> <logger name=\"*\" minlevel=\"Info\" writeTo=\"console\" /> </rules> </nlog>","title":"Simple config example:"},{"location":"NLog-config-Example/#advanced-config-example","text":"```xml <!-- write log message to database --> <target xsi:type=\"Database\" name=\"db\"> <!-- SQL command to be executed for each entry --> <commandText>INSERT INTO [LogEntries](TimeStamp, Message, Level, Logger) VALUES(getutcdate(), @msg, @level, @logger)</commandText> <!-- parameters for the command --> <parameter name=\"@msg\" layout=\"${message}\" /> <parameter name=\"@level\" layout=\"${level}\" /> <parameter name=\"@logger\" layout=\"${logger}\" /> <!-- connection string --> <dbProvider>System.Data.SqlClient</dbProvider> <connectionString>server=.\\SQLEXPRESS;database=MyLogs;integrated security=sspi</connectionString> <!-- commands to install database --> <install-command> <text>CREATE DATABASE MyLogs</text> <connectionString>server=.\\SQLEXPRESS;database=master;integrated security=sspi</connectionString> <ignoreFailures>true</ignoreFailures> </install-command> <install-command> <text> CREATE TABLE LogEntries( id int primary key not null identity(1,1), TimeStamp datetime2, Message nvarchar(max), level nvarchar(10), logger nvarchar(128)) </text> </install-command> <!-- commands to uninstall database --> <uninstall-command> <text>DROP DATABASE MyLogs</text> <connectionString>server=.\\SQLEXPRESS;database=master;integrated security=sspi</connectionString> <ignoreFailures>true</ignoreFailures> </uninstall-command> </target> <!-- log message to event log --> <target xsi:type=\"EventLog\" name=\"eventLog\" source=\"NLog Demo\" layout=\"${message}${newline}Call site: ${callsite:className=true:methodName=true}${newline}Logger: ${logger}\"> </target> <!-- increase the performance counter --> <target xsi:type=\"PerfCounter\" name=\"pc1\" categoryName=\"My Log\" counterName=\"My Counter\"> </target> <!-- send mail through GMail server --> <target xsi:type=\"Mail\" name=\"mail\" smtpServer=\"smtp.gmail.com\" smtpPort=\"587\" enableSsl=\"true\" smtpAuthentication=\"Basic\" smtpUserName=\"${gmailUsername}\" smtpPassword=\"${gmailPassword}\" from=\"${gmailUsername}\" to=\"${gmailUsername}\" subject=\"NLogDemo logs\" addNewLines=\"true\" /> <!-- send mail asynchronously, so that it does not block the calling thread --> <wrapper-target xsi:type=\"AsyncWrapper\" name=\"asyncMail\"> <target-ref name=\"mail\"/> </wrapper-target> <wrapper-target xsi:type=\"AspNetBufferingWrapper\" name=\"allOutputs\"> <wrapper-target xsi:type=\"PostFilteringWrapper\"> <compound-target xsi:type=\"SplitGroup\"> <target-ref name=\"file\" /> <target-ref name=\"db\" /> <target-ref name=\"eventLog\" /> <target-ref name=\"pc1\" /> <target-ref name=\"asyncMail\" /> </compound-target> <!-- during normal execution only log Info messages --> <defaultFilter>level >= LogLevel.Info</defaultFilter> <!-- if there is at least one error, log everything from trace level --> <when exists=\"level >= LogLevel.Error\" filter=\"level >= LogLevel.Trace\" /> </wrapper-target> </wrapper-target> ````","title":"Advanced config example:"},{"location":"NLogDir-Layout-Renderer/","text":"The directory where NLog.dll is located. Platforms Supported: Limited (Not supported on NetStandard1.3) Configuration Syntax ${nlogdir:dir=String:file=String} Parameters Advanced Options dir - Name of the directory to be Path.Combine()'d with the directory name. file - Name of the file to be Path.Combine()'d with the directory name.","title":"NLogDir Layout Renderer"},{"location":"NLogDir-Layout-Renderer/#configuration-syntax","text":"${nlogdir:dir=String:file=String}","title":"Configuration Syntax"},{"location":"NLogDir-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"NLogDir-Layout-Renderer/#advanced-options","text":"dir - Name of the directory to be Path.Combine()'d with the directory name. file - Name of the file to be Path.Combine()'d with the directory name.","title":"Advanced Options"},{"location":"NLogViewer-target/","text":"Sends log messages to the remote instance of Log4J XML Viewer. Platforms Supported: All \u26a0\ufe0f This target uses an non-standard Log4J-format that includes special NLog-schema-values ( IncludeNLogData=true ). For correct Log4J-xml-format, then use Chainsaw-Target \u26a0\ufe0f This target is not related to the different WPF-Controls like dojo90 NLogViewer or erizet NlogViewer . This target inherits from the Network Target , and so it has also all the properties of the Network Target available. Using the Log4JXmlEventLayout to produce Log4J XML output. Configuration Syntax <targets> <target xsi:type=\"NLogViewer\" name=\"String\" layout=\"Layout\" newLine=\"Boolean\" onOverflow=\"Enum\" maxMessageSize=\"Integer\" encoding=\"Encoding\" connectionCacheSize=\"Integer\" address=\"Layout\" lineEnding=\"CRLF|LF|CR|None\" maxConnections=\"Integer\" maxQueueSize=\"Integer\" keepConnection=\"Boolean\" onConnectionOverflow=\"Enum\" includeSourceInfo=\"Boolean\" includeCallSite=\"Boolean\" appInfo=\"String\" ndcItemSeparator=\"String\" includeNdc=\"Boolean\" includeNLogData=\"Boolean\"> <parameter layout=\"Layout\" name=\"String\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Instance of Log4JXmlEventLayout that is used to format log messages. Layout Default: Log4JXmlEventLayout encoding - Encoding to be used. Encoding Default: utf-8 newLine - Indicates whether to append newline at the end of log message. Boolean Default: False lineEnding - Line Ending to be used if newLine is set to true. LineEndingMode Default: CRLF . Not used if newLine is false . Introduced in 4.3.8. Possible values: CRLF - Carriage Return and Line Feed (ASCII 13, ASCII 10). (default) CR - Carriage Return (ASCII 13). LF - Line Feed (ASCII 10). NULL - Null terminator (ASCII 0) None - No end of line characters. maxMessageSize - Maximum message size in bytes. Integer Default: 65000 onOverflow - Action that should be taken if the message-size is larger than maxMessageSize . Possible values: Discard - Discard the entire message. Error - Report an error. Split - Split the message into smaller pieces (Default) Connection Options connectionCacheSize - Size of the connection cache (number of connections which are kept alive). Integer Default: 5 address - Network address. Layout The network address can be: tcp://host:port - TCP (auto select IPv4/IPv6) tcp4://host:port - force TCP/IPv4 tcp6://host:port - force TCP/IPv6 udp://host:port - UDP (auto select IPv4/IPv6) udp4://host:port - force UDP/IPv4 udp6://host:port - force UDP/IPv6 http://host:port/pageName - HTTP using POST verb https://host:port/pageName - HTTPS using POST verb For SOAP-based webservice support over HTTP use WebService target. keepConnection - Indicates whether to keep connection open whenever possible. Boolean Default: True maxConnections - Maximum current connections. 0 = no maximum. Integer Default: 16 . Not used if keepConnection is true . Introduced with NLog v4.2.1. Default became 16 with NLog v4.5 (Before 0 ) onConnectionOverflow - Action that should be taken if the will be more connections than maxConnections . Introduced with NLog v4.2.1. Default became Block with NLog v4.5 (Before AllowNewConnnection ) Possible values: * AllowNewConnnection - Just allow it. * Block - Block until there's more room in the queue. (default) * DiscardMessage - Discard the connection item. maxQueueSize - Maximum queue size for a single connection. 0 means no limit. Integer . Default: 10000 (Before NLog 5.0 the default was 0) NLog 4.6.7 enabled queue-support for http/https and NLog 4.7.1 activated this setting for http/https. NLog 5.0.0 enabled queue-support for UDP. onQueueOverflow - Action that should be taken if pending queue of messages is larger than maxQueueSize . Introduced with NLog 5.0 Discard - Discard the entire message (Default) Grow - Ignore limit and grow the queue. Block - Block until queue is below limit. Payload Options includeSourceInfo - Indicates whether to include source info (file name and line number) in the information sent over the network. Default: false . includeCallSite - Indicates whether to include call site (class and method name) in the information sent over the network. Default: false . includeNLogData - Indicates whether to include NLog-specific extensions to log4j schema. Default: true . IncludeEventProperties - Include all events properties of a logevent? Default: false . Before NLog 5.0 option was named IncludeAllProperties IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 4.5 parameter - Additional context properties that should be included. name - Name of Parameter. Required. layout - The layout for the Parameter-Value. Required. Example <?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"log4view\" xsi:type=\"NLogViewer\" address=\"udp://127.0.0.1:5001\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"log4view\" /> </rules> </nlog> Available Log4J-XML viewers (See also LogViewer Tools ) - Sentinel - Avoid using TCP since not complete. - Log2Console - Logazmic - Loginator - Logbert - LogViewer - Lilith - OtrosLogViewer Notice that most Log4J-XML viewers will drop messages and stall when NLog sends messages at full speed. One can consider to throttle NLog like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"throttle_log4view\" type=\"AsyncWrapper\" timeToSleepBetweenBatches=\"100\" batchSize=\"1\" overflowAction=\"Block\"> <target name=\"log4view\" type=\"NLogViewer\" address=\"tcp://127.0.0.1:5001\" newline=\"true\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"throttle_log4view\" /> </rules> </nlog>","title":"NLogViewer target"},{"location":"NLogViewer-target/#configuration-syntax","text":"<targets> <target xsi:type=\"NLogViewer\" name=\"String\" layout=\"Layout\" newLine=\"Boolean\" onOverflow=\"Enum\" maxMessageSize=\"Integer\" encoding=\"Encoding\" connectionCacheSize=\"Integer\" address=\"Layout\" lineEnding=\"CRLF|LF|CR|None\" maxConnections=\"Integer\" maxQueueSize=\"Integer\" keepConnection=\"Boolean\" onConnectionOverflow=\"Enum\" includeSourceInfo=\"Boolean\" includeCallSite=\"Boolean\" appInfo=\"String\" ndcItemSeparator=\"String\" includeNdc=\"Boolean\" includeNLogData=\"Boolean\"> <parameter layout=\"Layout\" name=\"String\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"NLogViewer-target/#parameters","text":"","title":"Parameters"},{"location":"NLogViewer-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"NLogViewer-target/#layout-options","text":"layout - Instance of Log4JXmlEventLayout that is used to format log messages. Layout Default: Log4JXmlEventLayout encoding - Encoding to be used. Encoding Default: utf-8 newLine - Indicates whether to append newline at the end of log message. Boolean Default: False lineEnding - Line Ending to be used if newLine is set to true. LineEndingMode Default: CRLF . Not used if newLine is false . Introduced in 4.3.8. Possible values: CRLF - Carriage Return and Line Feed (ASCII 13, ASCII 10). (default) CR - Carriage Return (ASCII 13). LF - Line Feed (ASCII 10). NULL - Null terminator (ASCII 0) None - No end of line characters. maxMessageSize - Maximum message size in bytes. Integer Default: 65000 onOverflow - Action that should be taken if the message-size is larger than maxMessageSize . Possible values: Discard - Discard the entire message. Error - Report an error. Split - Split the message into smaller pieces (Default)","title":"Layout Options"},{"location":"NLogViewer-target/#connection-options","text":"connectionCacheSize - Size of the connection cache (number of connections which are kept alive). Integer Default: 5 address - Network address. Layout The network address can be: tcp://host:port - TCP (auto select IPv4/IPv6) tcp4://host:port - force TCP/IPv4 tcp6://host:port - force TCP/IPv6 udp://host:port - UDP (auto select IPv4/IPv6) udp4://host:port - force UDP/IPv4 udp6://host:port - force UDP/IPv6 http://host:port/pageName - HTTP using POST verb https://host:port/pageName - HTTPS using POST verb For SOAP-based webservice support over HTTP use WebService target. keepConnection - Indicates whether to keep connection open whenever possible. Boolean Default: True maxConnections - Maximum current connections. 0 = no maximum. Integer Default: 16 . Not used if keepConnection is true . Introduced with NLog v4.2.1. Default became 16 with NLog v4.5 (Before 0 ) onConnectionOverflow - Action that should be taken if the will be more connections than maxConnections . Introduced with NLog v4.2.1. Default became Block with NLog v4.5 (Before AllowNewConnnection ) Possible values: * AllowNewConnnection - Just allow it. * Block - Block until there's more room in the queue. (default) * DiscardMessage - Discard the connection item. maxQueueSize - Maximum queue size for a single connection. 0 means no limit. Integer . Default: 10000 (Before NLog 5.0 the default was 0) NLog 4.6.7 enabled queue-support for http/https and NLog 4.7.1 activated this setting for http/https. NLog 5.0.0 enabled queue-support for UDP. onQueueOverflow - Action that should be taken if pending queue of messages is larger than maxQueueSize . Introduced with NLog 5.0 Discard - Discard the entire message (Default) Grow - Ignore limit and grow the queue. Block - Block until queue is below limit.","title":"Connection Options"},{"location":"NLogViewer-target/#payload-options","text":"includeSourceInfo - Indicates whether to include source info (file name and line number) in the information sent over the network. Default: false . includeCallSite - Indicates whether to include call site (class and method name) in the information sent over the network. Default: false . includeNLogData - Indicates whether to include NLog-specific extensions to log4j schema. Default: true . IncludeEventProperties - Include all events properties of a logevent? Default: false . Before NLog 5.0 option was named IncludeAllProperties IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc IncludeScopeNested - Indicates whether to include ScopeNested-Layout-Renderer as NDC. Default: false . Before NLog 5.0 option was named IncludeNdlc ScopeNestedSeparator - NDC item separator. Default: Before NLog 5.0 option was named NdlcItemSeparator includeNdc - Indicates whether to include ScopeNested-Layout-Renderer . Default: false . ndcItemSeparator - NDC item separator. Default: appInfo - AppInfo field. By default it's the friendly name of the current AppDomain. loggerName - Logger field. By default it's the output of ${logger} Introduced in NLog 4.5 parameter - Additional context properties that should be included. name - Name of Parameter. Required. layout - The layout for the Parameter-Value. Required.","title":"Payload Options"},{"location":"NLogViewer-target/#example","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"log4view\" xsi:type=\"NLogViewer\" address=\"udp://127.0.0.1:5001\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"log4view\" /> </rules> </nlog> Available Log4J-XML viewers (See also LogViewer Tools ) - Sentinel - Avoid using TCP since not complete. - Log2Console - Logazmic - Loginator - Logbert - LogViewer - Lilith - OtrosLogViewer Notice that most Log4J-XML viewers will drop messages and stall when NLog sends messages at full speed. One can consider to throttle NLog like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <nlog throwConfigExceptions=\"true\"> <targets> <target name=\"throttle_log4view\" type=\"AsyncWrapper\" timeToSleepBetweenBatches=\"100\" batchSize=\"1\" overflowAction=\"Block\"> <target name=\"log4view\" type=\"NLogViewer\" address=\"tcp://127.0.0.1:5001\" newline=\"true\" /> </target> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"throttle_log4view\" /> </rules> </nlog>","title":"Example"},{"location":"NdlcTiming-Layout-Renderer/","text":"NDLC allows one to give a scope name for an operation that can be async. When the scope begins then it automatically captures a timestamp. This can be used to show duration of the active scope. Platforms Supported: All Introduced in NLog 4.5 NLog 5.0 introduces ScopeContext that unifies MDLC + MDC into a single context. See also NLog Context . Configuration Syntax ${ndlctiming:currentScope=Boolean:scopeBeginTime=Boolean:format=String} Parameters Rendering Options currentScope - Whether to only include the duration of the last scope created. Boolean . Default False . scopeBeginTime - Whether to just display the scope creation time, and not the duration. Boolean . Default False format - TimeSpan format. Can be any argument accepted by TimeSpan.ToString(format) . string . Default null","title":"NdlcTiming Layout Renderer"},{"location":"NdlcTiming-Layout-Renderer/#configuration-syntax","text":"${ndlctiming:currentScope=Boolean:scopeBeginTime=Boolean:format=String}","title":"Configuration Syntax"},{"location":"NdlcTiming-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"NdlcTiming-Layout-Renderer/#rendering-options","text":"currentScope - Whether to only include the duration of the last scope created. Boolean . Default False . scopeBeginTime - Whether to just display the scope creation time, and not the duration. Boolean . Default False format - TimeSpan format. Can be any argument accepted by TimeSpan.ToString(format) . string . Default null","title":"Rendering Options"},{"location":"Network-target/","text":"Sends log messages over the network using Tcp / Udp / Tls / Http / Https Platforms Supported: All For SOAP-based webservice support over HTTP and HTTPS use WebService target . Configuration Syntax <targets> <target xsi:type=\"Network\" name=\"String\" onOverflow=\"Enum\" newLine=\"Boolean\" lineEnding=\"CRLF|LF|CR|Null|None\" layout=\"Layout\" maxMessageSize=\"Integer\" encoding=\"Encoding\" connectionCacheSize=\"Integer\" maxConnections=\"Integer\" maxQueueSize=\"Integer\" keepConnection=\"Boolean\" onConnectionOverflow=\"Enum\" address=\"Layout\" keepAliveTimeSeconds=\"Integer\" sslProtocols=\"Enum\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} encoding - Encoding to be used. Encoding Default: utf-8 newLine - Indicates whether to append newline at the end of log message. Boolean Default: False lineEnding - Line Ending to be used if newLine is set to true. LineEndingMode Default: CRLF . Not used if newLine is false . Introduced in 4.3.8. Possible values: CRLF - Carriage Return and Line Feed (ASCII 13, ASCII 10). (default) CR - Carriage Return (ASCII 13). LF - Line Feed (ASCII 10). NULL - Null terminator (ASCII 0) None - No end of line characters. compress - Use compression to reduce message size. Default: None Introduced with NLog 5.0 None - No compression (Default) GZip - GZip with optimal compression GZipFast - GZip with fastest compression compressMinBytes - Use compression only when message size is higher than limit to reduce overhead in cpu-usage and additional headers. Default: 0 Introduced with NLog 5.0 maxMessageSize - Maximum message size in bytes. Integer Default: 65000 onOverflow - Action that should be taken if the message-size is larger than maxMessageSize . Possible values: Discard - Discard the entire message. Error - Report an error. Split - Split the message into smaller pieces (Default) Connection Options address - Network address. Layout The network address can be: tcp://host:port - TCP (auto select IPv4/IPv6) tcp4://host:port - force TCP/IPv4 tcp6://host:port - force TCP/IPv6 udp://host:port - UDP (auto select IPv4/IPv6) udp4://host:port - force UDP/IPv4 udp6://host:port - force UDP/IPv6 http://host:port/pageName - HTTP using POST verb https://host:port/pageName - HTTPS using POST verb connectionCacheSize - Size of the connection cache (number of connections which are kept alive). Integer Default: 5 keepConnection - Indicates whether to keep connection open whenever possible. Not used for stateless protocols (= http, https) Boolean Default: True maxConnections - Maximum current connections when keepConnection = false. 0 = no limit. Integer Default: 100 (Before NLog 5.0 the default was 0) Introduced in NLog 4.2.1 onConnectionOverflow - Action that should be taken when open connections are higher than limit maxConnections . Introduced in NLog 4.2.1. Possible enum values: * Discard - Discard new messages when reaching limit (Default) (Before NLog 5.0 it was enum value DiscardMessage ) * Grow - Send message and ignore limit (Before NLog 5.0 it was enum value AllowNewConnnection ) * Block - Block until pending connections has beeen freed. maxQueueSize - Maximum queue size for a single connection. 0 means no limit. Integer . Default: 10000 (Before NLog 5.0 the default was 0) NLog 4.6.7 enabled queue-support for http/https and NLog 4.7.1 activated this setting for http/https. NLog 5.0.0 enabled queue-support for UDP. onQueueOverflow - Action that should be taken if pending queue of messages is larger than maxQueueSize . Introduced with NLog 5.0 Discard - Discard the entire message (Default) Grow - Ignore limit and grow the queue. Block - Block until queue is below limit. KeepAliveTimeSeconds - Idle time before first TCP keep-alive probe is sent. Faster detection of stale TCP connections. Currently only implemented for TCP. Integer . Default: 0 (Disabled) Introduced in NLog 4.6 sslProtocols - Get or set the SSL/TLS protocols. Default no SSL/TLS is used. Currently only implemented for TCP. Invalid certificates are not supported. Introduced in NLog 4.6 Possible values (combination allowed, comma separated): * None - No SSL/TLS is used * Default - Accepts Tls or Ssl3 * Ssl2 - really not recommended * Ssl3 - not recommended * Tls - TLS 1.0 * Tls11 - TLS 1.1 * Tls12 - TLS 1.2","title":"Network target"},{"location":"Network-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Network\" name=\"String\" onOverflow=\"Enum\" newLine=\"Boolean\" lineEnding=\"CRLF|LF|CR|Null|None\" layout=\"Layout\" maxMessageSize=\"Integer\" encoding=\"Encoding\" connectionCacheSize=\"Integer\" maxConnections=\"Integer\" maxQueueSize=\"Integer\" keepConnection=\"Boolean\" onConnectionOverflow=\"Enum\" address=\"Layout\" keepAliveTimeSeconds=\"Integer\" sslProtocols=\"Enum\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Network-target/#parameters","text":"","title":"Parameters"},{"location":"Network-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Network-target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} encoding - Encoding to be used. Encoding Default: utf-8 newLine - Indicates whether to append newline at the end of log message. Boolean Default: False lineEnding - Line Ending to be used if newLine is set to true. LineEndingMode Default: CRLF . Not used if newLine is false . Introduced in 4.3.8. Possible values: CRLF - Carriage Return and Line Feed (ASCII 13, ASCII 10). (default) CR - Carriage Return (ASCII 13). LF - Line Feed (ASCII 10). NULL - Null terminator (ASCII 0) None - No end of line characters. compress - Use compression to reduce message size. Default: None Introduced with NLog 5.0 None - No compression (Default) GZip - GZip with optimal compression GZipFast - GZip with fastest compression compressMinBytes - Use compression only when message size is higher than limit to reduce overhead in cpu-usage and additional headers. Default: 0 Introduced with NLog 5.0 maxMessageSize - Maximum message size in bytes. Integer Default: 65000 onOverflow - Action that should be taken if the message-size is larger than maxMessageSize . Possible values: Discard - Discard the entire message. Error - Report an error. Split - Split the message into smaller pieces (Default)","title":"Layout Options"},{"location":"Network-target/#connection-options","text":"address - Network address. Layout The network address can be: tcp://host:port - TCP (auto select IPv4/IPv6) tcp4://host:port - force TCP/IPv4 tcp6://host:port - force TCP/IPv6 udp://host:port - UDP (auto select IPv4/IPv6) udp4://host:port - force UDP/IPv4 udp6://host:port - force UDP/IPv6 http://host:port/pageName - HTTP using POST verb https://host:port/pageName - HTTPS using POST verb connectionCacheSize - Size of the connection cache (number of connections which are kept alive). Integer Default: 5 keepConnection - Indicates whether to keep connection open whenever possible. Not used for stateless protocols (= http, https) Boolean Default: True maxConnections - Maximum current connections when keepConnection = false. 0 = no limit. Integer Default: 100 (Before NLog 5.0 the default was 0) Introduced in NLog 4.2.1 onConnectionOverflow - Action that should be taken when open connections are higher than limit maxConnections . Introduced in NLog 4.2.1. Possible enum values: * Discard - Discard new messages when reaching limit (Default) (Before NLog 5.0 it was enum value DiscardMessage ) * Grow - Send message and ignore limit (Before NLog 5.0 it was enum value AllowNewConnnection ) * Block - Block until pending connections has beeen freed. maxQueueSize - Maximum queue size for a single connection. 0 means no limit. Integer . Default: 10000 (Before NLog 5.0 the default was 0) NLog 4.6.7 enabled queue-support for http/https and NLog 4.7.1 activated this setting for http/https. NLog 5.0.0 enabled queue-support for UDP. onQueueOverflow - Action that should be taken if pending queue of messages is larger than maxQueueSize . Introduced with NLog 5.0 Discard - Discard the entire message (Default) Grow - Ignore limit and grow the queue. Block - Block until queue is below limit. KeepAliveTimeSeconds - Idle time before first TCP keep-alive probe is sent. Faster detection of stale TCP connections. Currently only implemented for TCP. Integer . Default: 0 (Disabled) Introduced in NLog 4.6 sslProtocols - Get or set the SSL/TLS protocols. Default no SSL/TLS is used. Currently only implemented for TCP. Invalid certificates are not supported. Introduced in NLog 4.6 Possible values (combination allowed, comma separated): * None - No SSL/TLS is used * Default - Accepts Tls or Ssl3 * Ssl2 - really not recommended * Ssl3 - not recommended * Tls - TLS 1.0 * Tls11 - TLS 1.1 * Tls12 - TLS 1.2","title":"Connection Options"},{"location":"Newline-Layout-Renderer/","text":"A newline literal. Platforms Supported: All Configuration Syntax ${newline}","title":"Newline Layout Renderer"},{"location":"Newline-Layout-Renderer/#configuration-syntax","text":"${newline}","title":"Configuration Syntax"},{"location":"NoRawValue-layout-renderer/","text":"Prevents the output of another layout renderer to be treated as raw value. Platforms Supported: All Introduced in NLog 4.6 Some NLog targets are able to extract the raw value directly from the layout renderer without first rendering as string. Specifying norawvalue=true will force rendering as string. Configuration Syntax ${date:format=yyyy-MM-dd:norawvalue=true}","title":"NoRawValue layout renderer"},{"location":"NoRawValue-layout-renderer/#configuration-syntax","text":"${date:format=yyyy-MM-dd:norawvalue=true}","title":"Configuration Syntax"},{"location":"Null-target/","text":"Discards log messages. Used mainly for debugging and benchmarking. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"Null\" name=\"String\" formatMessage=\"Boolean\" layout=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options formatMessage - Indicates whether to perform layout calculation. Boolean Default: False layout - Layout used to format log messages. Boolean Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Example This example is useful for testing the performance of the NLog engine. Logging rule without any writeTo= option is much faster way to do filtering (Zero allocation). <targets> <target xsi:type=\"Null\" name=\"BlackHole\" formatMessage=\"false\" /> </targets> <rules> <!-- ignore events written that are written to a logger which starts with \"Namespace.\" --> <logger name=\"Namespace.*\" minlevel=\"Debug\" writeTo=\"BlackHole\" final=\"true\" /> </rules>","title":"Null target"},{"location":"Null-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Null\" name=\"String\" formatMessage=\"Boolean\" layout=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Null-target/#parameters","text":"","title":"Parameters"},{"location":"Null-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Null-target/#layout-options","text":"formatMessage - Indicates whether to perform layout calculation. Boolean Default: False layout - Layout used to format log messages. Boolean Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}","title":"Layout Options"},{"location":"Null-target/#example","text":"This example is useful for testing the performance of the NLog engine. Logging rule without any writeTo= option is much faster way to do filtering (Zero allocation). <targets> <target xsi:type=\"Null\" name=\"BlackHole\" formatMessage=\"false\" /> </targets> <rules> <!-- ignore events written that are written to a logger which starts with \"Namespace.\" --> <logger name=\"Namespace.*\" minlevel=\"Debug\" writeTo=\"BlackHole\" final=\"true\" /> </rules>","title":"Example"},{"location":"ObjectPath-Layout-Renderer/","text":"Render a property of an object. Introducted in NLog 4.6.7 Platforms Supported: All Configuration Syntax ${object-path:${exception}:path=String:Format=String:Culture=String} ${exception:objectpath=String} // Ambient way Parameters Rendering Options objectpath - Path to the property. Nested properties are supported. Arrays aren't supported. format - Format when rendering. culture - Culture code used for formatting. Example Assume we catch new ExternalException(\"Exception with errorCode\", 5000) ${exception:objectpath=HResult} // results in 5000 ${object-path:${exception}:path=HResult:Culture=NL-nl:format=N2}\"; // results in 5.000,00","title":"ObjectPath Layout Renderer"},{"location":"ObjectPath-Layout-Renderer/#configuration-syntax","text":"${object-path:${exception}:path=String:Format=String:Culture=String} ${exception:objectpath=String} // Ambient way","title":"Configuration Syntax"},{"location":"ObjectPath-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"ObjectPath-Layout-Renderer/#rendering-options","text":"objectpath - Path to the property. Nested properties are supported. Arrays aren't supported. format - Format when rendering. culture - Culture code used for formatting.","title":"Rendering Options"},{"location":"ObjectPath-Layout-Renderer/#example","text":"Assume we catch new ExternalException(\"Exception with errorCode\", 5000) ${exception:objectpath=HResult} // results in 5000 ${object-path:${exception}:path=HResult:Culture=NL-nl:format=N2}\"; // results in 5.000,00","title":"Example"},{"location":"OnException-Layout-Renderer/","text":"Only outputs the inner layout when exception has been defined for log message. Platforms Supported: All Configuration Syntax ${onexception:inner=Layout} Parameters Transformation Options inner - Wrapped layout. Layout else - Layout if the condition is not true (introduced in NLog 5.0.5)","title":"OnException Layout Renderer"},{"location":"OnException-Layout-Renderer/#configuration-syntax","text":"${onexception:inner=Layout}","title":"Configuration Syntax"},{"location":"OnException-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"OnException-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout else - Layout if the condition is not true (introduced in NLog 5.0.5)","title":"Transformation Options"},{"location":"OnHasProperties-Layout-Renderer/","text":"Only outputs the inner layout when event properties from structured logging are included with the logevent. Platforms Supported: All Introduced with NLog 4.7 Configuration Syntax ${onHasProperties:inner=Layout} Parameters Transformation Options inner - Wrapped layout. Layout else - Layout if the condition is not true (introduced in NLog 5.0.5) Example: ${onHasProperties:, Properties\\: ${all-event-properties}}","title":"OnHasProperties Layout Renderer"},{"location":"OnHasProperties-Layout-Renderer/#configuration-syntax","text":"${onHasProperties:inner=Layout}","title":"Configuration Syntax"},{"location":"OnHasProperties-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"OnHasProperties-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout else - Layout if the condition is not true (introduced in NLog 5.0.5)","title":"Transformation Options"},{"location":"OnHasProperties-Layout-Renderer/#example","text":"${onHasProperties:, Properties\\: ${all-event-properties}}","title":"Example:"},{"location":"OutputDebugString-target/","text":"Outputs log messages through the OutputDebugString Win32 API. That can be monitored using DebugView or Harvester Platforms Supported: Limited - Requires Windows and since NLog 5.0 then also nuget-package NLog.OutputDebugString Configuration Syntax <targets> <target xsi:type=\"OutputDebugString\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} header - Layout used to format header-output when initializing. Layout Introduced with NLog 5.0 footer - Layout used to format footer-output when closing. Layout Introduced with NLog 5.0 Notes Alternative targets for diagnostic output: - Trace-target for output to System.Diagnostics.Trace - DebugSystem-target for output to System.Diagnostics.Debug - Debugger-target for output to System.Diagnostics.Debugger.Log","title":"OutputDebugString target"},{"location":"OutputDebugString-target/#configuration-syntax","text":"<targets> <target xsi:type=\"OutputDebugString\" name=\"String\" layout=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"OutputDebugString-target/#parameters","text":"","title":"Parameters"},{"location":"OutputDebugString-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"OutputDebugString-target/#layout-options","text":"layout - Layout used to format log messages. Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} header - Layout used to format header-output when initializing. Layout Introduced with NLog 5.0 footer - Layout used to format footer-output when closing. Layout Introduced with NLog 5.0","title":"Layout Options"},{"location":"OutputDebugString-target/#notes","text":"Alternative targets for diagnostic output: - Trace-target for output to System.Diagnostics.Trace - DebugSystem-target for output to System.Diagnostics.Debug - Debugger-target for output to System.Diagnostics.Debugger.Log","title":"Notes"},{"location":"Pad-Layout-Renderer/","text":"Applies padding to another layout output. Platforms Supported: All Configuration Syntax ${pad:padCharacter=Char:padding=Integer:fixedLength=Boolean :inner=Layout:alignmentOnTruncation=PaddingHorizontalAlignment} or by using ambient property to modify output of other layout renderer: ${other:padding=5} Parameters Transformation Options padCharacter - Padding character. Char Default: (space character) padding - Number of characters to pad the output to. Positive padding values cause left padding, negative values cause right padding to the desired width. Integer fixedLength - Indicates whether to trim the rendered text to the absolute value of the padding length. Boolean Default: False inner - Wrapped layout. Layout alignmentOnTruncation - Indicates whether a value that has been truncated due to fixedLength=true is aligned to the left (characters removed from the right) or right (characters removed from the left). This is independent of the alignment applied when padding shorter strings out to padding characters. This property was introduced in NLog 4.0. Earlier versions always apply an alignment equivalent to alignmentOnTruncation=left . PaddingHorizontalAlignment Default: Left","title":"Pad Layout Renderer"},{"location":"Pad-Layout-Renderer/#configuration-syntax","text":"${pad:padCharacter=Char:padding=Integer:fixedLength=Boolean :inner=Layout:alignmentOnTruncation=PaddingHorizontalAlignment} or by using ambient property to modify output of other layout renderer: ${other:padding=5}","title":"Configuration Syntax"},{"location":"Pad-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Pad-Layout-Renderer/#transformation-options","text":"padCharacter - Padding character. Char Default: (space character) padding - Number of characters to pad the output to. Positive padding values cause left padding, negative values cause right padding to the desired width. Integer fixedLength - Indicates whether to trim the rendered text to the absolute value of the padding length. Boolean Default: False inner - Wrapped layout. Layout alignmentOnTruncation - Indicates whether a value that has been truncated due to fixedLength=true is aligned to the left (characters removed from the right) or right (characters removed from the left). This is independent of the alignment applied when padding shorter strings out to padding characters. This property was introduced in NLog 4.0. Earlier versions always apply an alignment equivalent to alignmentOnTruncation=left . PaddingHorizontalAlignment Default: Left","title":"Transformation Options"},{"location":"PerfCounter-target/","text":"PerformanceCounterTarget updates specified Windows Performance Counter on each write. Platforms Supported: Limited - Windows only and requires nuget-package NLog.PerformanceCounter with NLog 5.0 Configuration Syntax <targets> <target xsi:type=\"PerfCounter\" counterName=\"String\" categoryName=\"String\" instanceName=\"String\" counterHelp=\"String\" counterType=\"Enum\" autoCreate=\"Boolean\" incrementValue=\"Layout\" /> </targets> The actual Performance Counter is created by Installing targets Read more about using the Configuration File . Parameters counterName - Name of the performance counter. Required. categoryName - Name of the performance counter category. Required. instanceName - Performance counter instance name. counterHelp - Counter help text. counterType - Performance counter type. Default: NumberOfItems32 Possible values: AverageBase AverageCount64 AverageTimer32 CounterDelta32 CounterDelta64 CounterMultiBase CounterMultiTimer CounterMultiTimer100Ns CounterMultiTimer100NsInverse CounterMultiTimerInverse CounterTimer CounterTimerInverse CountPerTimeInterval32 CountPerTimeInterval64 ElapsedTime NumberOfItems32 NumberOfItems64 NumberOfItemsHEX32 NumberOfItemsHEX64 RateOfCountsPerSecond32 RateOfCountsPerSecond64 RawBase RawFraction SampleBase SampleCounter SampleFraction Timer100Ns Timer100NsInverse autoCreate - Indicates whether performance counter should be automatically created. incrementValue - The value by which to increment the counter. Layout. Default: 1. Introduced in NLog v4.2","title":"PerfCounter target"},{"location":"PerfCounter-target/#configuration-syntax","text":"<targets> <target xsi:type=\"PerfCounter\" counterName=\"String\" categoryName=\"String\" instanceName=\"String\" counterHelp=\"String\" counterType=\"Enum\" autoCreate=\"Boolean\" incrementValue=\"Layout\" /> </targets> The actual Performance Counter is created by Installing targets Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"PerfCounter-target/#parameters","text":"counterName - Name of the performance counter. Required. categoryName - Name of the performance counter category. Required. instanceName - Performance counter instance name. counterHelp - Counter help text. counterType - Performance counter type. Default: NumberOfItems32 Possible values: AverageBase AverageCount64 AverageTimer32 CounterDelta32 CounterDelta64 CounterMultiBase CounterMultiTimer CounterMultiTimer100Ns CounterMultiTimer100NsInverse CounterMultiTimerInverse CounterTimer CounterTimerInverse CountPerTimeInterval32 CountPerTimeInterval64 ElapsedTime NumberOfItems32 NumberOfItems64 NumberOfItemsHEX32 NumberOfItemsHEX64 RateOfCountsPerSecond32 RateOfCountsPerSecond64 RawBase RawFraction SampleBase SampleCounter SampleFraction Timer100Ns Timer100NsInverse autoCreate - Indicates whether performance counter should be automatically created. incrementValue - The value by which to increment the counter. Layout. Default: 1. Introduced in NLog v4.2","title":"Parameters"},{"location":"Performance/","text":"NLog has been created with performance in mind, and is optimized to have minimal impact on the actual application-code. It can easily handle 500.000 messages/sec, but if using NLog in ways not intended, then you might not get the expected performance. Logger optimizations When using the NLog Logger, then there are some things that affects optimal performance: Avoid constantly calling LogManager.GetLogger() and LogManager.GetCurrentClassLogger() by using static readonly variables. Defer message-formatting by not using string.format and string interpolation (Ex $\"Hello {world}\" ) but pass the arguments to the log method. If multiple threads are logging to the same NLog Target (file / console), then it is recommended to apply the AsyncWrapper . Conditional logging is recommended when creation of the log-message has an overhead, and logging is not always turned on. Defer message-formatting NLog has a strong focus on being able to defer the message-formatting. When using <targets async=\"true\"> or AsyncWrapper target then the formatting and writing can be done by a background-thread. The async message-formatting requires that all parameters are immutable. To ensure that they don't change after having called the Logger (Ex logging an object and disposing the object afterwards should not log a disposed object). The NLog Logger (During the creation of LogEventInfo) checks whether all parameters are immutable / primitive. If one is complex-object, then message-formatting is not deferred. When having more than 5 parameters then it will skip the performance optimization, because checking the immutable state of the parameters has a cost. Notice when using Microsoft Extension Logging with NLog, then NLog is not able to perform this optimization, because Microsoft Extension Logging handles the message-parsing and -formatting upfront. Layout configuration Many NLog LayoutRenderers have little overhead, and allows deferring the layout logic to background-thread when enabled with <targets async=\"true\"> (Activates AsyncWrapper target ). But if using NLog LayoutRenders that requires context capture of the current application-thread like ${threadid} , then the application-thread will get extra overhead to perform this context capture. This also happens with most ${aspnet-request} -layout-renderers as they have to extract values from the active HttpContext. If performance is very important and wants to make most use of the async background-thread, then one should focus on using ${longdate} , ${logger} , ${level} , ${message} and ${event-properties} . One should be careful with using ${callsite} and ${stacktrace} that outputs the call-site of the application-thread, because NLog makes the application-thread capture its current StackTrace, which is very expensive. NLog 5.0 introduces a new fluent Logger-API , that support caller-member-attributes, so the overhead from using ${callsite} is reduced a lot. Conditional logging NLog Logger has very little overhead when LogLevel is not enabled for any targets. But it might be noticeable if running in a tight loop and doing almost nothing, besides calling NLog Logger. If having a complex logging statement, then one can consider checking if LogLevel is enabled before executing it: if (Logger.IsDebugEnabled) Logger.Debug(GenerateMassiveLogEvent()); Starting of NLog 4.0 it\u2019s possible to only include the Trace and Debug call with a debug release. Instead of: Logger.Debug(\"entering method {0}\", methodname); Use: Logger.ConditionalDebug(\"entering method {0}\", methodname); This call will be removed by the .Net compiler if the DEBUG conditional compilation symbol is not set \u2013 default for release build. InternalLogger overhead NLog Internal Logging is very useful for troubleshooting. To be alerted about potential logging issues, then one can enable internalLogLevel=\"Warn\" to get warnings and errors. During troubleshooting sessions then one might use internalLogLevel=\"Trace\" , but make sure to turn it off again when issue has been resolved. The InternalLogger is not written for performance, and will give a significant performance hit. Automatic Extension Loading NLog 4.0 automatically scans for assemblies that contains extensions for NLog at initial startup. This will automatically trigger loading of debugging symbols. This will be give the experience that NLog slows down the application startup. NLog 5.0 no longer scans for assemblies at startup because of the startup overhead, and also because it doesn't work with the new csproj <packagereference> . To skip the NLog assembly scan, then execute this statement before loading NLog Config or creating NLog Logger: NLog.Config.ConfigurationItemFactory.Default = new NLog.Config.ConfigurationItemFactory(typeof(NLog.ILogger).GetTypeInfo().Assembly); Visual Studio Debugger pauses during NLog initialization Visual Studio is slow the first time when debugging application and having configured to load all debug symbol information.. To avoid these pasues then one can configure Visual Studio to 'Enable Just My Code` It is a checkbox in Visual Studio Options. See Just my Code File Logging Performance Single process applications (in single AppDomain) can optimize performance by configuring the FileTarget attributes: - keepFileOpen = True - concurrentwrites = False See also FileTarget - Performance To avoid the blocking file write operation, then one can consider to wrap the FileTarget within a AsyncWrapper (Very important if using keepFileOpen = False). This will also optimize the writing to disk, as it will be done in batches. Be careful as the default behavior is to discard log operations if they come fast. So it is recommended to change the overflow-policy for non-network targets: <targets> <default-wrapper xsi:type=\"AsyncWrapper\" overflowAction=\"Block\" /> ... Your File Targets Here ... </targets> Remember to Flush is very important, to ensure background threads have completed writing before application exit.","title":"Performance"},{"location":"Performance/#logger-optimizations","text":"When using the NLog Logger, then there are some things that affects optimal performance: Avoid constantly calling LogManager.GetLogger() and LogManager.GetCurrentClassLogger() by using static readonly variables. Defer message-formatting by not using string.format and string interpolation (Ex $\"Hello {world}\" ) but pass the arguments to the log method. If multiple threads are logging to the same NLog Target (file / console), then it is recommended to apply the AsyncWrapper . Conditional logging is recommended when creation of the log-message has an overhead, and logging is not always turned on.","title":"Logger optimizations"},{"location":"Performance/#defer-message-formatting","text":"NLog has a strong focus on being able to defer the message-formatting. When using <targets async=\"true\"> or AsyncWrapper target then the formatting and writing can be done by a background-thread. The async message-formatting requires that all parameters are immutable. To ensure that they don't change after having called the Logger (Ex logging an object and disposing the object afterwards should not log a disposed object). The NLog Logger (During the creation of LogEventInfo) checks whether all parameters are immutable / primitive. If one is complex-object, then message-formatting is not deferred. When having more than 5 parameters then it will skip the performance optimization, because checking the immutable state of the parameters has a cost. Notice when using Microsoft Extension Logging with NLog, then NLog is not able to perform this optimization, because Microsoft Extension Logging handles the message-parsing and -formatting upfront.","title":"Defer message-formatting"},{"location":"Performance/#layout-configuration","text":"Many NLog LayoutRenderers have little overhead, and allows deferring the layout logic to background-thread when enabled with <targets async=\"true\"> (Activates AsyncWrapper target ). But if using NLog LayoutRenders that requires context capture of the current application-thread like ${threadid} , then the application-thread will get extra overhead to perform this context capture. This also happens with most ${aspnet-request} -layout-renderers as they have to extract values from the active HttpContext. If performance is very important and wants to make most use of the async background-thread, then one should focus on using ${longdate} , ${logger} , ${level} , ${message} and ${event-properties} . One should be careful with using ${callsite} and ${stacktrace} that outputs the call-site of the application-thread, because NLog makes the application-thread capture its current StackTrace, which is very expensive. NLog 5.0 introduces a new fluent Logger-API , that support caller-member-attributes, so the overhead from using ${callsite} is reduced a lot.","title":"Layout configuration"},{"location":"Performance/#conditional-logging","text":"NLog Logger has very little overhead when LogLevel is not enabled for any targets. But it might be noticeable if running in a tight loop and doing almost nothing, besides calling NLog Logger. If having a complex logging statement, then one can consider checking if LogLevel is enabled before executing it: if (Logger.IsDebugEnabled) Logger.Debug(GenerateMassiveLogEvent()); Starting of NLog 4.0 it\u2019s possible to only include the Trace and Debug call with a debug release. Instead of: Logger.Debug(\"entering method {0}\", methodname); Use: Logger.ConditionalDebug(\"entering method {0}\", methodname); This call will be removed by the .Net compiler if the DEBUG conditional compilation symbol is not set \u2013 default for release build.","title":"Conditional logging"},{"location":"Performance/#internallogger-overhead","text":"NLog Internal Logging is very useful for troubleshooting. To be alerted about potential logging issues, then one can enable internalLogLevel=\"Warn\" to get warnings and errors. During troubleshooting sessions then one might use internalLogLevel=\"Trace\" , but make sure to turn it off again when issue has been resolved. The InternalLogger is not written for performance, and will give a significant performance hit.","title":"InternalLogger overhead"},{"location":"Performance/#automatic-extension-loading","text":"NLog 4.0 automatically scans for assemblies that contains extensions for NLog at initial startup. This will automatically trigger loading of debugging symbols. This will be give the experience that NLog slows down the application startup. NLog 5.0 no longer scans for assemblies at startup because of the startup overhead, and also because it doesn't work with the new csproj <packagereference> . To skip the NLog assembly scan, then execute this statement before loading NLog Config or creating NLog Logger: NLog.Config.ConfigurationItemFactory.Default = new NLog.Config.ConfigurationItemFactory(typeof(NLog.ILogger).GetTypeInfo().Assembly);","title":"Automatic Extension Loading"},{"location":"Performance/#visual-studio-debugger-pauses-during-nlog-initialization","text":"Visual Studio is slow the first time when debugging application and having configured to load all debug symbol information.. To avoid these pasues then one can configure Visual Studio to 'Enable Just My Code` It is a checkbox in Visual Studio Options. See Just my Code","title":"Visual Studio Debugger pauses during NLog initialization"},{"location":"Performance/#file-logging-performance","text":"Single process applications (in single AppDomain) can optimize performance by configuring the FileTarget attributes: - keepFileOpen = True - concurrentwrites = False See also FileTarget - Performance To avoid the blocking file write operation, then one can consider to wrap the FileTarget within a AsyncWrapper (Very important if using keepFileOpen = False). This will also optimize the writing to disk, as it will be done in batches. Be careful as the default behavior is to discard log operations if they come fast. So it is recommended to change the overflow-policy for non-network targets: <targets> <default-wrapper xsi:type=\"AsyncWrapper\" overflowAction=\"Block\" /> ... Your File Targets Here ... </targets> Remember to Flush is very important, to ensure background threads have completed writing before application exit.","title":"File Logging Performance"},{"location":"PerformanceCounter-Layout-Renderer/","text":"Retrieve value from Windows Performance Counter. Platforms Supported: Limited - Windows only and requires nuget-package NLog.PerformanceCounter with NLog 5.0 Configuration Syntax ${performancecounter:Category=String:Counter=PerformanceCounterType:Instance=String :IncrementValue=Integer:MachineName:string format=String:culture=Culture} Parameters Performance Counter Options Counter - Name of the performance counter. Required. Category - Name of the counter category. Required. Instance - Name of the performance counter instance. Optional. NLog 4.6 will automatically use current process as Instance-Id when Category = \"Process\" (Supports multi-instance) MachineName The name of the machine to read the performance counter from. Optional. Rendering Options Format - Format string for conversion from float to string. Introduced with NLog v4.6 Culture - Culture used for rendering. Culture Introduced with NLog v4.6","title":"PerformanceCounter Layout Renderer"},{"location":"PerformanceCounter-Layout-Renderer/#configuration-syntax","text":"${performancecounter:Category=String:Counter=PerformanceCounterType:Instance=String :IncrementValue=Integer:MachineName:string format=String:culture=Culture}","title":"Configuration Syntax"},{"location":"PerformanceCounter-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"PerformanceCounter-Layout-Renderer/#performance-counter-options","text":"Counter - Name of the performance counter. Required. Category - Name of the counter category. Required. Instance - Name of the performance counter instance. Optional. NLog 4.6 will automatically use current process as Instance-Id when Category = \"Process\" (Supports multi-instance) MachineName The name of the machine to read the performance counter from. Optional.","title":"Performance Counter Options"},{"location":"PerformanceCounter-Layout-Renderer/#rendering-options","text":"Format - Format string for conversion from float to string. Introduced with NLog v4.6 Culture - Culture used for rendering. Culture Introduced with NLog v4.6","title":"Rendering Options"},{"location":"Platform-Support/","text":"The platform support is now integrated with the config options list. See https://nlog-project.org/config/ screenshot:","title":"Platform Support"},{"location":"PostFilteringWrapper-target/","text":"Filters buffered log entries based on a set of conditions that are evaluated on a group of events. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"AsyncWrapper\" name=\"String\"> <target xsi:type=\"PostFilteringWrapper\" name=\"String\" defaultFilter=\"Condition\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> <when exists=\"Condition\" filter=\"Condition\"/><!-- repeated --> </target> </target> </targets> Parameters General Options name - Name of the target. Filtering Options defaultFilter - Default filter to be applied when no specific rule matches. Conditions Filtering Rules rules - The collection of filtering rules. The rules are processed top-down and the first rule that matches determines the filtering condition to be applied to log events. Collection Each collection item is represented by \\ element with the following attributes: exists - Condition to be tested. Conditions Required. filter - Resulting filter to be applied when the condition matches. Conditions Required. Remarks Before NLog 4.6.4 then the filtering only worked when using PostFilteringWrapper with some type of buffering target or wrapper, such as AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper. It is still a good idea add the wrapper when using the rules filtering-logic (will inspect the entire batch when a single logevent matches exists ).","title":"PostFilteringWrapper target"},{"location":"PostFilteringWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"AsyncWrapper\" name=\"String\"> <target xsi:type=\"PostFilteringWrapper\" name=\"String\" defaultFilter=\"Condition\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> <when exists=\"Condition\" filter=\"Condition\"/><!-- repeated --> </target> </target> </targets>","title":"Configuration Syntax"},{"location":"PostFilteringWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"PostFilteringWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"PostFilteringWrapper-target/#filtering-options","text":"defaultFilter - Default filter to be applied when no specific rule matches. Conditions","title":"Filtering Options"},{"location":"PostFilteringWrapper-target/#filtering-rules","text":"rules - The collection of filtering rules. The rules are processed top-down and the first rule that matches determines the filtering condition to be applied to log events. Collection Each collection item is represented by \\ element with the following attributes: exists - Condition to be tested. Conditions Required. filter - Resulting filter to be applied when the condition matches. Conditions Required.","title":"Filtering Rules"},{"location":"PostFilteringWrapper-target/#remarks","text":"Before NLog 4.6.4 then the filtering only worked when using PostFilteringWrapper with some type of buffering target or wrapper, such as AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper. It is still a good idea add the wrapper when using the rules filtering-logic (will inspect the entire batch when a single logevent matches exists ).","title":"Remarks"},{"location":"ProcessDir-Layout-Renderer/","text":"The current process executable directory of the application. Platforms Supported: Limited (Not supported for NetStandard1.3) Introduced in NLog v4.7.1. See also ${basedir} , ${specialfolder} , ${currentdir} , ${tempdir} Configuration Syntax ${processdir:dir=String:file=String} Parameters Advanced Options dir: Name of the directory to be Path.Combine()'d with the process directory. file: Name of the file to be Path.Combine()'d with the process directory. Remarks This is the same as using ${basedir:processDir=true} . See also: FileTarget FileName Directory","title":"ProcessDir Layout Renderer"},{"location":"ProcessDir-Layout-Renderer/#configuration-syntax","text":"${processdir:dir=String:file=String}","title":"Configuration Syntax"},{"location":"ProcessDir-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"ProcessDir-Layout-Renderer/#advanced-options","text":"dir: Name of the directory to be Path.Combine()'d with the process directory. file: Name of the file to be Path.Combine()'d with the process directory.","title":"Advanced Options"},{"location":"ProcessDir-Layout-Renderer/#remarks","text":"This is the same as using ${basedir:processDir=true} . See also: FileTarget FileName Directory","title":"Remarks"},{"location":"ProcessId-Layout-Renderer/","text":"The identifier of the current process. Platforms Supported: Limited (Not supported on NetStandard1.3) Configuration Syntax ${processid}","title":"ProcessId Layout Renderer"},{"location":"ProcessId-Layout-Renderer/#configuration-syntax","text":"${processid}","title":"Configuration Syntax"},{"location":"ProcessInfo-Layout-Renderer/","text":"The information about the running process returned by Process.GetCurrentProcess() Platforms Supported: Limited (Not supported on NetStandard1.3) Configuration Syntax ${processinfo:property=Enum:format=string} Parameters Rendering Options property - Property to retrieve. Default: Id Possible values: ExitCode - Exit Code (Not available for current process). ExitTime - Exit Time (Not available for current process). Handle - Process Handle. HandleCount - Handle Count. HasExited - Whether process has exited (Not available for current process). Id - Process ID. MachineName - Machine name. MainWindowHandle - Handle of the main window. MainWindowTitle - Title of the main window. MaxWorkingSet - Maximum Working Set. MinWorkingSet - Minimum Working Set. NonPagedSystemMemorySize - Non-paged System Memory Size. NonPagedSystemMemorySize64 - Non-paged System Memory Size (64-bit). PagedMemorySize - Paged Memory Size. PagedMemorySize64 - Paged Memory Size (64-bit).. PagedSystemMemorySize - Paged System Memory Size. PagedSystemMemorySize64 - Paged System Memory Size (64-bit). PeakPagedMemorySize - Peak Paged Memory Size. PeakPagedMemorySize64 - Peak Paged Memory Size (64-bit). PeakVirtualMemorySize - Peak Virtual Memory Size. PeakVirtualMemorySize64 - Peak Virtual Memory Size (64-bit).. PeakWorkingSet - Peak Working Set Size. PeakWorkingSet64 - Peak Working Set Size (64-bit). PriorityBoostEnabled - Whether priority boost is enabled. PriorityClass - Priority Class. PrivateMemorySize - Private Memory Size. PrivateMemorySize64 - Private Memory Size (64-bit). PrivilegedProcessorTime - Privileged Processor Time. ProcessName - Process Name. Responding - Whether process is responding. SessionId - Session ID. StartTime - Process Start Time. TotalProcessorTime - Total Processor Time. UserProcessorTime - User Processor Time. VirtualMemorySize - Virtual Memory Size. VirtualMemorySize64 - Virtual Memory Size (64-bit). WorkingSet - Working Set Size. WorkingSet64 - Working Set Size (64-bit) format formatstring in the value is formatable. Ex. formatting process StartTime. Introduced in NLog 4.4","title":"ProcessInfo Layout Renderer"},{"location":"ProcessInfo-Layout-Renderer/#configuration-syntax","text":"${processinfo:property=Enum:format=string}","title":"Configuration Syntax"},{"location":"ProcessInfo-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"ProcessInfo-Layout-Renderer/#rendering-options","text":"property - Property to retrieve. Default: Id Possible values: ExitCode - Exit Code (Not available for current process). ExitTime - Exit Time (Not available for current process). Handle - Process Handle. HandleCount - Handle Count. HasExited - Whether process has exited (Not available for current process). Id - Process ID. MachineName - Machine name. MainWindowHandle - Handle of the main window. MainWindowTitle - Title of the main window. MaxWorkingSet - Maximum Working Set. MinWorkingSet - Minimum Working Set. NonPagedSystemMemorySize - Non-paged System Memory Size. NonPagedSystemMemorySize64 - Non-paged System Memory Size (64-bit). PagedMemorySize - Paged Memory Size. PagedMemorySize64 - Paged Memory Size (64-bit).. PagedSystemMemorySize - Paged System Memory Size. PagedSystemMemorySize64 - Paged System Memory Size (64-bit). PeakPagedMemorySize - Peak Paged Memory Size. PeakPagedMemorySize64 - Peak Paged Memory Size (64-bit). PeakVirtualMemorySize - Peak Virtual Memory Size. PeakVirtualMemorySize64 - Peak Virtual Memory Size (64-bit).. PeakWorkingSet - Peak Working Set Size. PeakWorkingSet64 - Peak Working Set Size (64-bit). PriorityBoostEnabled - Whether priority boost is enabled. PriorityClass - Priority Class. PrivateMemorySize - Private Memory Size. PrivateMemorySize64 - Private Memory Size (64-bit). PrivilegedProcessorTime - Privileged Processor Time. ProcessName - Process Name. Responding - Whether process is responding. SessionId - Session ID. StartTime - Process Start Time. TotalProcessorTime - Total Processor Time. UserProcessorTime - User Processor Time. VirtualMemorySize - Virtual Memory Size. VirtualMemorySize64 - Virtual Memory Size (64-bit). WorkingSet - Working Set Size. WorkingSet64 - Working Set Size (64-bit) format formatstring in the value is formatable. Ex. formatting process StartTime. Introduced in NLog 4.4","title":"Rendering Options"},{"location":"Processname-Layout-Renderer/","text":"The name of the current process. Platforms Supported: Limited (Not supported on NetStandard1.3) Configuration Syntax ${processname:fullName=Boolean} Parameters Rendering Options fullName - Indicates whether to write the full path to the process executable. Boolean Default: False","title":"Processname Layout Renderer"},{"location":"Processname-Layout-Renderer/#configuration-syntax","text":"${processname:fullName=Boolean}","title":"Configuration Syntax"},{"location":"Processname-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Processname-Layout-Renderer/#rendering-options","text":"fullName - Indicates whether to write the full path to the process executable. Boolean Default: False","title":"Rendering Options"},{"location":"Processtime-Layout-Renderer/","text":"The process lifetime in format HH:mm:ss.mmm. Platforms Supported: All See also ${time} , ${date} , ${longdate} , ${shortdate} Configuration Syntax ${processtime:invariant=Boolean} Parameters Rendering Options invariant - Indicates whether to output in invariant time format, and not lookup of current cultureinfo. Boolean Default: true (Before NLog 5.0 the default was false) Introduced with NLog 4.5.2 culture - Culture used for time format. Default: InvariantCulture Introduced with NLog 5.0","title":"Processtime Layout Renderer"},{"location":"Processtime-Layout-Renderer/#configuration-syntax","text":"${processtime:invariant=Boolean}","title":"Configuration Syntax"},{"location":"Processtime-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Processtime-Layout-Renderer/#rendering-options","text":"invariant - Indicates whether to output in invariant time format, and not lookup of current cultureinfo. Boolean Default: true (Before NLog 5.0 the default was false) Introduced with NLog 4.5.2 culture - Culture used for time format. Default: InvariantCulture Introduced with NLog 5.0","title":"Rendering Options"},{"location":"Properties-constraints-for-custom-extensions/","text":"Custom Targets, layout etc. could have properties. When configuring from the XML config, there are some limitations on the types. Supported types Supported types for Targets, Layouts and Layout renderers: .NET primitive types: e.g. bool, char, decimal, double, float, int, uint, etc. Enums (use short name in the XML) Encoding CultureInfo Type LineEndingMode Uri NLog types: Layout , SimpleLayout & ConditionExpression Types which has an implicit conversion from string Types which are using TypeDescriptor from string Collections, introduced in NLog 4.4. See section Collection types Collection types Introduced in NLog 4.4, collection types could be used. Usage in XML: comma separated string. If the value contains a comma, single quote the whole value. Examples: - value=\"one arg\" - value=\"1,2\" - value=\"value1,'value2, with comma'\" Supported types: - IList<T> / IList - IEnumerable<T> / IEnumerable - ISet<T> / HashSet<T> with the following types: - .NET built in types (string, int, double, object) - enums - culture, encoding, Type - not supported: Layout Not supported: - Arrays - Non-generic List - Non-gereric IList - Custom class implementing/inheriting types listed above (because of performance) PS: .NET 3.5 hasn't ISet<T> , so use HashSet<T> XML Elements For targets and layout renderers there is also support for XML elements. E.g. the JSON layout : <target name=\"jsonFile\" xsi:type=\"File\" fileName=\"${logFileNamePrefix}.json\"> <layout xsi:type=\"JsonLayout\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level:upperCase=true}\"/> <attribute name=\"message\" layout=\"${message}\" /> </layout> </target> Usage in C# [ArrayParameter(typeof(JsonAttribute), \"attribute\")] public IList<JsonAttribute> Attributes { get; private set; } [NLogConfigurationItem] public class JsonAttribute {} //needs default ctor Another example is the Database target","title":"Properties constraints for custom extensions"},{"location":"Properties-constraints-for-custom-extensions/#supported-types","text":"Supported types for Targets, Layouts and Layout renderers: .NET primitive types: e.g. bool, char, decimal, double, float, int, uint, etc. Enums (use short name in the XML) Encoding CultureInfo Type LineEndingMode Uri NLog types: Layout , SimpleLayout & ConditionExpression Types which has an implicit conversion from string Types which are using TypeDescriptor from string Collections, introduced in NLog 4.4. See section Collection types","title":"Supported types"},{"location":"Properties-constraints-for-custom-extensions/#collection-types","text":"Introduced in NLog 4.4, collection types could be used. Usage in XML: comma separated string. If the value contains a comma, single quote the whole value. Examples: - value=\"one arg\" - value=\"1,2\" - value=\"value1,'value2, with comma'\" Supported types: - IList<T> / IList - IEnumerable<T> / IEnumerable - ISet<T> / HashSet<T> with the following types: - .NET built in types (string, int, double, object) - enums - culture, encoding, Type - not supported: Layout Not supported: - Arrays - Non-generic List - Non-gereric IList - Custom class implementing/inheriting types listed above (because of performance) PS: .NET 3.5 hasn't ISet<T> , so use HashSet<T>","title":"Collection types"},{"location":"Properties-constraints-for-custom-extensions/#xml-elements","text":"For targets and layout renderers there is also support for XML elements. E.g. the JSON layout : <target name=\"jsonFile\" xsi:type=\"File\" fileName=\"${logFileNamePrefix}.json\"> <layout xsi:type=\"JsonLayout\"> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level:upperCase=true}\"/> <attribute name=\"message\" layout=\"${message}\" /> </layout> </target> Usage in C# [ArrayParameter(typeof(JsonAttribute), \"attribute\")] public IList<JsonAttribute> Attributes { get; private set; } [NLogConfigurationItem] public class JsonAttribute {} //needs default ctor Another example is the Database target","title":"XML Elements"},{"location":"QPC-Layout-Renderer/","text":"High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds. Platforms Supported: Limited (Only for .NetFramework and deprecated with NLog 5.0) Configuration Syntax ${qpc:normalize=Boolean:difference=Boolean:alignDecimalPoint=Boolean :precision=Integer:seconds=Boolean} Parameters Rendering Options normalize - Indicates whether to normalize the result by subtracting it from the result of the first call (so that it's effectively zero-based). Boolean Default: True difference - Indicates whether to output the difference between the result of QueryPerformanceCounter and the previous one. Boolean Default: False alignDecimalPoint - Indicates whether to align decimal point (emit non-significant zeros). Boolean Default: True precision - Number of decimal digits to be included in output. Integer Default: 4 seconds - Indicates whether to convert the result to seconds by dividing by the result of QueryPerformanceFrequency(). Boolean Default: True","title":"QPC Layout Renderer"},{"location":"QPC-Layout-Renderer/#configuration-syntax","text":"${qpc:normalize=Boolean:difference=Boolean:alignDecimalPoint=Boolean :precision=Integer:seconds=Boolean}","title":"Configuration Syntax"},{"location":"QPC-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"QPC-Layout-Renderer/#rendering-options","text":"normalize - Indicates whether to normalize the result by subtracting it from the result of the first call (so that it's effectively zero-based). Boolean Default: True difference - Indicates whether to output the difference between the result of QueryPerformanceCounter and the previous one. Boolean Default: False alignDecimalPoint - Indicates whether to align decimal point (emit non-significant zeros). Boolean Default: True precision - Number of decimal digits to be included in output. Integer Default: 4 seconds - Indicates whether to convert the result to seconds by dividing by the result of QueryPerformanceFrequency(). Boolean Default: True","title":"Rendering Options"},{"location":"RandomizeGroup-target/","text":"Sends log messages to a randomly selected target. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"RandomizeGroup\" name=\"String\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets> Parameters General Options name - Name of the target.","title":"RandomizeGroup target"},{"location":"RandomizeGroup-target/#configuration-syntax","text":"<targets> <target xsi:type=\"RandomizeGroup\" name=\"String\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets>","title":"Configuration Syntax"},{"location":"RandomizeGroup-target/#parameters","text":"","title":"Parameters"},{"location":"RandomizeGroup-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Register-your-custom-component/","text":"NLog extensions must be registered before they can be used in NLog configuration. This can be done in different ways: Include assembly-name in type for NLog extensions NLog 5.0 introduces the ability to use fully qualified name when specifying the type for a config-item. <nlog> <targets> <target name=\"mytarget\" type=\"CustomTarget, MyAssemblyName\" /> </targets> Register NLog extensions from assembly in NLog config Include your assembly with the <extensions> syntax. Use the assembly name (not the filename) <nlog> <extensions> <add assembly=\"MyAssemblyName\"/> </extensions> Register NLog extensions from assembly at runtime Provide the name of the assembly, which contains the NLog extension types: NLog.LogManager.Setup().SetupExtensions(s => s.RegisterAssembly(\"MyAssemblyName\")); Register NLog extensions from delegate at runtime Register manually your extension. Do this before loading the NLog config (Creating the first Logger-object), so in the beginning of e.g. main() , or app_start . LogFactory SetupExtensions NLog 4.7 introduces a new method LogManager.Setup() , that allows fluent configuration of the LogFactory options. This will be a common place for all settings, instead of static methods on the different NLog types. To register a custom LayoutRenderer: NLog.LogManager.Setup().SetupExtensions(s => s.RegisterLayoutRenderer(\"trace_id\", (logevent) => CorrelationIdentifier.TraceId.ToString()) ); To register a custom Target: NLog.LogManager.Setup().SetupExtensions(s => s.RegisterTarget<MyNamespace.MyFirstTarget>(\"MyFirst\") ); Short syntax Short syntax introduced in NLog 4.4 //target Target.Register<MyNamespace.MyFirstTarget>(\"MyFirst\"); //generic Target.Register(\"MyFirst\", typeof(MyNamespace.MyFirstTarget)); //OR, dynamic //layout renderer LayoutRenderer.Register<MyNamespace.MyFirstLayoutRenderer>(\"MyFirst\"); //generic LayoutRenderer.Register(\"MyFirst\", typeof(MyNamespace.MyFirstLayoutRenderer)); //dynamic //layout Layout.Register<MyNamespace.CsvLayout>(\"csv\"); //generic Layout.Register(\"csv\", typeof(MyNamespace.CsvLayout)); //dynamic Older syntax Older syntax, still supported //target ConfigurationItemFactory.Default.Targets .RegisterDefinition(\"MyFirst\", typeof(MyNamespace.MyFirstTarget)); //layout renderer ConfigurationItemFactory.Default.LayoutRenderers .RegisterDefinition(\"hello-world\", typeof(MyNamespace.HelloWorldLayoutRenderer)); //layout ConfigurationItemFactory.Default.Layouts .RegisterDefinition(\"csv\", typeof(MyNamespace.CsvLayout)); Automatic loading NLog extensions from assemblies with NLog prefix \u26a0\ufe0f NLog 5.0 no longer automatically scans all assemblies to register NLog extensions. This avoids an overhead during startup, and because it doesn't work with <packagereference> . To explicit enable the automatic scanning, then one can specify autoLoadAssemblies=\"true\" in <nlog> . Introduced in NLog 4.0, where it automatically scans all assemblies starting with \"NLog\", and attempt to register any available NLog extensions types. Name your assembly \"NLog*.dll\", like \u201cNLog.CustomTarget.dll\u201d. When the assembly is in the same folder as nlog.dll, it will be autoloaded when the configuration changes.","title":"Register your custom component"},{"location":"Register-your-custom-component/#include-assembly-name-in-type-for-nlog-extensions","text":"NLog 5.0 introduces the ability to use fully qualified name when specifying the type for a config-item. <nlog> <targets> <target name=\"mytarget\" type=\"CustomTarget, MyAssemblyName\" /> </targets>","title":"Include assembly-name in type for NLog extensions"},{"location":"Register-your-custom-component/#register-nlog-extensions-from-assembly-in-nlog-config","text":"Include your assembly with the <extensions> syntax. Use the assembly name (not the filename) <nlog> <extensions> <add assembly=\"MyAssemblyName\"/> </extensions>","title":"Register NLog extensions from assembly in NLog config"},{"location":"Register-your-custom-component/#register-nlog-extensions-from-assembly-at-runtime","text":"Provide the name of the assembly, which contains the NLog extension types: NLog.LogManager.Setup().SetupExtensions(s => s.RegisterAssembly(\"MyAssemblyName\"));","title":"Register NLog extensions from assembly at runtime"},{"location":"Register-your-custom-component/#register-nlog-extensions-from-delegate-at-runtime","text":"Register manually your extension. Do this before loading the NLog config (Creating the first Logger-object), so in the beginning of e.g. main() , or app_start .","title":"Register NLog extensions from delegate at runtime"},{"location":"Register-your-custom-component/#logfactory-setupextensions","text":"NLog 4.7 introduces a new method LogManager.Setup() , that allows fluent configuration of the LogFactory options. This will be a common place for all settings, instead of static methods on the different NLog types. To register a custom LayoutRenderer: NLog.LogManager.Setup().SetupExtensions(s => s.RegisterLayoutRenderer(\"trace_id\", (logevent) => CorrelationIdentifier.TraceId.ToString()) ); To register a custom Target: NLog.LogManager.Setup().SetupExtensions(s => s.RegisterTarget<MyNamespace.MyFirstTarget>(\"MyFirst\") );","title":"LogFactory SetupExtensions"},{"location":"Register-your-custom-component/#short-syntax","text":"Short syntax introduced in NLog 4.4 //target Target.Register<MyNamespace.MyFirstTarget>(\"MyFirst\"); //generic Target.Register(\"MyFirst\", typeof(MyNamespace.MyFirstTarget)); //OR, dynamic //layout renderer LayoutRenderer.Register<MyNamespace.MyFirstLayoutRenderer>(\"MyFirst\"); //generic LayoutRenderer.Register(\"MyFirst\", typeof(MyNamespace.MyFirstLayoutRenderer)); //dynamic //layout Layout.Register<MyNamespace.CsvLayout>(\"csv\"); //generic Layout.Register(\"csv\", typeof(MyNamespace.CsvLayout)); //dynamic","title":"Short syntax"},{"location":"Register-your-custom-component/#older-syntax","text":"Older syntax, still supported //target ConfigurationItemFactory.Default.Targets .RegisterDefinition(\"MyFirst\", typeof(MyNamespace.MyFirstTarget)); //layout renderer ConfigurationItemFactory.Default.LayoutRenderers .RegisterDefinition(\"hello-world\", typeof(MyNamespace.HelloWorldLayoutRenderer)); //layout ConfigurationItemFactory.Default.Layouts .RegisterDefinition(\"csv\", typeof(MyNamespace.CsvLayout));","title":"Older syntax"},{"location":"Register-your-custom-component/#automatic-loading-nlog-extensions-from-assemblies-with-nlog-prefix","text":"\u26a0\ufe0f NLog 5.0 no longer automatically scans all assemblies to register NLog extensions. This avoids an overhead during startup, and because it doesn't work with <packagereference> . To explicit enable the automatic scanning, then one can specify autoLoadAssemblies=\"true\" in <nlog> . Introduced in NLog 4.0, where it automatically scans all assemblies starting with \"NLog\", and attempt to register any available NLog extensions types. Name your assembly \"NLog*.dll\", like \u201cNLog.CustomTarget.dll\u201d. When the assembly is in the same folder as nlog.dll, it will be autoloaded when the configuration changes.","title":"Automatic loading NLog extensions from assemblies with NLog prefix"},{"location":"Registry-Layout-Renderer/","text":"A value from the Registry. Platforms Supported: All - Requires nuget-package NLog.WindowsRegistry Configuration Syntax ${registry:value=Layout:key=Layout:defaultValue=Layout:view=enum:requireEscapingSlashesInDefaultValue=boolean} Parameters Registry Options value - Registry value name. Since NLog 4.3 a Layout . Before String . key - Registry key. Required. Since NLog 4.3 a Layout . Before String . Must have the form: hive /key/subkey/name Possible hives: HKLM/HKEY_LOCAL_MACHINE/HKCU/HKEY_CURRENT_USER Also possible since NLog 4.3: HKEY_CLASSES_ROOT/HKEY_USERS/HKEY_CURRENT_CONFIG/HKEY_DYN_DATA/HKEY_PERFORMANCE_DATA defaultValue - Value to be output when the specified registry key or value is not found. Since NLog 4.3 a Layout . Before String . RequireEscapingSlashesInDefaultValue - Introduced in NLog 4.3 boolean . Require escaping backward slashes in DefaultValue . Need to be backwardscompatible. Default true . Will be removed in the future. View - Introduced in NLog 4.3 . Registry32, Registry64, Default","title":"Registry Layout Renderer"},{"location":"Registry-Layout-Renderer/#configuration-syntax","text":"${registry:value=Layout:key=Layout:defaultValue=Layout:view=enum:requireEscapingSlashesInDefaultValue=boolean}","title":"Configuration Syntax"},{"location":"Registry-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Registry-Layout-Renderer/#registry-options","text":"value - Registry value name. Since NLog 4.3 a Layout . Before String . key - Registry key. Required. Since NLog 4.3 a Layout . Before String . Must have the form: hive /key/subkey/name Possible hives: HKLM/HKEY_LOCAL_MACHINE/HKCU/HKEY_CURRENT_USER Also possible since NLog 4.3: HKEY_CLASSES_ROOT/HKEY_USERS/HKEY_CURRENT_CONFIG/HKEY_DYN_DATA/HKEY_PERFORMANCE_DATA defaultValue - Value to be output when the specified registry key or value is not found. Since NLog 4.3 a Layout . Before String . RequireEscapingSlashesInDefaultValue - Introduced in NLog 4.3 boolean . Require escaping backward slashes in DefaultValue . Need to be backwardscompatible. Default true . Will be removed in the future. View - Introduced in NLog 4.3 . Registry32, Registry64, Default","title":"Registry Options"},{"location":"Reinitialize-NLog-configuration/","text":"The combination of dynamic logging configuration and NLog-targets that only applies configuration during initialization can give a catch22. You want to have logging up and running early, but this will fail if NLog-targets initialization depends on configuration settings being available. This can lead to NLog-targets failing to initialize so NLog suddenly is disabled, or NLog-targets never using the configured destination. GDC and whenEmpty The recommended solution to this problem is to make use of GDC and whenEmpty : <target xsi:type=\"ElasticSearch\" uri=\"${gdc:item=targetUri:whenEmpty=http\\://localhost}\"> Then one can apply the dynamic configuration change like this: NLog.GlobalDiagnosticsContext.Set(\"targetUri\", \"http://127.0.0.1:9200\"); NLog.LogManager.Configuration = NLog.LogManager.Configuration?.Reload(); Please note that Configuration.Reload() will cause all NLog-variables to be reset. This is why GDC is being used to store the dynamic configuration. Re-initialize single target The standard NLog targets supports reinitialization, but it is not always supported by 3rdParty NLog targets. This can happen if closing NLog-target performs dispose of members, that are only initialized in the constructor of the NLog-target. var target = NLog.LogManager.Configuration?.FindTargetByName<BlobStorageTarget>(\"blob\"); target?.Dispose(); // Closes the target so it is uninitialized NLog.LogManager.ReconfigExistingLoggers(); // Ensures all targets are initialized Knowing the name of the NLog-target can sometimes be a challenge, especially if the NLog-target is wrapped using AsyncWrapper or BufferingWrapper . One can also do this: NLog.LogManager.Configuration?.AllTargets.OfType<BlobStorageTarget>().ToList().ForEach(t => t.Dispose()); NLog.LogManager.ReconfigExistingLoggers(); // Ensures all targets are initialized Re-initialize all targets This is the big hammer, and might not be supported by all NLog-targets. This can happen if closing NLog-target performs dispose of members, that are only initialized in the constructor of the NLog-target. NLog.LogManager.Configuration = NLog.LogManager.Configuration;","title":"Reinitialize NLog configuration"},{"location":"Reinitialize-NLog-configuration/#gdc-and-whenempty","text":"The recommended solution to this problem is to make use of GDC and whenEmpty : <target xsi:type=\"ElasticSearch\" uri=\"${gdc:item=targetUri:whenEmpty=http\\://localhost}\"> Then one can apply the dynamic configuration change like this: NLog.GlobalDiagnosticsContext.Set(\"targetUri\", \"http://127.0.0.1:9200\"); NLog.LogManager.Configuration = NLog.LogManager.Configuration?.Reload(); Please note that Configuration.Reload() will cause all NLog-variables to be reset. This is why GDC is being used to store the dynamic configuration.","title":"GDC and whenEmpty"},{"location":"Reinitialize-NLog-configuration/#re-initialize-single-target","text":"The standard NLog targets supports reinitialization, but it is not always supported by 3rdParty NLog targets. This can happen if closing NLog-target performs dispose of members, that are only initialized in the constructor of the NLog-target. var target = NLog.LogManager.Configuration?.FindTargetByName<BlobStorageTarget>(\"blob\"); target?.Dispose(); // Closes the target so it is uninitialized NLog.LogManager.ReconfigExistingLoggers(); // Ensures all targets are initialized Knowing the name of the NLog-target can sometimes be a challenge, especially if the NLog-target is wrapped using AsyncWrapper or BufferingWrapper . One can also do this: NLog.LogManager.Configuration?.AllTargets.OfType<BlobStorageTarget>().ToList().ForEach(t => t.Dispose()); NLog.LogManager.ReconfigExistingLoggers(); // Ensures all targets are initialized","title":"Re-initialize single target"},{"location":"Reinitialize-NLog-configuration/#re-initialize-all-targets","text":"This is the big hammer, and might not be supported by all NLog-targets. This can happen if closing NLog-target performs dispose of members, that are only initialized in the constructor of the NLog-target. NLog.LogManager.Configuration = NLog.LogManager.Configuration;","title":"Re-initialize all targets"},{"location":"RepeatingWrapper-target/","text":"Repeats each log event the specified number of times. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"RepeatingWrapper\" name=\"String\" repeatCount=\"Integer\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Repeating Options repeatCount - Number of times to repeat each log message. Integer Default: 3","title":"RepeatingWrapper target"},{"location":"RepeatingWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"RepeatingWrapper\" name=\"String\" repeatCount=\"Integer\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"RepeatingWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"RepeatingWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"RepeatingWrapper-target/#repeating-options","text":"repeatCount - Number of times to repeat each log message. Integer Default: 3","title":"Repeating Options"},{"location":"Replace-Layout-Renderer/","text":"Replaces a string in the output of another layout with another string. Platforms Supported: All Configuration Syntax ${replace:searchFor=String:wholeWords=Boolean:replaceWith=String :ignoreCase=Boolean:regex=Boolean:inner=Layout} Parameters Search/Replace Options searchFor - Text to search for. String replaceWith - Replacement string. ignoreCase - Indicates whether to ignore case when searching. Boolean Default: False wholeWords - Indicates whether to search for whole words. Boolean Default: False regex - Indicates whether regular expressions should be used when searching. Boolean Default: False replaceGroupName - Specifies group name for Matched Subexpressions , where it will perform replace of all matches with that group name. Ex. (?<groupname>subexpression) Introduced with NLog 3.1 compileRegex - Compiles the Regex. Setting this to true can improve regex performance, but costs memory. Boolean Default: False Introduced with NLog 4.7 Transformation Options inner - Wrapped layout. Layout Examples Replace sensitive data, that starts with password= or password: <variable name=\"replacePasswords\" value=\"${replace:inner=${message}:searchFor=(?i)(?&lt;=password[=\\:])(.*?)(?=(\\;|$| )):replaceWith=******:regex=true}\" /> Truncate after token, search for , and replace everything after with empty string: <variable name=\"truncateAfterComma\" value=\"${replace:inner=${aspnet-request-ip}:searchFor=,.*:replaceWith=:regex=true}\" /> With Regular Expressions keep in mind the content escaping rules to escape special characters in Regex. Specifically } and \\ . So for example the regular expression (\\d{3})+ would need to be escaped like so in your configuration <variable name=\"messageNoDigits\" value=\"${replace:inner=${message}:searchFor=(\\\\d{3\\})+:replaceWith=:regex=true}\" /> There is a dedicated layout ${replace-newlines} for replacing / removing newlines (handles both Unix and Windows newlines)","title":"Replace Layout Renderer"},{"location":"Replace-Layout-Renderer/#configuration-syntax","text":"${replace:searchFor=String:wholeWords=Boolean:replaceWith=String :ignoreCase=Boolean:regex=Boolean:inner=Layout}","title":"Configuration Syntax"},{"location":"Replace-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Replace-Layout-Renderer/#searchreplace-options","text":"searchFor - Text to search for. String replaceWith - Replacement string. ignoreCase - Indicates whether to ignore case when searching. Boolean Default: False wholeWords - Indicates whether to search for whole words. Boolean Default: False regex - Indicates whether regular expressions should be used when searching. Boolean Default: False replaceGroupName - Specifies group name for Matched Subexpressions , where it will perform replace of all matches with that group name. Ex. (?<groupname>subexpression) Introduced with NLog 3.1 compileRegex - Compiles the Regex. Setting this to true can improve regex performance, but costs memory. Boolean Default: False Introduced with NLog 4.7","title":"Search/Replace Options"},{"location":"Replace-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout","title":"Transformation Options"},{"location":"Replace-Layout-Renderer/#examples","text":"Replace sensitive data, that starts with password= or password: <variable name=\"replacePasswords\" value=\"${replace:inner=${message}:searchFor=(?i)(?&lt;=password[=\\:])(.*?)(?=(\\;|$| )):replaceWith=******:regex=true}\" /> Truncate after token, search for , and replace everything after with empty string: <variable name=\"truncateAfterComma\" value=\"${replace:inner=${aspnet-request-ip}:searchFor=,.*:replaceWith=:regex=true}\" /> With Regular Expressions keep in mind the content escaping rules to escape special characters in Regex. Specifically } and \\ . So for example the regular expression (\\d{3})+ would need to be escaped like so in your configuration <variable name=\"messageNoDigits\" value=\"${replace:inner=${message}:searchFor=(\\\\d{3\\})+:replaceWith=:regex=true}\" /> There is a dedicated layout ${replace-newlines} for replacing / removing newlines (handles both Unix and Windows newlines)","title":"Examples"},{"location":"Replace-NewLines-Layout-Renderer/","text":"Replaces a new lines in the output of another layout with a string. Platforms Supported: All Introduced in NLog 4.1 For general purpose search and replace there is also ${replace} Configuration Syntax ${replace-newlines:inner=Layout:replacement=String} Parameters replacement - Text to replace newlines with. Default is \" \" (space) Examples logger.Info(\"foo {0}\", \"bar\" + System.Environment.NewLine + \"123\"); To space ${replace-newlines:${message}} Will result in \"foo bar 123\" To other char ${replace-newlines:replacement=|:${message}} Will result in \"foo bar|123\"","title":"Replace NewLines Layout Renderer"},{"location":"Replace-NewLines-Layout-Renderer/#configuration-syntax","text":"${replace-newlines:inner=Layout:replacement=String}","title":"Configuration Syntax"},{"location":"Replace-NewLines-Layout-Renderer/#parameters","text":"replacement - Text to replace newlines with. Default is \" \" (space)","title":"Parameters"},{"location":"Replace-NewLines-Layout-Renderer/#examples","text":"logger.Info(\"foo {0}\", \"bar\" + System.Environment.NewLine + \"123\");","title":"Examples"},{"location":"Replace-NewLines-Layout-Renderer/#to-space","text":"${replace-newlines:${message}} Will result in \"foo bar 123\"","title":"To space"},{"location":"Replace-NewLines-Layout-Renderer/#to-other-char","text":"${replace-newlines:replacement=|:${message}} Will result in \"foo bar|123\"","title":"To other char"},{"location":"RetryingWrapper-target/","text":"Retries in case of write error. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"RetryingWrapper\" name=\"String\" retryDelayMilliseconds=\"Integer\" retryCount=\"Integer\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets> Parameters General Options name - Name of the target. Retrying Options retryDelayMilliseconds - Time to wait between retries in milliseconds. Integer Default: 100 retryCount - Number of retries that should be attempted on the wrapped target in case of a failure. Integer Default: 3 enableBatchWrite - Allow batch writes, and only introduced retry delay once before retrying the batch items one at a time. Introduced with NLog 5.0 Notes When failure occurs, then the retry will perform a synchronous delay. To avoid blocking the application-thread in the retry-sleep, then consider using AsyncWrapper like this: AsyncWrapper -> RetryWrapper -> Actual Target","title":"RetryingWrapper target"},{"location":"RetryingWrapper-target/#configuration-syntax","text":"<targets> <target xsi:type=\"RetryingWrapper\" name=\"String\" retryDelayMilliseconds=\"Integer\" retryCount=\"Integer\"> <target xsi:type=\"wrappedTargetType\" ...target properties... /> </target> </targets>","title":"Configuration Syntax"},{"location":"RetryingWrapper-target/#parameters","text":"","title":"Parameters"},{"location":"RetryingWrapper-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"RetryingWrapper-target/#retrying-options","text":"retryDelayMilliseconds - Time to wait between retries in milliseconds. Integer Default: 100 retryCount - Number of retries that should be attempted on the wrapped target in case of a failure. Integer Default: 3 enableBatchWrite - Allow batch writes, and only introduced retry delay once before retrying the batch items one at a time. Introduced with NLog 5.0","title":"Retrying Options"},{"location":"RetryingWrapper-target/#notes","text":"When failure occurs, then the retry will perform a synchronous delay. To avoid blocking the application-thread in the retry-sleep, then consider using AsyncWrapper like this: AsyncWrapper -> RetryWrapper -> Actual Target","title":"Notes"},{"location":"RichTextBox-target/","text":"Log text a Rich Text Box control in an existing or new form. Platforms Supported: .NetFramework + NETCore3.1 + NET5.0 - Requires nuget-package NLog.Windows.Forms Configuration Syntax <targets> <target xsi:type=\"RichTextBox\" name=\"String\" layout=\"Layout\" height=\"Integer\" autoScroll=\"Boolean\" maxLines=\"Integer\" showMinimized=\"Boolean\" toolWindow=\"Boolean\" controlName=\"String\" formName=\"String\" width=\"Integer\" useDefaultRowColoringRules=\"Boolean\"> <word-coloring backgroundColor=\"String\" fontColor=\"String\" ignoreCase=\"Boolean\" regex=\"String\" style=\"Enum\" text=\"String\" wholeWords=\"Boolean\"/><!-- repeated --> <row-coloring backgroundColor=\"String\" condition=\"Condition\" fontColor=\"String\" style=\"Enum\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Form Options height - Initial height of the form with rich text box. This parameter is ignored when logging to existing form control. autoScroll - Indicates whether scroll bar will be moved automatically to show most recent log entries. maxLines - Maximum number of lines the rich text box will store (or 0 to disable this feature). After exceeding the maximum number, first line will be deleted. showMinimized - Indicates whether the created form will be initially minimized. This parameter is ignored when logging to existing form control. toolWindow - Indicates whether the created window will be a tool window. Default: True This parameter is ignored when logging to existing form control. Tool windows have thin border, and do not show up in the task bar. controlName - Name of RichTextBox to which Nlog will write. formName - Name of the Form on which the control is located. If there is no open form of a specified name then NLog will create a new one. width - Initial width of the form with rich text box. This parameter is ignored when logging to existing form control. Highlighting Options wordColoringRules - The word highlighting rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty fontColor - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty ignoreCase - Indicates whether to ignore case when comparing texts. Boolean Default: False regex - Regular expression to be matched. You must specify either text or regex. style - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing. Possible values: Bold - Italic - Regular - Strikeout - Underline - text - Text to be matched. You must specify either text or regex. wholeWords - Indicates whether to match whole words only. Boolean Default: False useDefaultRowColoringRules - Indicates whether to use default coloring rules.Boolean Default: False rowColoringRules - The row coloring rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty fontColor - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty ignoreCase - Indicates whether to ignore case when comparing texts. Boolean Default: False regex - Regular expression to be matched. You must specify either text or regex. style - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing. Possible values: Bold - Italic - Regular - Strikeout - Underline - Possible values are the same as in FontStyle enum in System.Drawing","title":"RichTextBox target"},{"location":"RichTextBox-target/#configuration-syntax","text":"<targets> <target xsi:type=\"RichTextBox\" name=\"String\" layout=\"Layout\" height=\"Integer\" autoScroll=\"Boolean\" maxLines=\"Integer\" showMinimized=\"Boolean\" toolWindow=\"Boolean\" controlName=\"String\" formName=\"String\" width=\"Integer\" useDefaultRowColoringRules=\"Boolean\"> <word-coloring backgroundColor=\"String\" fontColor=\"String\" ignoreCase=\"Boolean\" regex=\"String\" style=\"Enum\" text=\"String\" wholeWords=\"Boolean\"/><!-- repeated --> <row-coloring backgroundColor=\"String\" condition=\"Condition\" fontColor=\"String\" style=\"Enum\"/><!-- repeated --> </target> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"RichTextBox-target/#parameters","text":"","title":"Parameters"},{"location":"RichTextBox-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"RichTextBox-target/#layout-options","text":"layout - Layout used to format log messages. Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}","title":"Layout Options"},{"location":"RichTextBox-target/#form-options","text":"height - Initial height of the form with rich text box. This parameter is ignored when logging to existing form control. autoScroll - Indicates whether scroll bar will be moved automatically to show most recent log entries. maxLines - Maximum number of lines the rich text box will store (or 0 to disable this feature). After exceeding the maximum number, first line will be deleted. showMinimized - Indicates whether the created form will be initially minimized. This parameter is ignored when logging to existing form control. toolWindow - Indicates whether the created window will be a tool window. Default: True This parameter is ignored when logging to existing form control. Tool windows have thin border, and do not show up in the task bar. controlName - Name of RichTextBox to which Nlog will write. formName - Name of the Form on which the control is located. If there is no open form of a specified name then NLog will create a new one. width - Initial width of the form with rich text box. This parameter is ignored when logging to existing form control.","title":"Form Options"},{"location":"RichTextBox-target/#highlighting-options","text":"wordColoringRules - The word highlighting rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty fontColor - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty ignoreCase - Indicates whether to ignore case when comparing texts. Boolean Default: False regex - Regular expression to be matched. You must specify either text or regex. style - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing. Possible values: Bold - Italic - Regular - Strikeout - Underline - text - Text to be matched. You must specify either text or regex. wholeWords - Indicates whether to match whole words only. Boolean Default: False useDefaultRowColoringRules - Indicates whether to use default coloring rules.Boolean Default: False rowColoringRules - The row coloring rules. Collection Each collection item is represented by \\ element with the following attributes: backgroundColor - Background color. Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed. Default: Empty fontColor - Font color. Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed. Default: Empty ignoreCase - Indicates whether to ignore case when comparing texts. Boolean Default: False regex - Regular expression to be matched. You must specify either text or regex. style - Font style of matched text. Possible values are the same as in FontStyle enum in System.Drawing. Possible values: Bold - Italic - Regular - Strikeout - Underline - Possible values are the same as in FontStyle enum in System.Drawing","title":"Highlighting Options"},{"location":"Right-layout-renderer/","text":"Right part of a text Platforms Supported: All Introduced in NLog 4.6 Related: ${substring} ${left} Configuration Syntax ${right:inner=Layout:length=Integer} Read more about using the Configuration File . Parameters Transformation Options inner - Wrapped layout. [DefaultParameter] so Inner: is not required if it's the first Layout length - Length in characters. Integer Required.","title":"Right layout renderer"},{"location":"Right-layout-renderer/#configuration-syntax","text":"${right:inner=Layout:length=Integer} Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Right-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Right-layout-renderer/#transformation-options","text":"inner - Wrapped layout. [DefaultParameter] so Inner: is not required if it's the first Layout length - Length in characters. Integer Required.","title":"Transformation Options"},{"location":"Rot13-Layout-Renderer/","text":"Decodes text \"encrypted\" with ROT-13. Platforms Supported: All Configuration Syntax ${rot13:inner=Layout:text=Layout} Parameters Transformation Options inner - Wrapped layout. Layout text - Layout to be wrapped. Layout This variable is for backwards compatibility Remarks See https://en.wikipedia.org/wiki/ROT13.","title":"Rot13 Layout Renderer"},{"location":"Rot13-Layout-Renderer/#configuration-syntax","text":"${rot13:inner=Layout:text=Layout}","title":"Configuration Syntax"},{"location":"Rot13-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Rot13-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout text - Layout to be wrapped. Layout This variable is for backwards compatibility","title":"Transformation Options"},{"location":"Rot13-Layout-Renderer/#remarks","text":"See https://en.wikipedia.org/wiki/ROT13.","title":"Remarks"},{"location":"RoundRobinGroup-target/","text":"Distributes log events to targets in a round-robin fashion. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"RoundRobinGroup\" name=\"String\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets> Parameters General Options name - Name of the target.","title":"RoundRobinGroup target"},{"location":"RoundRobinGroup-target/#configuration-syntax","text":"<targets> <target xsi:type=\"RoundRobinGroup\" name=\"String\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets>","title":"Configuration Syntax"},{"location":"RoundRobinGroup-target/#parameters","text":"","title":"Parameters"},{"location":"RoundRobinGroup-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"SL-AppInfo-Layout-Renderer/","text":"Information about Silverlight application. Supported in Silverlight (Deprecated with NLog 5.0) Configuration Syntax ${sl-appinfo:option=Enum} Parameters Rendering Options option - Specific information to display. Default: 0 Possible values: HasElevatedPermissions - Whether application is running with elevated permissions. This parameter is not supported in: * NLog v2.0 for Silverlight 2.0 * NLog v2.0 for Silverlight 3.0 InstallState - Installed state of an application. This parameter is not supported in: * NLog v2.0 for Silverlight 2.0 IsOutOfBrowser - Whether application is running out-of-browser. This parameter is not supported in: * NLog v2.0 for Silverlight 2.0 XapUri - URI of the current application XAP file.","title":"SL AppInfo Layout Renderer"},{"location":"SL-AppInfo-Layout-Renderer/#configuration-syntax","text":"${sl-appinfo:option=Enum}","title":"Configuration Syntax"},{"location":"SL-AppInfo-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"SL-AppInfo-Layout-Renderer/#rendering-options","text":"option - Specific information to display. Default: 0 Possible values: HasElevatedPermissions - Whether application is running with elevated permissions. This parameter is not supported in: * NLog v2.0 for Silverlight 2.0 * NLog v2.0 for Silverlight 3.0 InstallState - Installed state of an application. This parameter is not supported in: * NLog v2.0 for Silverlight 2.0 IsOutOfBrowser - Whether application is running out-of-browser. This parameter is not supported in: * NLog v2.0 for Silverlight 2.0 XapUri - URI of the current application XAP file.","title":"Rendering Options"},{"location":"ScopeIndent-Layout-Renderer/","text":"ScopeContext Nested States are stored in the thread execution context. Similar to \"Nested Diagnostic Context\" (NDC) in Log4j. Platforms Supported: All (AsyncLocal is used for NetStandard and Net46, but older platforms uses Remoting.Messaging.CallContext ) Introduced with NLog 5.0.5 Inserts indent-delimiter for every nested state in the ScopeContext. Configuration Syntax ${scopeindent:indent=Layout} Parameters indent - Delimiter to insert for every nested state level in ScopeContext. Layout . Default (double space) Examples Logger.Info(\"Hello No Scope\"); // Will not be indented using (NLog.ScopeContext.PushNestedState(\"First Scope\")) { Logger.Info(\"Hello First Scope\"); // Will be indented once await InnerOperationAsync(); } static async Task InnerOperationAsync() { using (NLog.ScopeContext.PushNestedState(\"Second Scope\")) { Logger.Info(\"Hello Second Scope\"); // Will be indented twice await Task.Yield(); } }","title":"ScopeIndent Layout Renderer"},{"location":"ScopeIndent-Layout-Renderer/#configuration-syntax","text":"${scopeindent:indent=Layout}","title":"Configuration Syntax"},{"location":"ScopeIndent-Layout-Renderer/#parameters","text":"indent - Delimiter to insert for every nested state level in ScopeContext. Layout . Default (double space)","title":"Parameters"},{"location":"ScopeIndent-Layout-Renderer/#examples","text":"Logger.Info(\"Hello No Scope\"); // Will not be indented using (NLog.ScopeContext.PushNestedState(\"First Scope\")) { Logger.Info(\"Hello First Scope\"); // Will be indented once await InnerOperationAsync(); } static async Task InnerOperationAsync() { using (NLog.ScopeContext.PushNestedState(\"Second Scope\")) { Logger.Info(\"Hello Second Scope\"); // Will be indented twice await Task.Yield(); } }","title":"Examples"},{"location":"ScopeNested-Layout-Renderer/","text":"ScopeContext Nested States are stored in the thread execution context. Similar to \"Nested Diagnostic Context\" (NDC) in Log4j. Platforms Supported: All (AsyncLocal is used for NetStandard and Net46, but older platforms uses Remoting.Messaging.CallContext ) Introduced with NLog 5.0 that merges MDC + MDLC + NDC + NDLC into an unified ScopeContext. It enables one to assign a scope-name to the active scope (Ex. a request method-name). Then all logger-events created within the scoped logical context, can automatically capture the scope-name without needing to specify it with each LogEvent. The specified scope states will automatically flow together with async Tasks. See also NLog Context and ${scopeproperty} and ${scopetiming} Configuration Syntax ${scopenested:bottomFrames=Integer:topFrames=Integer:separator=String} Parameters bottomFrames - Number of bottom stack frames to be rendered. -1 is no limit. Integer . Default -1 . topFrames - Number of top stack frames to be rendered. -1 is no limit. Integer . Default -1 separator - Separator to be used for concatenating nested diagnostics context output. string . Default (space) format - Format string for conversion into string. Possible to use @ for Json-Array. culture - Format provider for conversion into string. Examples using (NLog.ScopeContext.PushNestedState(\"Outer Scope\")) { Logger.Info(\"Hello Outer\"); await InnerOperationAsync(); } static async Task InnerOperationAsync() { using (NLog.ScopeContext.PushNestedState(\"Inner Scope\")) { Logger.Info(\"Hello Inner\"); await Task.Yield(); } } The NLog Logger can also be used to update ScopeContext: var logger = NLog.LogManager.GetCurrentClassLogger(); using (logger.PushScopeNested(\"Outer Scope\")) { } .NET Core logging When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : using (_logger.BeginScope(\"Outer Scope\")) { _logger.LogDebug(\"Start process {ProccessName}, \"Main\"); } Indenting Log Messages Indent log-messages based on how many nested levels in ScopeContext using ${scopeindent} ${scopeindent}${message}","title":"ScopeNested Layout Renderer"},{"location":"ScopeNested-Layout-Renderer/#configuration-syntax","text":"${scopenested:bottomFrames=Integer:topFrames=Integer:separator=String}","title":"Configuration Syntax"},{"location":"ScopeNested-Layout-Renderer/#parameters","text":"bottomFrames - Number of bottom stack frames to be rendered. -1 is no limit. Integer . Default -1 . topFrames - Number of top stack frames to be rendered. -1 is no limit. Integer . Default -1 separator - Separator to be used for concatenating nested diagnostics context output. string . Default (space) format - Format string for conversion into string. Possible to use @ for Json-Array. culture - Format provider for conversion into string.","title":"Parameters"},{"location":"ScopeNested-Layout-Renderer/#examples","text":"using (NLog.ScopeContext.PushNestedState(\"Outer Scope\")) { Logger.Info(\"Hello Outer\"); await InnerOperationAsync(); } static async Task InnerOperationAsync() { using (NLog.ScopeContext.PushNestedState(\"Inner Scope\")) { Logger.Info(\"Hello Inner\"); await Task.Yield(); } } The NLog Logger can also be used to update ScopeContext: var logger = NLog.LogManager.GetCurrentClassLogger(); using (logger.PushScopeNested(\"Outer Scope\")) { }","title":"Examples"},{"location":"ScopeNested-Layout-Renderer/#net-core-logging","text":"When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : using (_logger.BeginScope(\"Outer Scope\")) { _logger.LogDebug(\"Start process {ProccessName}, \"Main\"); }","title":".NET Core logging"},{"location":"ScopeNested-Layout-Renderer/#indenting-log-messages","text":"Indent log-messages based on how many nested levels in ScopeContext using ${scopeindent} ${scopeindent}${message}","title":"Indenting Log Messages"},{"location":"ScopeProperty-Layout-Renderer/","text":"ScopeContext Properties are stored in the thread execution context. Similar to \"Mapped Diagnostic Context\" (MDC) in Log4j. Platforms Supported: All (AsyncLocal is used for NetStandard and Net46, but older platforms uses Remoting.Messaging.CallContext ) Introduced with NLog 5.0 that merges ${MDC} + ${MDLC} + ${NDC} + ${NDLC} into an unified ScopeContext. It enables one to assign one or more named properties to the active scope (Ex. a request CorrelationId). Then all logger-events created within the scoped logical context, can automatically include the scope-properties in the ouput without specifying with each LogEvent. The specified scope properties will automatically flow together with async Tasks. See also NLog Context and ${scopenested} and ${scopetiming} Configuration Syntax ${scopeproperty:item=String} Parameters item - Name of the item. Lookup is case-insensitive. Required. format - Format string for conversion into string. Possible to use @ for Json. culture - Format provider for conversion into string. Example using (NLog.ScopeContext.PushProperty(\"PropertyName\", \"PropertyValue\")) { Logger.Info(\"Hello World\"); // LogEvent can use ${scopeproperty:PropertyName} in target output } // \"PropertyName\" items has been removed from current context The NLog Logger can also be used for updating the ScopeContext: var logger = NLog.LogManager.GetCurrentClassLogger(); using (logger.PushScopeProperty(\"PropertyName\", \"PropertyValue\")) { logger.Info(\"Hello World\"); // LogEvent can use ${scopeproperty:PropertyName} in target output } .NET Core logging When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : //note: render userId via ${scopeproperty:userid} using (_logger.BeginScope(new[] { new KeyValuePair<string, object>(\"userid\", request.UserId) })) { _logger.LogDebug(\"Start process {ProccessName}, \"Main\"); } Fallback to default value When ScopeContext Property cannot be found (or has blank value), then one use whenEmpty to specify fallback value: ${scope-property:UserId:whenEmpty=42}","title":"ScopeProperty Layout Renderer"},{"location":"ScopeProperty-Layout-Renderer/#configuration-syntax","text":"${scopeproperty:item=String}","title":"Configuration Syntax"},{"location":"ScopeProperty-Layout-Renderer/#parameters","text":"item - Name of the item. Lookup is case-insensitive. Required. format - Format string for conversion into string. Possible to use @ for Json. culture - Format provider for conversion into string.","title":"Parameters"},{"location":"ScopeProperty-Layout-Renderer/#example","text":"using (NLog.ScopeContext.PushProperty(\"PropertyName\", \"PropertyValue\")) { Logger.Info(\"Hello World\"); // LogEvent can use ${scopeproperty:PropertyName} in target output } // \"PropertyName\" items has been removed from current context The NLog Logger can also be used for updating the ScopeContext: var logger = NLog.LogManager.GetCurrentClassLogger(); using (logger.PushScopeProperty(\"PropertyName\", \"PropertyValue\")) { logger.Info(\"Hello World\"); // LogEvent can use ${scopeproperty:PropertyName} in target output }","title":"Example"},{"location":"ScopeProperty-Layout-Renderer/#net-core-logging","text":"When using NLog.Extensions.Logging or NLog.Web.AspNetCore, you can also use BeginScope and more advanced options : //note: render userId via ${scopeproperty:userid} using (_logger.BeginScope(new[] { new KeyValuePair<string, object>(\"userid\", request.UserId) })) { _logger.LogDebug(\"Start process {ProccessName}, \"Main\"); }","title":".NET Core logging"},{"location":"ScopeProperty-Layout-Renderer/#fallback-to-default-value","text":"When ScopeContext Property cannot be found (or has blank value), then one use whenEmpty to specify fallback value: ${scope-property:UserId:whenEmpty=42}","title":"Fallback to default value"},{"location":"ScopeTiming-Layout-Renderer/","text":"ScopeContext allows one to give a scope name for an operation that can be async. When the scope begins then it automatically captures a timestamp. This can be used to show duration of the active scope. Platforms Supported: All Introduced in NLog 5.0 and replaces ${ndlctiming} See also NLog Context and ${scopeproperty} and ${scopenested} Configuration Syntax ${scopetiming:currentScope=Boolean:StartTime=Boolean:format=String} Parameters Rendering Options currentScope - Whether to only include the duration of the last scope created. Boolean . Default False . StartTime - Whether to just display the scope creation time, and not the duration. Boolean . Default False format - TimeSpan format. Can be any argument accepted by TimeSpan.ToString(format) . string . Default null","title":"ScopeTiming Layout Renderer"},{"location":"ScopeTiming-Layout-Renderer/#configuration-syntax","text":"${scopetiming:currentScope=Boolean:StartTime=Boolean:format=String}","title":"Configuration Syntax"},{"location":"ScopeTiming-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"ScopeTiming-Layout-Renderer/#rendering-options","text":"currentScope - Whether to only include the duration of the last scope created. Boolean . Default False . StartTime - Whether to just display the scope creation time, and not the duration. Boolean . Default False format - TimeSpan format. Can be any argument accepted by TimeSpan.ToString(format) . string . Default null","title":"Rendering Options"},{"location":"SequenceId-layout-renderer/","text":"The log sequence id (Reset to zero on application restart) Platforms Supported: All Introduced in NLog v4.5 Configuration syntax ${sequenceid}","title":"SequenceId layout renderer"},{"location":"SequenceId-layout-renderer/#configuration-syntax","text":"${sequenceid}","title":"Configuration syntax"},{"location":"ShortDate-Layout-Renderer/","text":"The short date in a sortable format yyyy-MM-dd. Platforms Supported: All Alternative ${date:format=yyyy_MM_dd} can be used to customize the DateTime-format. Configuration Syntax ${shortdate:universalTime=Boolean} Parameters Rendering Options universalTime - Indicates whether to output UTC time instead of local time. Boolean Default: False","title":"ShortDate Layout Renderer"},{"location":"ShortDate-Layout-Renderer/#configuration-syntax","text":"${shortdate:universalTime=Boolean}","title":"Configuration Syntax"},{"location":"ShortDate-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"ShortDate-Layout-Renderer/#rendering-options","text":"universalTime - Indicates whether to output UTC time instead of local time. Boolean Default: False","title":"Rendering Options"},{"location":"SimpleLayout/","text":"Represents a string with embedded placeholders that can render contextual information. Platforms Supported: All Configuration Syntax <targets> <target> <layout xsi:type=\"SimpleLayout\"> <!-- Layout Options --> <text>String</text> </layout> </target> </targets> Parameters Layout Options text - Layout text. Remarks This layout is not meant to be used explicitly. Instead you can just use a string containing layout renderers everywhere the layout is required.","title":"SimpleLayout"},{"location":"SimpleLayout/#configuration-syntax","text":"<targets> <target> <layout xsi:type=\"SimpleLayout\"> <!-- Layout Options --> <text>String</text> </layout> </target> </targets>","title":"Configuration Syntax"},{"location":"SimpleLayout/#parameters","text":"","title":"Parameters"},{"location":"SimpleLayout/#layout-options","text":"text - Layout text.","title":"Layout Options"},{"location":"SimpleLayout/#remarks","text":"This layout is not meant to be used explicitly. Instead you can just use a string containing layout renderers everywhere the layout is required.","title":"Remarks"},{"location":"Special-Folder-Layout-Renderer/","text":"System special folder path (includes My Documents, My Music, Program Files, Desktop, and more). Platforms Supported: Limited (Not supported on NetStandard1.3+1.5) See also ${processdir} , ${basedir} , ${currentdir} , ${tempdir} Configuration Syntax ${specialfolder:dir=String:file=String:folder=Enum} Parameters Advanced Options dir - Name of the directory to be Path.Combine()'d with the directory name. file - Name of the file to be Path.Combine()'d with the directory name. Rendering Options folder - System special folder to use. Full list of options is available at MSDN . The most common ones are: ApplicationData - Roaming application data for current user Windows Path = C:\\Users\\%USERNAME%\\AppData\\Roaming Xamarin Mono = $HOME/.config (or $XDG_CONFIG_HOME if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents/.config Xamarin Android = /data/data/@PACKAGE_NAME@/files/.config LocalApplicationData - Non roaming application data for current user Windows Path = C:\\Users\\%USERNAME%\\AppData\\Local Xamarin Mono = $HOME/.local/share (or $XDG_DATA_HOME if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents Xamarin Android = /data/data/@PACKAGE_NAME@/files/.local/share CommonApplicationData - Application data for all users (Good when running as Windows Service) Windows Path = C:\\ProgramData Xamarin Mono = /usr/share Xamarin iOS = /usr/share Xamarin Android = /usr/share MyDocuments - My Documents Windows Path = C:\\Users\\%USERNAME%\\Documents Xamarin Mono = $HOME Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents Xamarin Android = /data/data/@PACKAGE_NAME@/files Desktop - My Desktop Windows Path = C:\\Users\\%USERNAME%\\Desktop Xamarin Mono = $HOME/Desktop (or $XDG_DESKTOP_DIR if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents/Desktop Xamarin Android = /data/data/@PACKAGE_NAME@/files/Desktop UserProfile Windows Path = C:\\Users\\%USERNAME% Xamarin Mono = $HOME Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@ Xamarin Android = /data/data/@PACKAGE_NAME@/files Templates Windows Path = C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Templates Xamarin Mono = $HOME/Templates (or $XDG_TEMPLATES_DIR if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents/Templates Xamarin Android = /data/data/@PACKAGE_NAME@/files/Templates CommonTemplates Windows Path = C:\\ProgramData\\Microsoft\\Windows\\Templates Xamarin Mono = /usr/share/templates Xamarin iOS = /usr/share/templates Xamarin Android = /usr/share/templates Resources Windows Path = C:\\WINDOWS\\resources Xamarin iOS = /Library AdminTools CommonAdminTools CommonDesktopDirectory CommonDocuments CommonMusic CommonPictures CommonProgramFiles CommonProgramFilesX86 CommonPrograms CommonStartMenu CommonStartup CommonVideos Cookies DesktopDirectory (Same as Desktop ) Favorites Fonts History LocalizedResources MyComputer MyMusic MyPictures MyVideos NetworkShortcuts Personal (Same as MyDocuments ) PrinterShortcuts ProgramFiles ProgramFilesX86 Programs Recent SendTo StartMenu Startup System SystemX86 Windows Example fileName=\"${specialfolder:folder=ApplicationData}/Program/file.txt\"","title":"Special Folder Layout Renderer"},{"location":"Special-Folder-Layout-Renderer/#configuration-syntax","text":"${specialfolder:dir=String:file=String:folder=Enum}","title":"Configuration Syntax"},{"location":"Special-Folder-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Special-Folder-Layout-Renderer/#advanced-options","text":"dir - Name of the directory to be Path.Combine()'d with the directory name. file - Name of the file to be Path.Combine()'d with the directory name.","title":"Advanced Options"},{"location":"Special-Folder-Layout-Renderer/#rendering-options","text":"folder - System special folder to use. Full list of options is available at MSDN . The most common ones are: ApplicationData - Roaming application data for current user Windows Path = C:\\Users\\%USERNAME%\\AppData\\Roaming Xamarin Mono = $HOME/.config (or $XDG_CONFIG_HOME if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents/.config Xamarin Android = /data/data/@PACKAGE_NAME@/files/.config LocalApplicationData - Non roaming application data for current user Windows Path = C:\\Users\\%USERNAME%\\AppData\\Local Xamarin Mono = $HOME/.local/share (or $XDG_DATA_HOME if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents Xamarin Android = /data/data/@PACKAGE_NAME@/files/.local/share CommonApplicationData - Application data for all users (Good when running as Windows Service) Windows Path = C:\\ProgramData Xamarin Mono = /usr/share Xamarin iOS = /usr/share Xamarin Android = /usr/share MyDocuments - My Documents Windows Path = C:\\Users\\%USERNAME%\\Documents Xamarin Mono = $HOME Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents Xamarin Android = /data/data/@PACKAGE_NAME@/files Desktop - My Desktop Windows Path = C:\\Users\\%USERNAME%\\Desktop Xamarin Mono = $HOME/Desktop (or $XDG_DESKTOP_DIR if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents/Desktop Xamarin Android = /data/data/@PACKAGE_NAME@/files/Desktop UserProfile Windows Path = C:\\Users\\%USERNAME% Xamarin Mono = $HOME Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@ Xamarin Android = /data/data/@PACKAGE_NAME@/files Templates Windows Path = C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Templates Xamarin Mono = $HOME/Templates (or $XDG_TEMPLATES_DIR if set) Xamarin iOS = /data/Containers/Data/Application/@GENERATED_NAME@/Documents/Templates Xamarin Android = /data/data/@PACKAGE_NAME@/files/Templates CommonTemplates Windows Path = C:\\ProgramData\\Microsoft\\Windows\\Templates Xamarin Mono = /usr/share/templates Xamarin iOS = /usr/share/templates Xamarin Android = /usr/share/templates Resources Windows Path = C:\\WINDOWS\\resources Xamarin iOS = /Library AdminTools CommonAdminTools CommonDesktopDirectory CommonDocuments CommonMusic CommonPictures CommonProgramFiles CommonProgramFilesX86 CommonPrograms CommonStartMenu CommonStartup CommonVideos Cookies DesktopDirectory (Same as Desktop ) Favorites Fonts History LocalizedResources MyComputer MyMusic MyPictures MyVideos NetworkShortcuts Personal (Same as MyDocuments ) PrinterShortcuts ProgramFiles ProgramFilesX86 Programs Recent SendTo StartMenu Startup System SystemX86 Windows","title":"Rendering Options"},{"location":"Special-Folder-Layout-Renderer/#example","text":"fileName=\"${specialfolder:folder=ApplicationData}/Program/file.txt\"","title":"Example"},{"location":"SplitGroup-target/","text":"Writes log events to all targets. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"SplitGroup\" name=\"String\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets> Parameters General Options name - Name of the target.","title":"SplitGroup target"},{"location":"SplitGroup-target/#configuration-syntax","text":"<targets> <target xsi:type=\"SplitGroup\" name=\"String\"> <target xsi:type=\"wrappedTargetType\" ... /> <target xsi:type=\"wrappedTargetType\" ... /> ... <target xsi:type=\"wrappedTargetType\" ... /> </target> </targets>","title":"Configuration Syntax"},{"location":"SplitGroup-target/#parameters","text":"","title":"Parameters"},{"location":"SplitGroup-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Stack-Trace-Layout-Renderer/","text":"Render Stack trace of a log event. Platforms Supported: Limited (Not supported on NetStandard 1.3) Configuration Syntax ${stacktrace:format=Enum:topFrames=Integer:skipFrames=Integer:separator=String} Parameters Rendering Options format - Output format of the stack trace. Default: Flat Possible values: DetailedFlat - Detailed flat format (method signatures displayed in a single line). Flat - Flat format (class and method names displayed in a single line). Raw - Raw format (multiline - as returned by StackFrame.ToString() method). topFrames - Number of top stack frames to be rendered. Integer Default: 3 skipFrames - Numberof frames to skip. Integer Default: 0 separator - Stack frame separator string. Default: =>. To set new line use &#13;&#10; captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1 reverse - Whether to output the stacktrace in reverse order. Default: false Introduced with NLog 5.0 Examples Raw Note: To get the filenames and line numbers, include the PDB files. Note: Prior NLog 4.4.7, the result was always <filename unknown>:0:0 Main at offset 638 in file:line:column file1.cs:100:10 TestLogging at offset 590 in file:line:column testlogger.cs:30:10 WriteToLog at offset 112 in file:line:column testlogger.cs:10:20 Flat Program.Main Program.TestLogging NLogLoggerHelper.LogEvent DetailedFlat [Int32 Main()] [Void TestLogging()] [Void WriteToLog(NLog.Logger, NLog.LogLevel, System.String)]","title":"Stack Trace Layout Renderer"},{"location":"Stack-Trace-Layout-Renderer/#configuration-syntax","text":"${stacktrace:format=Enum:topFrames=Integer:skipFrames=Integer:separator=String}","title":"Configuration Syntax"},{"location":"Stack-Trace-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Stack-Trace-Layout-Renderer/#rendering-options","text":"format - Output format of the stack trace. Default: Flat Possible values: DetailedFlat - Detailed flat format (method signatures displayed in a single line). Flat - Flat format (class and method names displayed in a single line). Raw - Raw format (multiline - as returned by StackFrame.ToString() method). topFrames - Number of top stack frames to be rendered. Integer Default: 3 skipFrames - Numberof frames to skip. Integer Default: 0 separator - Stack frame separator string. Default: =>. To set new line use &#13;&#10; captureStackTrace - Logger should capture StackTrace, if it was not provided manually. Default: true Introduced with NLog 4.7.1 reverse - Whether to output the stacktrace in reverse order. Default: false Introduced with NLog 5.0","title":"Rendering Options"},{"location":"Stack-Trace-Layout-Renderer/#examples","text":"","title":"Examples"},{"location":"Stack-Trace-Layout-Renderer/#raw","text":"Note: To get the filenames and line numbers, include the PDB files. Note: Prior NLog 4.4.7, the result was always <filename unknown>:0:0 Main at offset 638 in file:line:column file1.cs:100:10 TestLogging at offset 590 in file:line:column testlogger.cs:30:10 WriteToLog at offset 112 in file:line:column testlogger.cs:10:20","title":"Raw"},{"location":"Stack-Trace-Layout-Renderer/#flat","text":"Program.Main Program.TestLogging NLogLoggerHelper.LogEvent","title":"Flat"},{"location":"Stack-Trace-Layout-Renderer/#detailedflat","text":"[Int32 Main()] [Void TestLogging()] [Void WriteToLog(NLog.Logger, NLog.LogLevel, System.String)]","title":"DetailedFlat"},{"location":"Substring-layout-renderer/","text":"Substring the result Platforms Supported: All Introduced in NLog 4.6 Related: ${left} ${right} Configuration Syntax ${substring:inner=Layout:length=Integer:start=Integer} Read more about using the Configuration File . Parameters Transformation Options inner - Wrapped layout. [DefaultParameter] so Inner: is not required if it's the first Layout length - Length in characters. If null , then the whole string Integer . Default: null start - Start index. Integer Default: 0","title":"Substring layout renderer"},{"location":"Substring-layout-renderer/#configuration-syntax","text":"${substring:inner=Layout:length=Integer:start=Integer} Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"Substring-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"Substring-layout-renderer/#transformation-options","text":"inner - Wrapped layout. [DefaultParameter] so Inner: is not required if it's the first Layout length - Length in characters. If null , then the whole string Integer . Default: null start - Start index. Integer Default: 0","title":"Transformation Options"},{"location":"Targets-and-Wrappers/","text":"Moved to Targets","title":"Targets and Wrappers"},{"location":"Targets/","text":"Use Targets are used to display, store, or pass log messages to another destination. There are two kinds of target; those that receive and handle the messages, and those that buffer or route the messages to another target. The second group are called 'wrapper' targets. Available Targets List of NLog targets can found here: https://nlog-project.org/config/?tab=targets Nuget Packages from NLog Writing your own target NLog can be extended with custom new targets. For more information, see: Extending-NLog","title":"Targets"},{"location":"Targets/#use","text":"Targets are used to display, store, or pass log messages to another destination. There are two kinds of target; those that receive and handle the messages, and those that buffer or route the messages to another target. The second group are called 'wrapper' targets.","title":"Use"},{"location":"Targets/#available-targets","text":"List of NLog targets can found here: https://nlog-project.org/config/?tab=targets Nuget Packages from NLog","title":"Available Targets"},{"location":"Targets/#writing-your-own-target","text":"NLog can be extended with custom new targets. For more information, see: Extending-NLog","title":"Writing your own target"},{"location":"TempDir-Layout-Renderer/","text":"The temporary directory on the local machine. Platforms Supported: All See also ${basedir} , ${processdir} , ${specialfolder} , ${currentdir} Configuration Syntax ${tempdir:dir=String:file=String} Parameters Advanced Options dir - Name of the directory to be Path.Combine()'d with the directory name. file - Name of the file to be Path.Combine()'d with the directory name.","title":"TempDir Layout Renderer"},{"location":"TempDir-Layout-Renderer/#configuration-syntax","text":"${tempdir:dir=String:file=String}","title":"Configuration Syntax"},{"location":"TempDir-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"TempDir-Layout-Renderer/#advanced-options","text":"dir - Name of the directory to be Path.Combine()'d with the directory name. file - Name of the file to be Path.Combine()'d with the directory name.","title":"Advanced Options"},{"location":"TextLayout/","text":"The default layout is a (plain) text layout. Platforms Supported: All The default has four layout renderers and is separated by a | Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Note: in code this is also called the SimpleLayout . This layout is not meant to be built explicitly, instead assign a string, e.g. Layout l = \"${longdate}|${level}|${logger}|${message}\" All layouts could be found here: https://nlog-project.org/config/?tab=layouts","title":"TextLayout"},{"location":"ThreadId-Layout-Renderer/","text":"The identifier of the current thread. Platforms Supported: All Configuration Syntax ${threadid}","title":"ThreadId Layout Renderer"},{"location":"ThreadId-Layout-Renderer/#configuration-syntax","text":"${threadid}","title":"Configuration Syntax"},{"location":"ThreadName-Layout-Renderer/","text":"The name of the current thread. Platforms Supported: Limited (Not supported on NetStandard 1.3) Configuration Syntax ${threadname}","title":"ThreadName Layout Renderer"},{"location":"ThreadName-Layout-Renderer/#configuration-syntax","text":"${threadname}","title":"Configuration Syntax"},{"location":"Ticks-Layout-Renderer/","text":"The Ticks value of current date and time. Platforms Supported: All Configuration Syntax ${ticks}","title":"Ticks Layout Renderer"},{"location":"Ticks-Layout-Renderer/#configuration-syntax","text":"${ticks}","title":"Configuration Syntax"},{"location":"Time-Layout-Renderer/","text":"The time in a 24-hour, sortable format HH:mm:ss.mmmm. Platforms Supported: All See also ${processtime} , ${date} , ${longdate} , ${shortdate} Configuration Syntax ${time:universalTime=Boolean:invariant=Boolean} Parameters Rendering Options universalTime - Indicates whether to output UTC time instead of local time. Boolean Default: False invariant - Indicates whether to output in invariant time format, and not lookup of current cultureinfo. Boolean Default: true (Before NLog 5.0 the default was false) Introduced with NLog 4.5.2 culture - Culture used for time format. Default: InvariantCulture Introduced with NLog 5.0","title":"Time Layout Renderer"},{"location":"Time-Layout-Renderer/#configuration-syntax","text":"${time:universalTime=Boolean:invariant=Boolean}","title":"Configuration Syntax"},{"location":"Time-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Time-Layout-Renderer/#rendering-options","text":"universalTime - Indicates whether to output UTC time instead of local time. Boolean Default: False invariant - Indicates whether to output in invariant time format, and not lookup of current cultureinfo. Boolean Default: true (Before NLog 5.0 the default was false) Introduced with NLog 4.5.2 culture - Culture used for time format. Default: InvariantCulture Introduced with NLog 5.0","title":"Rendering Options"},{"location":"Time-Source/","text":"NLog allows for a custom time source to be provided when timestamping log entries. In addition, NLog provides a few default time sources that can easily be configured via XML or code. By default, NLog uses the FastLocal as the default time source. Note that the time source is used mostly for accuracy, so there might be some quirks if using different time zones. The following sections were based and/or provided by Robert Va\u017ean\u2019s blog : NLog timestamps with millisecond accuracy How to configure NLog time source How to write custom NLog time source Configure Via XML The time source can be configured via XML by setting the time element with the XML name. The provided time sources don\u2019t include \u201cTimeSource\u201d in their XML names. <nlog> <time type=\"FastLocal\" /> <!-- Rest of Configuration --> </nlog> Configure Via Runtime Configuration The time source can be configured by inserting the following before any log messages are printed: TimeSource.Current = new FastLocalTimeSource(); Provided Time Sources The provided time sources range from accurate to fast with options for a Local or UTC time. The accuracy relates directly to Windows and how it balances accuracy, speed, and efficiency (i.e. battery life). By default, Windows is set to 16ms of accuracy, but can be changed via the API calls of timeBeginPeriod and timeEndPeriod . The AccurateLocal and AccurateUTC both utilize this API to provide a more accurate time reading. The speed of UTC is faster than the local variant, as the time zone conversion can take some time. Below are the provided time sources with NLog: XML Configuration Is Default? Runtime Configuration Time Accuracy Speed FastLocal Yes FastLocalTimeSource local 16ms very fast FastUTC No FastUtcTimeSource UTC 16ms very fast AccurateLocal No AccurateLocalTimeSource local 1ms slow AccurateUTC No AccurateUtcTimeSource UTC 1ms fast Performance benchmarks for time source implementations (used BenchmarkDotNet ): Method 32-bit Mean 64-bit Mean FastLocal 5.205 ns 3.546 ns FastUtc 5.202 ns 3.541 ns AccurateLocal 190.481 ns 85.927 ns AccurateUtc 137.258 ns 66.451 ns Custom Time Source Before implementing your own time source, see the provided time sources first. If none of those fit your needs, this section will guide you through the process. Create a class that inherits from TimeSource and implement the inherited property getter Time and method FromSystemTime . The property getter Time provides the current time instance. The method FromSystemTime converts the system time to the same form as if the time source provided it. [TimeSource(\"CustomTimeZone\")] public class CustomTimeZoneTimeSource : TimeSource { string ZoneName; TimeZoneInfo ZoneInfo; [Required] public string Zone { get { return ZoneName; } set { ZoneName = value; ZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(value); } } public override DateTime Time { get { return TimeZoneInfo.ConvertTimeFromUtc( DateTime.UtcNow, ZoneInfo); } } public override DateTime FromSystemTime(DateTime systemTime) { return TimeZoneInfo.ConvertTimeFromUtc(systemTime, ZoneInfo); } } In addition, add an attribute to the top that provides the name when specifying the type via XML. Your custom time source can be loaded by NLog just like any other NLog extension. See how to use the custom target / layout renderer . The Runtime Configuration would look like this: TimeSource.Current = new CustomTimeZoneTimeSource() { Zone = \"Central Standard Time\" } The XML Configuration would look like this: <nlog> <time type=\"CustomTimeZone\" zone=\"Central Standard Time\" /> </nlog>","title":"Time Source"},{"location":"Time-Source/#configure-via-xml","text":"The time source can be configured via XML by setting the time element with the XML name. The provided time sources don\u2019t include \u201cTimeSource\u201d in their XML names. <nlog> <time type=\"FastLocal\" /> <!-- Rest of Configuration --> </nlog>","title":"Configure Via XML"},{"location":"Time-Source/#configure-via-runtime-configuration","text":"The time source can be configured by inserting the following before any log messages are printed: TimeSource.Current = new FastLocalTimeSource();","title":"Configure Via Runtime Configuration"},{"location":"Time-Source/#provided-time-sources","text":"The provided time sources range from accurate to fast with options for a Local or UTC time. The accuracy relates directly to Windows and how it balances accuracy, speed, and efficiency (i.e. battery life). By default, Windows is set to 16ms of accuracy, but can be changed via the API calls of timeBeginPeriod and timeEndPeriod . The AccurateLocal and AccurateUTC both utilize this API to provide a more accurate time reading. The speed of UTC is faster than the local variant, as the time zone conversion can take some time. Below are the provided time sources with NLog: XML Configuration Is Default? Runtime Configuration Time Accuracy Speed FastLocal Yes FastLocalTimeSource local 16ms very fast FastUTC No FastUtcTimeSource UTC 16ms very fast AccurateLocal No AccurateLocalTimeSource local 1ms slow AccurateUTC No AccurateUtcTimeSource UTC 1ms fast Performance benchmarks for time source implementations (used BenchmarkDotNet ): Method 32-bit Mean 64-bit Mean FastLocal 5.205 ns 3.546 ns FastUtc 5.202 ns 3.541 ns AccurateLocal 190.481 ns 85.927 ns AccurateUtc 137.258 ns 66.451 ns","title":"Provided Time Sources"},{"location":"Time-Source/#custom-time-source","text":"Before implementing your own time source, see the provided time sources first. If none of those fit your needs, this section will guide you through the process. Create a class that inherits from TimeSource and implement the inherited property getter Time and method FromSystemTime . The property getter Time provides the current time instance. The method FromSystemTime converts the system time to the same form as if the time source provided it. [TimeSource(\"CustomTimeZone\")] public class CustomTimeZoneTimeSource : TimeSource { string ZoneName; TimeZoneInfo ZoneInfo; [Required] public string Zone { get { return ZoneName; } set { ZoneName = value; ZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(value); } } public override DateTime Time { get { return TimeZoneInfo.ConvertTimeFromUtc( DateTime.UtcNow, ZoneInfo); } } public override DateTime FromSystemTime(DateTime systemTime) { return TimeZoneInfo.ConvertTimeFromUtc(systemTime, ZoneInfo); } } In addition, add an attribute to the top that provides the name when specifying the type via XML. Your custom time source can be loaded by NLog just like any other NLog extension. See how to use the custom target / layout renderer . The Runtime Configuration would look like this: TimeSource.Current = new CustomTimeZoneTimeSource() { Zone = \"Central Standard Time\" } The XML Configuration would look like this: <nlog> <time type=\"CustomTimeZone\" zone=\"Central Standard Time\" /> </nlog>","title":"Custom Time Source"},{"location":"ToolStripItem-Target/","text":"Logs text to Windows.Forms.ToolStripItem property control of specified Name. Platforms Supported: .NetFramework + NETCore3.1 + NET5.0 - Requires nuget-package NLog.Windows.Forms v4.6 Configuration Syntax <targets> <target xsi:type=\"ToolStripItem\" name=\"String\" layout=\"Layout\" itemName=\"Layout\" toolStripName=\"Layout\" formName=\"Layout\" /> </targets> Read more about using the Configuration File . Parameters General Options name - Name of the target. Layout Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} Form Options itemName - Layout that resolves to the name of the ToolStripItem to which NLog will log write log text. Layout Required toolStripName - Layout that resolves to the name of ToolStrip that contains the ToolStripItem to which NLog will log write log text. Layout Required. formName - Layout that resolves to the name of the Form on which the ToolStrip is located. Layout","title":"ToolStripItem Target"},{"location":"ToolStripItem-Target/#configuration-syntax","text":"<targets> <target xsi:type=\"ToolStripItem\" name=\"String\" layout=\"Layout\" itemName=\"Layout\" toolStripName=\"Layout\" formName=\"Layout\" /> </targets> Read more about using the Configuration File .","title":"Configuration Syntax"},{"location":"ToolStripItem-Target/#parameters","text":"","title":"Parameters"},{"location":"ToolStripItem-Target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"ToolStripItem-Target/#layout-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}","title":"Layout Options"},{"location":"ToolStripItem-Target/#form-options","text":"itemName - Layout that resolves to the name of the ToolStripItem to which NLog will log write log text. Layout Required toolStripName - Layout that resolves to the name of ToolStrip that contains the ToolStripItem to which NLog will log write log text. Layout Required. formName - Layout that resolves to the name of the Form on which the ToolStrip is located. Layout","title":"Form Options"},{"location":"Tools/","text":"Log Viewers/Analyzers Logs produced by NLog can be analyzed using a number of GUI tools: NLog-specific viewers Gibraltar (using Gibraltar Adapter for NLog) - https://nlog-project.org/2009/11/01/gibraltar-adapter-for-nlog-released.html Sentinel - https://github.com/yarseyah/sentinel NLogViewer - http://github.com/jkowalski/NLogViewer (functional, but no longer in development, not recommended) LogEntries - http://www.logentries.com (service for cloud logging, has .net NLog target) Legit Log Viewer - http://www.legitlog.com/ (Although their website is down, it is Free and powerful log viewer.) ReflectInsight Viewer (using the ReflectInsight Extension for NLog) - http://insightextensions.codeplex.com/ Log4x-compatible viewers In general, any viewer supporting Log4J or Log4Net should work fine with NLog - see Chainsaw Target for information on configuring NLog for use with those viewers. * LogWizard - https://github.com/jtorjo/logwizard * Apache Chainsaw v2 - https://logging.apache.org/chainsaw/ * ~~DevIntelligence Log4Net Viewer - http://devintelligence.com/log4netviewer/~~ (questionable status) * C# WPF Log4Net Viewer - https://www.codeproject.com/KB/cs/logviewer.aspx * ~~Log4Net Dashboard - http://www.l4ndash.com/~~ (questionable status) * Log4View - http://www.log4view.com/ * Log2Console - https://github.com/Statyk7/log2console * ~~Legit Log Viewer - http://www.legitlog.com/~~ (questionable status) * ReflectInsight Viewer (using the ReflectInsight Extension for Log4net) - http://insightextensions.codeplex.com/ * Free Log File Viewer: Log4Net Log4J NLog - https://sourceforge.net/projects/gamutlogviewer/ * Lilith * OtrosLogViewer","title":"Tools"},{"location":"Tools/#log-viewersanalyzers","text":"Logs produced by NLog can be analyzed using a number of GUI tools:","title":"Log Viewers/Analyzers"},{"location":"Tools/#nlog-specific-viewers","text":"Gibraltar (using Gibraltar Adapter for NLog) - https://nlog-project.org/2009/11/01/gibraltar-adapter-for-nlog-released.html Sentinel - https://github.com/yarseyah/sentinel NLogViewer - http://github.com/jkowalski/NLogViewer (functional, but no longer in development, not recommended) LogEntries - http://www.logentries.com (service for cloud logging, has .net NLog target) Legit Log Viewer - http://www.legitlog.com/ (Although their website is down, it is Free and powerful log viewer.) ReflectInsight Viewer (using the ReflectInsight Extension for NLog) - http://insightextensions.codeplex.com/","title":"NLog-specific viewers"},{"location":"Tools/#log4x-compatible-viewers","text":"In general, any viewer supporting Log4J or Log4Net should work fine with NLog - see Chainsaw Target for information on configuring NLog for use with those viewers. * LogWizard - https://github.com/jtorjo/logwizard * Apache Chainsaw v2 - https://logging.apache.org/chainsaw/ * ~~DevIntelligence Log4Net Viewer - http://devintelligence.com/log4netviewer/~~ (questionable status) * C# WPF Log4Net Viewer - https://www.codeproject.com/KB/cs/logviewer.aspx * ~~Log4Net Dashboard - http://www.l4ndash.com/~~ (questionable status) * Log4View - http://www.log4view.com/ * Log2Console - https://github.com/Statyk7/log2console * ~~Legit Log Viewer - http://www.legitlog.com/~~ (questionable status) * ReflectInsight Viewer (using the ReflectInsight Extension for Log4net) - http://insightextensions.codeplex.com/ * Free Log File Viewer: Log4Net Log4J NLog - https://sourceforge.net/projects/gamutlogviewer/ * Lilith * OtrosLogViewer","title":"Log4x-compatible viewers"},{"location":"Trace-Activity-Id-Layout-Renderer/","text":"Outputs the Trace.CorrelationManager.ActivityId as trace correlation id. Platforms Supported: Limited (Not supported NetStandard1.3+1.5) Introduced in NLog v4.1. Configuration Syntax ${activityid} Remarks \u26a0\ufe0f Trace.CorrelationManager.ActivityId is now considered legacy and instead replaced by System.Diagnostics.Activity . See also: ${activity} If the Trace.CorrelationManager.ActivityId is equal to Guid.Empty , then appends String.Empty , otherwise appends Trace.CorrelationManager.ActivityId as separated by hyphens according to the CultureInfo.InvariantCulture . Example For an ASP.Net WebAPI application, initialize the Trace.CorrelationManager.ActivityId in the Global.asax , Application_BeginRequest event: protected void Application_BeginRequest(object sender, EventArgs e) { ... Trace.CorrelationManager.ActivityId = Guid.NewGuid(); }","title":"Trace Activity Id Layout Renderer"},{"location":"Trace-Activity-Id-Layout-Renderer/#configuration-syntax","text":"${activityid}","title":"Configuration Syntax"},{"location":"Trace-Activity-Id-Layout-Renderer/#remarks","text":"\u26a0\ufe0f Trace.CorrelationManager.ActivityId is now considered legacy and instead replaced by System.Diagnostics.Activity . See also: ${activity} If the Trace.CorrelationManager.ActivityId is equal to Guid.Empty , then appends String.Empty , otherwise appends Trace.CorrelationManager.ActivityId as separated by hyphens according to the CultureInfo.InvariantCulture .","title":"Remarks"},{"location":"Trace-Activity-Id-Layout-Renderer/#example","text":"For an ASP.Net WebAPI application, initialize the Trace.CorrelationManager.ActivityId in the Global.asax , Application_BeginRequest event: protected void Application_BeginRequest(object sender, EventArgs e) { ... Trace.CorrelationManager.ActivityId = Guid.NewGuid(); }","title":"Example"},{"location":"Trace-target/","text":"Sends log messages through System.Diagnostics.Trace. Platforms Supported: Limited (Not available for NetStandard1.3) Configuration Syntax <targets> <target xsi:type=\"Trace\" name=\"String\" layout=\"Layout\" /> </targets> Parameters General Options name - Name of the target. Output Options layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} rawWrite - Always use Trace.WriteLine independent of LogLevel. Default: False Introduced with NLog 4.5, fixes the issue with output being prefixed with exe-filename. And helps Azure Streaming log. EnableTraceFail - Use Trace.Fail for LogLevel.Fatal, instead of Trace.Error . Default: 'False' Introduced with NLog 4.7, avoids Enviroment.FailFast that can happen for default trace listener. header - Layout used to format header-output when initializing. Layout Introduced with NLog 5.0 footer - Layout used to format footer-output when closing. Layout Introduced with NLog 5.0 Notes Alternative targets for diagnostic output: - DebugSystem-target for output to System.Diagnostics.Debug - Debugger-target for output to System.Diagnostics.Debugger.Log - OutputDebugString-target for output to OutputDebugString Win32 API","title":"Trace target"},{"location":"Trace-target/#configuration-syntax","text":"<targets> <target xsi:type=\"Trace\" name=\"String\" layout=\"Layout\" /> </targets>","title":"Configuration Syntax"},{"location":"Trace-target/#parameters","text":"","title":"Parameters"},{"location":"Trace-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"Trace-target/#output-options","text":"layout - Layout used to format log messages. Layout Required. Default: ${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true} rawWrite - Always use Trace.WriteLine independent of LogLevel. Default: False Introduced with NLog 4.5, fixes the issue with output being prefixed with exe-filename. And helps Azure Streaming log. EnableTraceFail - Use Trace.Fail for LogLevel.Fatal, instead of Trace.Error . Default: 'False' Introduced with NLog 4.7, avoids Enviroment.FailFast that can happen for default trace listener. header - Layout used to format header-output when initializing. Layout Introduced with NLog 5.0 footer - Layout used to format footer-output when closing. Layout Introduced with NLog 5.0","title":"Output Options"},{"location":"Trace-target/#notes","text":"Alternative targets for diagnostic output: - DebugSystem-target for output to System.Diagnostics.Debug - Debugger-target for output to System.Diagnostics.Debugger.Log - OutputDebugString-target for output to OutputDebugString Win32 API","title":"Notes"},{"location":"Trim-Whitespace-Layout-Renderer/","text":"Trims the whitespace from the result of another layout renderer. Platforms Supported: All Configuration Syntax ${trim-whitespace:trimWhiteSpace=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:trimWhiteSpace=Boolean} Parameters Transformation Options trimWhiteSpace - Indicates whether trim should be applied. Boolean Default: True inner - Wrapped layout. Layout","title":"Trim Whitespace Layout Renderer"},{"location":"Trim-Whitespace-Layout-Renderer/#configuration-syntax","text":"${trim-whitespace:trimWhiteSpace=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:trimWhiteSpace=Boolean}","title":"Configuration Syntax"},{"location":"Trim-Whitespace-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Trim-Whitespace-Layout-Renderer/#transformation-options","text":"trimWhiteSpace - Indicates whether trim should be applied. Boolean Default: True inner - Wrapped layout. Layout","title":"Transformation Options"},{"location":"Tutorial/","text":"This describes NLog for .NET Framework (.NET ver. 3.5 - 4.8) and .NET Core (NetStandard 1.3+) NLog can be setup with the following steps: Install NLog nuget package Configure NLog Targets for output Writing log messages After having setup NLog, then make sure to explore: Layouts and LayoutRenderers Target Wrappers Best practices for using NLog If something is not working as expected then check the Troubleshooting section. If wanting to use Microsoft Extension Logging (MEL) then check .NET Core and ASP.NET Core tutorials. Configure NLog Targets for output NLog will only produce output if having configured one (or more) NLog targets. NLog can be configured using XML by adding a NLog.config file to your application project (File Properties: Copy If newer). NLog will automatically load the NLog.config by searching multiple file locations . This is a simple example of the content for NLog.config : <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> </rules> </nlog> Alternative one can configure programmatically by doing this in code: var config = new NLog.Config.LoggingConfiguration(); // Targets where to log to: File and Console var logfile = new NLog.Targets.FileTarget(\"logfile\") { FileName = \"file.txt\" }; var logconsole = new NLog.Targets.ConsoleTarget(\"logconsole\"); // Rules for mapping loggers to targets config.AddRule(LogLevel.Info, LogLevel.Fatal, logconsole); config.AddRule(LogLevel.Debug, LogLevel.Fatal, logfile); // Apply config NLog.LogManager.Configuration = config; NLog 5.0 introduces a Fluent-Configuration-API so you can do this instead: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteToConsole(); builder.ForLogger().FilterMinLevel(LogLevel.Debug).WriteToFile(fileName: \"file.txt\"); }); The rules redirects logger output to the wanted output targets. The rules also provides filtering options to output only relevant logevents. Usually based on logger-name and loglevel (Ex. name=\"*\" minlevel=\"Trace\" means everything). See also Configuration File or Configure from code See also Available NLog Targets for output. Writing log messages public static class Program { private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger(); public static void Main() { try { Logger.Info(\"Hello world\"); System.Console.ReadKey(); } catch (Exception ex) { Logger.Error(ex, \"Goodbye cruel world\"); } } } The Logger can write messages with different LogLevels, which is used by the logging-rules (See minLevel in configuration example above) so only relevant messages are redirected to the wanted targets. The LogLevel identifies how important/detailed the message is. NLog can route log messages based primarily on their logger name and log level. The log levels ordered by severity: LogLevel Severity Typical Use Trace Most verbose level. Used for development and seldom enabled in production. Ex. Request-payload, Response-payload, Begin-method-X or End-method-X Debug Debugging the application behavior from internal events of interest. Ex. Executed query, User authenticated, Session expired Info Information that highlights progress or application lifetime events. Warn Warnings about validation issues or temporary failures that can be recovered. Error Errors where functionality has failed or Exception have been caught. Fatal Most critical level. Application is about to abort. The logger is not tied to a specific target. The messages written to one logger can reach multiple targets based on the Configuration-file#rules . Maintaining this separation lets you keep logging statements in your code and easily change how and where the logs are written, just by updating the configuration in one place. See also Filtering log messages . NLog is also supported by many logging abstractions like Microsoft Extension Logging and LibLog . Layouts and LayoutRenderers NLog allows you to customize how log messages are written to a NLog target. This shows the default SimpleLayout used by most NLog targets: <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" layout=\"`${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}`\" /> This can be configured to include extra context information (Ex ${threadid} ): <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" layout=\"${longdate}|${level:uppercase=true}|${logger}|${threadid}|${message}|${exception:format=tostring}\" /> See full list here: Layout Renderers One can also use a more complex Layout instead of SimpleLayout : * CsvLayout * JsonLayout * XmlLayout See full list here: Layouts Target Wrappers NLog supports special kinds of targets which do not do any logging by themselves, but which modify the behavior of other loggers. Those targets are called wrappers. The most commonly used ones are: * AsyncWrapper - Improves Performance by providing asynchronous, buffered execution of target writes. * BufferingWrapper - Simple batching of log messages. Maybe only send batch when certain log event occurs (Ex. Exception). * FallbackGroup - Provides fallback-on-error. * RetryingWrapper - Provides retry-on-error. See full list here: Target Wrappers There is a shortcut for enabling the AsyncWrapper for all targets, by adding async=\"true\" : <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets async=\"true\"> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" /> </rules> </nlog> This will make all writes to the file be asynchronous, which will improve responsiveness of the calling thread. Best practices for using NLog 1. Logger should be a static variable in each class When using LogManager.GetCurrentClassLogger : Creating a new Logger has a small overhead, as it has to acquire locks and allocate objects. Therefore it is recommended to create the logger like this: namespace MyNamespace { public class MyClass { private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger(); } } 2. Logger should handle string formatting Avoid performing string allocation or string concatenation upfront, but instead let the Logger do the formatting. This will allow NLog to defer the formatting and improve performance . Structured logging is recommended, e.g. logger.Info(\"Hello {Name}\", \"Earth\"); Or using string-format syntax: logger.Info(\"Hello {0}\", \"Earth\"); 3. Logger should be given the Exception Avoid giving the Exception as formatting parameter, but instead provide it explicitly as first parameter. This will help the NLog targets to provide better logging. try { } catch (Exception ex) { logger.Error(ex, \"Something bad happened\"); } 4. Validate XML configuration from NLog.config NLog swallows by default all exceptions, so problems with logging will not cause the application to break. But for many application the logging is very critical, so if the initial NLog configuration fails, then it is fatal. Adding throwConfigExceptions=\"true\" will make NLog complain when something is wrong with the configuration: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" throwConfigExceptions=\"true\"> </nlog> There is also a setting called throwExceptions=\"true\" , which should never be used in production as it can cause havoc for your application. It is intended for unit testing and local troubleshooting. See also Troubleshooting Configuration 5. Remember to Flush NLog will by default attempt to flush automatically at application shutdown. Microsoft Windows give .NET applications a limited amount of time to perform shutdown (usually 2 sec) before being terminated. If having a NLog configuration with NLog Targets that requires network-traffic (Http, Mail, Tcp), then it is a really good idea to perform a manual Flush/Shutdown independent on running on Linux/Windows. NLog.LogManager.Shutdown(); // Flush and close down internal threads and timers NET Application running on Mono/Linux are required to stop threads/timers before entering application shutdown phase. Failing to do this will cause unhandled exceptions and segmentation faults, and other unpredictable behavior.","title":"Tutorial"},{"location":"Tutorial/#configure-nlog-targets-for-output","text":"NLog will only produce output if having configured one (or more) NLog targets. NLog can be configured using XML by adding a NLog.config file to your application project (File Properties: Copy If newer). NLog will automatically load the NLog.config by searching multiple file locations . This is a simple example of the content for NLog.config : <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> <target name=\"logconsole\" xsi:type=\"Console\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logconsole\" /> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"logfile\" /> </rules> </nlog> Alternative one can configure programmatically by doing this in code: var config = new NLog.Config.LoggingConfiguration(); // Targets where to log to: File and Console var logfile = new NLog.Targets.FileTarget(\"logfile\") { FileName = \"file.txt\" }; var logconsole = new NLog.Targets.ConsoleTarget(\"logconsole\"); // Rules for mapping loggers to targets config.AddRule(LogLevel.Info, LogLevel.Fatal, logconsole); config.AddRule(LogLevel.Debug, LogLevel.Fatal, logfile); // Apply config NLog.LogManager.Configuration = config; NLog 5.0 introduces a Fluent-Configuration-API so you can do this instead: NLog.LogManager.Setup().LoadConfiguration(builder => { builder.ForLogger().FilterMinLevel(LogLevel.Info).WriteToConsole(); builder.ForLogger().FilterMinLevel(LogLevel.Debug).WriteToFile(fileName: \"file.txt\"); }); The rules redirects logger output to the wanted output targets. The rules also provides filtering options to output only relevant logevents. Usually based on logger-name and loglevel (Ex. name=\"*\" minlevel=\"Trace\" means everything). See also Configuration File or Configure from code See also Available NLog Targets for output.","title":"Configure NLog Targets for output"},{"location":"Tutorial/#writing-log-messages","text":"public static class Program { private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger(); public static void Main() { try { Logger.Info(\"Hello world\"); System.Console.ReadKey(); } catch (Exception ex) { Logger.Error(ex, \"Goodbye cruel world\"); } } } The Logger can write messages with different LogLevels, which is used by the logging-rules (See minLevel in configuration example above) so only relevant messages are redirected to the wanted targets. The LogLevel identifies how important/detailed the message is. NLog can route log messages based primarily on their logger name and log level. The log levels ordered by severity: LogLevel Severity Typical Use Trace Most verbose level. Used for development and seldom enabled in production. Ex. Request-payload, Response-payload, Begin-method-X or End-method-X Debug Debugging the application behavior from internal events of interest. Ex. Executed query, User authenticated, Session expired Info Information that highlights progress or application lifetime events. Warn Warnings about validation issues or temporary failures that can be recovered. Error Errors where functionality has failed or Exception have been caught. Fatal Most critical level. Application is about to abort. The logger is not tied to a specific target. The messages written to one logger can reach multiple targets based on the Configuration-file#rules . Maintaining this separation lets you keep logging statements in your code and easily change how and where the logs are written, just by updating the configuration in one place. See also Filtering log messages . NLog is also supported by many logging abstractions like Microsoft Extension Logging and LibLog .","title":"Writing log messages"},{"location":"Tutorial/#layouts-and-layoutrenderers","text":"NLog allows you to customize how log messages are written to a NLog target. This shows the default SimpleLayout used by most NLog targets: <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" layout=\"`${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}`\" /> This can be configured to include extra context information (Ex ${threadid} ): <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" layout=\"${longdate}|${level:uppercase=true}|${logger}|${threadid}|${message}|${exception:format=tostring}\" /> See full list here: Layout Renderers One can also use a more complex Layout instead of SimpleLayout : * CsvLayout * JsonLayout * XmlLayout See full list here: Layouts","title":"Layouts and LayoutRenderers"},{"location":"Tutorial/#target-wrappers","text":"NLog supports special kinds of targets which do not do any logging by themselves, but which modify the behavior of other loggers. Those targets are called wrappers. The most commonly used ones are: * AsyncWrapper - Improves Performance by providing asynchronous, buffered execution of target writes. * BufferingWrapper - Simple batching of log messages. Maybe only send batch when certain log event occurs (Ex. Exception). * FallbackGroup - Provides fallback-on-error. * RetryingWrapper - Provides retry-on-error. See full list here: Target Wrappers There is a shortcut for enabling the AsyncWrapper for all targets, by adding async=\"true\" : <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <targets async=\"true\"> <target name=\"logfile\" xsi:type=\"File\" fileName=\"file.txt\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"logfile\" /> </rules> </nlog> This will make all writes to the file be asynchronous, which will improve responsiveness of the calling thread.","title":"Target Wrappers"},{"location":"Tutorial/#best-practices-for-using-nlog","text":"","title":"Best practices for using NLog"},{"location":"Tutorial/#1-logger-should-be-a-static-variable-in-each-class","text":"When using LogManager.GetCurrentClassLogger : Creating a new Logger has a small overhead, as it has to acquire locks and allocate objects. Therefore it is recommended to create the logger like this: namespace MyNamespace { public class MyClass { private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger(); } }","title":"1. Logger should be a static variable in each class"},{"location":"Tutorial/#2-logger-should-handle-string-formatting","text":"Avoid performing string allocation or string concatenation upfront, but instead let the Logger do the formatting. This will allow NLog to defer the formatting and improve performance . Structured logging is recommended, e.g. logger.Info(\"Hello {Name}\", \"Earth\"); Or using string-format syntax: logger.Info(\"Hello {0}\", \"Earth\");","title":"2. Logger should handle string formatting"},{"location":"Tutorial/#3-logger-should-be-given-the-exception","text":"Avoid giving the Exception as formatting parameter, but instead provide it explicitly as first parameter. This will help the NLog targets to provide better logging. try { } catch (Exception ex) { logger.Error(ex, \"Something bad happened\"); }","title":"3. Logger should be given the Exception"},{"location":"Tutorial/#4-validate-xml-configuration-from-nlogconfig","text":"NLog swallows by default all exceptions, so problems with logging will not cause the application to break. But for many application the logging is very critical, so if the initial NLog configuration fails, then it is fatal. Adding throwConfigExceptions=\"true\" will make NLog complain when something is wrong with the configuration: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" throwConfigExceptions=\"true\"> </nlog> There is also a setting called throwExceptions=\"true\" , which should never be used in production as it can cause havoc for your application. It is intended for unit testing and local troubleshooting. See also Troubleshooting Configuration","title":"4. Validate XML configuration from NLog.config"},{"location":"Tutorial/#5-remember-to-flush","text":"NLog will by default attempt to flush automatically at application shutdown. Microsoft Windows give .NET applications a limited amount of time to perform shutdown (usually 2 sec) before being terminated. If having a NLog configuration with NLog Targets that requires network-traffic (Http, Mail, Tcp), then it is a really good idea to perform a manual Flush/Shutdown independent on running on Linux/Windows. NLog.LogManager.Shutdown(); // Flush and close down internal threads and timers NET Application running on Mono/Linux are required to stop threads/timers before entering application shutdown phase. Failing to do this will cause unhandled exceptions and segmentation faults, and other unpredictable behavior.","title":"5. Remember to Flush"},{"location":"Uppercase-Layout-Renderer/","text":"Converts the result of another layout output to upper case. Platforms Supported: All Configuration Syntax ${uppercase:uppercase=Boolean:inner=Layout:culture=Culture} or by using ambient property to modify output of other layout renderer: ${other:uppercase=Boolean} Parameters Transformation Options inner - Wrapped layout. Layout. Default attribute. uppercase - Indicates whether upper case conversion should be applied. Default true with Inner, required when using as ambient. culture - Culture used for rendering. Culture Examples ${uppercase:${level}} ${uppercase:Inner=${level}} ${level:uppercase=true}","title":"Uppercase Layout Renderer"},{"location":"Uppercase-Layout-Renderer/#configuration-syntax","text":"${uppercase:uppercase=Boolean:inner=Layout:culture=Culture} or by using ambient property to modify output of other layout renderer: ${other:uppercase=Boolean}","title":"Configuration Syntax"},{"location":"Uppercase-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Uppercase-Layout-Renderer/#transformation-options","text":"inner - Wrapped layout. Layout. Default attribute. uppercase - Indicates whether upper case conversion should be applied. Default true with Inner, required when using as ambient. culture - Culture used for rendering. Culture","title":"Transformation Options"},{"location":"Uppercase-Layout-Renderer/#examples","text":"${uppercase:${level}} ${uppercase:Inner=${level}} ${level:uppercase=true}","title":"Examples"},{"location":"Url-Encode-Layout-Renderer/","text":"Encodes the result of another layout output for use with URLs. Platforms Supported: All Configuration Syntax ${url-encode:spaceAsPlus=Boolean:inner=Layout} Parameters Transformation Options spaceAsPlus - Indicates whether spaces should be translated to '+' or '%20'. Boolean inner - Wrapped layout. Layout escapeDataRfc3986 - NLog will by default encode as UTF8 and escape special characters according to Rfc2396. To escape data according to standard Rc3986, set this option to 'true' (Available from NLog 4.4) escapeDataNLogLegacy - NLog will by default encode as UTF8 and escape special characters according to Rfc2396. To escape data according to the old non-standard NLog style, set this option to 'true' (Available from NLog 4.4)","title":"Url Encode Layout Renderer"},{"location":"Url-Encode-Layout-Renderer/#configuration-syntax","text":"${url-encode:spaceAsPlus=Boolean:inner=Layout}","title":"Configuration Syntax"},{"location":"Url-Encode-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Url-Encode-Layout-Renderer/#transformation-options","text":"spaceAsPlus - Indicates whether spaces should be translated to '+' or '%20'. Boolean inner - Wrapped layout. Layout escapeDataRfc3986 - NLog will by default encode as UTF8 and escape special characters according to Rfc2396. To escape data according to standard Rc3986, set this option to 'true' (Available from NLog 4.4) escapeDataNLogLegacy - NLog will by default encode as UTF8 and escape special characters according to Rfc2396. To escape data according to the old non-standard NLog style, set this option to 'true' (Available from NLog 4.4)","title":"Transformation Options"},{"location":"Var-Layout-Renderer/","text":"Render a NLog variable. The variable value can be set from the XML config and/or the API. Platforms Supported: All Introduced in 4.1, see also news post \u26a0\ufe0f NLog Config Variables are very similar to global variables. They should stay immutable and not be updated for every logevent. There are much better ways for including local context . Performance is better when using NLog variables directly in config file (Ex. ${myvar} ), instead of using this layout renderer that always performs dynamic lookup (Ex. ${var:myvar} ). But this layout renderer reacts to NLog variables being modified at runtime. Modifying NLog variables at runtime together with NLog configuration changes/reload can cause unexpected changes to NLog variables and produce unexpected output. Consider using GDC layout renderer for simple values, that doesn't make use of NLog Layout logic. Configuration Syntax ${var:name=String:default=String} Parameters name - Name of the NLog variable. Required. default - Default value to be used when the variable is not set. Not used if name is null Example <nlog> <variable name=\"user\" value=\"admin\" /> <variable name=\"password\" value=\"realgoodpassword\" /> <targets> <target name=\"debug\" type=\"Debug\" layout=\"${message} and ${var:user}=${var:password}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"debug\" /> </rules> </nlog> API // create or edit LogManager.Configuration.Variables[\"user\"] = \"admin\"; LogManager.Configuration.Variables[\"password\"] = \"123\"; // or remove LogManager.Configuration.Variables.Remove(\"password\"); Notes Variables can be changed, deleted and created from the API A default value can be configured for a variable, e.g. ${var:password:default=unknown} The old variables can still be used and so this is completely backwards-compatible. the <variable> is optional if no default is needed Variables configured at runtime will be reset on autoReload=\"true\" , unless also using keepVariablesOnReload=\"true\" (Before NLog 5.0 then keepVariablesOnReload was default false) Variables configured at runtime will be reset when new NLog LoggingConfiguration is assigned (This is not the case for GDC layout renderer )","title":"Var Layout Renderer"},{"location":"Var-Layout-Renderer/#configuration-syntax","text":"${var:name=String:default=String}","title":"Configuration Syntax"},{"location":"Var-Layout-Renderer/#parameters","text":"name - Name of the NLog variable. Required. default - Default value to be used when the variable is not set. Not used if name is null","title":"Parameters"},{"location":"Var-Layout-Renderer/#example","text":"<nlog> <variable name=\"user\" value=\"admin\" /> <variable name=\"password\" value=\"realgoodpassword\" /> <targets> <target name=\"debug\" type=\"Debug\" layout=\"${message} and ${var:user}=${var:password}\" /> </targets> <rules> <logger name=\"*\" minlevel=\"Debug\" writeTo=\"debug\" /> </rules> </nlog>","title":"Example"},{"location":"Var-Layout-Renderer/#api","text":"// create or edit LogManager.Configuration.Variables[\"user\"] = \"admin\"; LogManager.Configuration.Variables[\"password\"] = \"123\"; // or remove LogManager.Configuration.Variables.Remove(\"password\");","title":"API"},{"location":"Var-Layout-Renderer/#notes","text":"Variables can be changed, deleted and created from the API A default value can be configured for a variable, e.g. ${var:password:default=unknown} The old variables can still be used and so this is completely backwards-compatible. the <variable> is optional if no default is needed Variables configured at runtime will be reset on autoReload=\"true\" , unless also using keepVariablesOnReload=\"true\" (Before NLog 5.0 then keepVariablesOnReload was default false) Variables configured at runtime will be reset when new NLog LoggingConfiguration is assigned (This is not the case for GDC layout renderer )","title":"Notes"},{"location":"Visual-Studio-Support/","text":"NLog integrates with Visual Studio\u00ae (including Express Editions) Intellisense(TM) NLog supports Intellisense when editing XML configuration files. All you need to do is add two namespace declarations to the <nlog> tag: <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <!-- configuration goes here --> </nlog> The other change necessary is turning <target type=\"TypeName\"/> to <target xsi:type=\"TypeName\"/> . Once you do this, you really good support for Intellisense and config file validation in Visual Studio. Legacy Integration with Add/Reference dialog NLog Setup registers the appropriate AssemblyFolders entry in registry so that Visual Studio is able to locate the *.dll files and present them in Add Reference dialog. This is supported in all Visual Studio versions. New Item Templates NLog comes with 3 sample configuration files that can be quickly added to you project through Add New Item dialog. They are: * configuration file that defines one File Target (typical) * configuration file that defines one Console Target * empty configuration file Please note that you need to change \u201cCopy To Output Directory\u201d option of properties of NLog.config to \u201cCopy Always\u201d Note that \u201cNew Item\u201d templates are supported on Visual Studio 2005 and higher (including Express Editions). Code Snippets NLog installs a Visual Studio 2005 Code Snippet called \u201cnlogger\u201d that can be used to quickly declare a logger instance. It inserts the following piece of text: private static Logger logger = LogManager.GetCurrentClassLogger();","title":"Visual Studio Support"},{"location":"Visual-Studio-Support/#intellisensetm","text":"NLog supports Intellisense when editing XML configuration files. All you need to do is add two namespace declarations to the <nlog> tag: <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <!-- configuration goes here --> </nlog> The other change necessary is turning <target type=\"TypeName\"/> to <target xsi:type=\"TypeName\"/> . Once you do this, you really good support for Intellisense and config file validation in Visual Studio.","title":"Intellisense(TM)"},{"location":"Visual-Studio-Support/#legacy","text":"","title":"Legacy"},{"location":"Visual-Studio-Support/#integration-with-addreference-dialog","text":"NLog Setup registers the appropriate AssemblyFolders entry in registry so that Visual Studio is able to locate the *.dll files and present them in Add Reference dialog. This is supported in all Visual Studio versions.","title":"Integration with Add/Reference dialog"},{"location":"Visual-Studio-Support/#new-item-templates","text":"NLog comes with 3 sample configuration files that can be quickly added to you project through Add New Item dialog. They are: * configuration file that defines one File Target (typical) * configuration file that defines one Console Target * empty configuration file Please note that you need to change \u201cCopy To Output Directory\u201d option of properties of NLog.config to \u201cCopy Always\u201d Note that \u201cNew Item\u201d templates are supported on Visual Studio 2005 and higher (including Express Editions).","title":"New Item Templates"},{"location":"Visual-Studio-Support/#code-snippets","text":"NLog installs a Visual Studio 2005 Code Snippet called \u201cnlogger\u201d that can be used to quickly declare a logger instance. It inserts the following piece of text: private static Logger logger = LogManager.GetCurrentClassLogger();","title":"Code Snippets"},{"location":"W3CExtendedLogLayout/","text":"A specialized layout that renders to W3C Extended Log Format (ELF) Platforms Supported: All Introduced with NLog.Web 5.0 <target name=\"w3cFile\" xsi:type=\"File\" fileName=\"log-file.json\" > <layout xsi:type=\"W3CExtendedLogLayout\"> <directive name=\"Software\" layout=\"My Web Server\" /> <!-- Optional - Can be repeated --> <field name=\"cs-method\" layout=\"${aspnet-request-method}\" /> <!-- Optional - Can be repeated --> </layout> </target> Note default fields will be printed, when no fields has been specified. Same behavior for directives. Parameters field name - Required. The name of the W3C Extended Field layout - The layout value of the W3C Extended Field directive name - Required. The name of the W3C Extended Directive Header layout - The layout value of the W3C Extended Directive Header Notes Available W3C log-parsers: https://github.com/jibedoubleve/log-reader https://support.microsoft.com/en-us/topic/log-parser-2-2-and-asp-net-37531636-1cf5-dc52-f12a-6a9252155631 https://techcommunity.microsoft.com/t5/exchange-team-blog/introducing-log-parser-studio/ba-p/601131 https://www.finalanalytics.com/products/httplogbrowser","title":"W3CExtendedLogLayout"},{"location":"W3CExtendedLogLayout/#parameters","text":"field name - Required. The name of the W3C Extended Field layout - The layout value of the W3C Extended Field directive name - Required. The name of the W3C Extended Directive Header layout - The layout value of the W3C Extended Directive Header","title":"Parameters"},{"location":"W3CExtendedLogLayout/#notes","text":"Available W3C log-parsers: https://github.com/jibedoubleve/log-reader https://support.microsoft.com/en-us/topic/log-parser-2-2-and-asp-net-37531636-1cf5-dc52-f12a-6a9252155631 https://techcommunity.microsoft.com/t5/exchange-team-blog/introducing-log-parser-studio/ba-p/601131 https://www.finalanalytics.com/products/httplogbrowser","title":"Notes"},{"location":"Web-resources/","text":"Articles and tutorials about NLog Introduction to NLog by Jaroslaw Kowalski (Original author of NLog) NLog Tutorial for .NET Logging by Stackify.com NLog Tutorial - Guide for logging by Elmah.io ASP.NET Core logging with NLog and PostgreSQL by Damian Hickey ASP.NET Core logging to MySQL using NLog by Damian Hickey ASP.NET Core logging with NLog and Microsoft SQL Server by Damian Hickey ASP.NET Core logging with NLog and Elasticsearch by Damian Hickey How to use NLog for .NET Core and ASP.NET Core Logging by Aleksander Kovac Configure NLog for ASP.NET MVC in 3 Steps by Jamil Hallal ASP.Net Logging Using NLog by Ricky Rosario ( Link Broken ) Using NLog to Track Events by Andrew Hay ( Link Broken ) Ninject (Part 2): Customizing your infrastructure for logging by Ivan Porto Carrero Tracing and logging in .NET by Hieu Pham ( Link Broken ) Logging with PostSharp and NLog by Artemis West Ltd ( Link Broken ) Using NLog in C# by Orn Kristjansson ( Link Broken ) Logging NLog messages to a non-static method by Matt Valerio ( Link Broken ) NLog by Pete on Software Switching to NLog by Robert A. McCarter Sending the output from Linq to SQL to a Log file by Grant Barrington Logging to SQLite with NLog by Thomas Beck Aspect-Oriented Instrumentation with PostSharp, NLog, and SQLite by Thomas Beck Logging messages to a Syslog server using NLog by Graffen ( Link Broken ) Procmon Call Stack or Symbols and SysInternals tools by Micha\u0142 Grzegorzewski (in Polish) How to NLog (2.1 & 3.1) with VisualStudio 2013 By Noctis on CodeProject How to NLog (4.2) with Visual Studio 2015 By Noctis on CodeProject NLog vs log4net performance comparison by @imanushin ( Russian translation is here ) Typical logging mistakes by @imanushin ( Russian translation is here ). Article is about he most common logging errors (which lead to application performance degradation). Logging Facades LibLog Common Logging Caliburn.Micro NLog Extensions Targets - External Packages Layouts - External Packages LogViewer Tools - External Packages See also: Extending-NLog","title":"Web resources"},{"location":"Web-resources/#articles-and-tutorials-about-nlog","text":"Introduction to NLog by Jaroslaw Kowalski (Original author of NLog) NLog Tutorial for .NET Logging by Stackify.com NLog Tutorial - Guide for logging by Elmah.io ASP.NET Core logging with NLog and PostgreSQL by Damian Hickey ASP.NET Core logging to MySQL using NLog by Damian Hickey ASP.NET Core logging with NLog and Microsoft SQL Server by Damian Hickey ASP.NET Core logging with NLog and Elasticsearch by Damian Hickey How to use NLog for .NET Core and ASP.NET Core Logging by Aleksander Kovac Configure NLog for ASP.NET MVC in 3 Steps by Jamil Hallal ASP.Net Logging Using NLog by Ricky Rosario ( Link Broken ) Using NLog to Track Events by Andrew Hay ( Link Broken ) Ninject (Part 2): Customizing your infrastructure for logging by Ivan Porto Carrero Tracing and logging in .NET by Hieu Pham ( Link Broken ) Logging with PostSharp and NLog by Artemis West Ltd ( Link Broken ) Using NLog in C# by Orn Kristjansson ( Link Broken ) Logging NLog messages to a non-static method by Matt Valerio ( Link Broken ) NLog by Pete on Software Switching to NLog by Robert A. McCarter Sending the output from Linq to SQL to a Log file by Grant Barrington Logging to SQLite with NLog by Thomas Beck Aspect-Oriented Instrumentation with PostSharp, NLog, and SQLite by Thomas Beck Logging messages to a Syslog server using NLog by Graffen ( Link Broken ) Procmon Call Stack or Symbols and SysInternals tools by Micha\u0142 Grzegorzewski (in Polish) How to NLog (2.1 & 3.1) with VisualStudio 2013 By Noctis on CodeProject How to NLog (4.2) with Visual Studio 2015 By Noctis on CodeProject NLog vs log4net performance comparison by @imanushin ( Russian translation is here ) Typical logging mistakes by @imanushin ( Russian translation is here ). Article is about he most common logging errors (which lead to application performance degradation).","title":"Articles and tutorials about NLog"},{"location":"Web-resources/#logging-facades","text":"LibLog Common Logging Caliburn.Micro","title":"Logging Facades"},{"location":"Web-resources/#nlog-extensions","text":"Targets - External Packages Layouts - External Packages LogViewer Tools - External Packages See also: Extending-NLog","title":"NLog Extensions"},{"location":"WebService-target---Workaround-for-url-variables/","text":"\u26a0\ufe0f NLog 5.0 now supports Layout for the Url -parameter, so this work-around is no longer needed. Given config *a target configured as in: https://github.com/NLog/NLog/wiki/Webservice-Target-for-Splunk Workaround Tool driven Create a transformation from nlog.config using the slow-cheetah plugin: https://github.com/microsoft/slow-cheetah/blob/master/doc/transforming_files.md Manual Create a Nlog.Release.config (XML-File) to override the hard coded url The name must be same as the name from your original target! Install Package \"Microsoft.VisualStudio.SlowCheetah\" Update your csproj file: <ItemGroup> <Content Update=\"Nlog.config\"> <CopyToOutputDirectory>Always</CopyToOutputDirectory> <TransformOnBuild>true</TransformOnBuild> </Content> <None Include=\"Nlog.Release.config\"> <IsTransformFile>true</IsTransformFile> <DependentUpon>Nlog.config</DependentUpon> </None> </ItemGroup> Content of nlog.Release.config <?xml version=\"1.0\" encoding=\"utf-8\"?> <!--For more information on using transformations see the web.config examples at http://go.microsoft.com/fwlink/?LinkId=214134. --> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Information\" internalLogFile=\"c:\\temp\\internal-nlog.txt\" xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\"> <targets async=\"true\"> <target xsi:type=\"WebService\" name=\"Splunk\" url=\"NEWURL\" protocol=\"JsonPost\" encoding=\"utf-8\" preAuthenticate=\"true\" xdt:Transform=\"SetAttributes(url)\" xdt:Locator=\"Match(name)\"> </target> </targets> </nlog> If NEWURL is a variable In program.cs modify nlog.config before configuring Nlog var token = Environment.GetEnvironmentVariable(\"YOURURL\"); if (!string.IsNullOrWhiteSpace(token)) { var currentFolder = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location); var nlogFolder = $\"{currentFolder}/nlog.config\"; var configText = File.ReadAllText(nlogFolder); var updatedConfig = configText .Replace(\"NEWURL\", token); File.WriteAllText(nlogFolder, updatedConfig); } var logger = NLogBuilder.ConfigureNLog(\"nlog.config\").GetCurrentClassLogger(); //...","title":"WebService target   Workaround for url variables"},{"location":"WebService-target---Workaround-for-url-variables/#given-config","text":"*a target configured as in: https://github.com/NLog/NLog/wiki/Webservice-Target-for-Splunk","title":"Given config"},{"location":"WebService-target---Workaround-for-url-variables/#workaround","text":"","title":"Workaround"},{"location":"WebService-target---Workaround-for-url-variables/#tool-driven","text":"Create a transformation from nlog.config using the slow-cheetah plugin: https://github.com/microsoft/slow-cheetah/blob/master/doc/transforming_files.md","title":"Tool driven"},{"location":"WebService-target---Workaround-for-url-variables/#manual","text":"Create a Nlog.Release.config (XML-File) to override the hard coded url The name must be same as the name from your original target! Install Package \"Microsoft.VisualStudio.SlowCheetah\" Update your csproj file: <ItemGroup> <Content Update=\"Nlog.config\"> <CopyToOutputDirectory>Always</CopyToOutputDirectory> <TransformOnBuild>true</TransformOnBuild> </Content> <None Include=\"Nlog.Release.config\"> <IsTransformFile>true</IsTransformFile> <DependentUpon>Nlog.config</DependentUpon> </None> </ItemGroup>","title":"Manual"},{"location":"WebService-target---Workaround-for-url-variables/#content-of-nlogreleaseconfig","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <!--For more information on using transformations see the web.config examples at http://go.microsoft.com/fwlink/?LinkId=214134. --> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Information\" internalLogFile=\"c:\\temp\\internal-nlog.txt\" xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\"> <targets async=\"true\"> <target xsi:type=\"WebService\" name=\"Splunk\" url=\"NEWURL\" protocol=\"JsonPost\" encoding=\"utf-8\" preAuthenticate=\"true\" xdt:Transform=\"SetAttributes(url)\" xdt:Locator=\"Match(name)\"> </target> </targets> </nlog>","title":"Content of nlog.Release.config"},{"location":"WebService-target---Workaround-for-url-variables/#if-newurl-is-a-variable","text":"In program.cs modify nlog.config before configuring Nlog var token = Environment.GetEnvironmentVariable(\"YOURURL\"); if (!string.IsNullOrWhiteSpace(token)) { var currentFolder = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location); var nlogFolder = $\"{currentFolder}/nlog.config\"; var configText = File.ReadAllText(nlogFolder); var updatedConfig = configText .Replace(\"NEWURL\", token); File.WriteAllText(nlogFolder, updatedConfig); } var logger = NLogBuilder.ConfigureNLog(\"nlog.config\").GetCurrentClassLogger(); //...","title":"If NEWURL is a variable"},{"location":"WebService-target/","text":"Calls the specified web service on each log message. Platforms Supported: All Configuration Syntax <targets> <target xsi:type=\"WebService\" name=\"String\" url=\"System.Uri\" encoding=\"Encoding\" includeBOM=\"Nullable boolean\" protocol=\"Enum\" namespace=\"String\" methodName=\"String\" preAuthenticate=\"Boolean\" userAgent=\"Layout\"> <parameter name=\"String\" layout=\"Layout\" parametertype=\"System.Type\"/><!-- repeated --> <header name=\"String\" layout=\"Layout\"/><!-- repeated --> </target> </targets> Parameters General Options name - Name of the target. HttpRequest Parameters Options <parameter> defines a single parameter to be passed in the Http Request: * name - Name of the parameter. * layout - Layout that should be use to calculate the value for the parameter. Layout Required. * parametertype - Type of the parameter. System.Type HttpRequest Headers Options <header> defines a single Http-header to be included in Http Request: name - Name of the header parameter. layout - Layout that should be use to calculate the value for the parameter. Layout Required. NLog 4.6 allows override of Http-header SoapAction for Protocol Soap11 Web Service Options url - Web service URI. Layout Required. NLog 5.0 changed datatype from string to Layout. encoding - Encoding. Encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN includeBOM - Skip or add Byte-order-mark (BOM) for UTF-8. Only used if encoding is set to UTF-8, because a BOM is optional in UTF-8. default: false . For more info on BOM, check Wikipedia . Possible options: null : doesn\u2019t change BOM. true : always include UTF-8 BOM UTF-8 encodings. false : default, always skip BOM on UTF-8 encodings. escapeDataRfc3986 - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to standard Rc3986, set this option to 'true' (Available from NLog 4.4) escapeDataNLogLegacy - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to the old non-standard NLog style, set this option to 'true' (Available from NLog 4.4) Protocol - Protocol to be used when calling web service. Default: Soap11 Possible values: JsonPost - JSON POST - introduced in NLog 4.4 - ContentType \"application/json\" XmlPost - XML POST - introduced in NLog 4.4 - ContentType \"application/xml\" HttpGet - Use HTTP GET Protocol. HttpPost - Use HTTP POST Protocol. ContentType \"application/x-www-form-urlencoded\" Soap11 - Use SOAP 1.1 Protocol. Remember to configure Namespace + MethodName Soap12 - Use SOAP 1.2 Protocol. Remember to configure Namespace + MethodName Namespace - Web service namespace for soap:Envelope (Soap11 + Soap12) MethodName - Web service method name for soap:Envelope (Soap11 + Soap12) PreAuthenticate - Indicates whether to pre-authenticate the HttpWebRequest (Requires 'Authorization' in Headers parameters) ProxyType - Configuration of HttpWebRequest.Proxy. Default: DefaultWebProxy (Introduced with NLog 4.5) Possible values: DefaultWebProxy - Default proxy configuration from WebRequest.DefaultWebProxy (defaultProxy in app.config) AutoProxy - WebRequest.GetSystemWebProxy() with default network credentials (Not supported on NetCore) ProxyAddress - User defined proxy address retrieved from the ProxyAddress parameter. NoProxy - Disables use of proxy (fast) ProxyAddress - User defined proxy address, include port separated by a colon (Introduced with NLog 4.5) UserAgent - User defined Http-Header 'User-Agent' for the web-request (Introduced with NLog 4.7.11) Remarks The web service must implement a method that accepts a number of string parameters. Example Example config: <nlog> <targets> <target type='WebService' name='ws' url='http://localhost:1234/logme/post' protocol='HttpPost' encoding='UTF-8'> <parameter name='param1' type='System.String' layout='${message}'/> <parameter name='param2' type='System.String' layout='${level}'/> </target> </targets> <rules> <logger name='*'writeTo='ws'></logger> </rules> </nlog> Example API controller public class LogMeController : ApiController { /// <summary> /// We need a complex type for modelbinding because /// of content-type: \"application/x-www-form-urlencoded\" /// in <see cref=\"WebServiceTarget\"/> /// </summary> public class ComplexType { public string Param1 { get; set; } public string Param2 { get; set; } } /// <summary> /// Post /// </summary> public void Post([FromBody] ComplexType complexType) { //do something } } Example with JSON document NLog v4.5 supports sending custom JSON document using a single nameless parameter, instead individual named parameters: <target type=\"WebService\" name=\"ws\" url=\"http://localhost:1234/logme/jsonpost\" protocol=\"JsonPost\"> <parameter name=\"\"> <layout xsi:type=\"JsonLayout\"> <attribute name='logger' layout='${logger}' /> <attribute name='level' layout='${level}' /> <attribute name=\"message\" layout=\"${message}\" /> </layout> </parameter> </target>","title":"WebService target"},{"location":"WebService-target/#configuration-syntax","text":"<targets> <target xsi:type=\"WebService\" name=\"String\" url=\"System.Uri\" encoding=\"Encoding\" includeBOM=\"Nullable boolean\" protocol=\"Enum\" namespace=\"String\" methodName=\"String\" preAuthenticate=\"Boolean\" userAgent=\"Layout\"> <parameter name=\"String\" layout=\"Layout\" parametertype=\"System.Type\"/><!-- repeated --> <header name=\"String\" layout=\"Layout\"/><!-- repeated --> </target> </targets>","title":"Configuration Syntax"},{"location":"WebService-target/#parameters","text":"","title":"Parameters"},{"location":"WebService-target/#general-options","text":"name - Name of the target.","title":"General Options"},{"location":"WebService-target/#httprequest-parameters-options","text":"<parameter> defines a single parameter to be passed in the Http Request: * name - Name of the parameter. * layout - Layout that should be use to calculate the value for the parameter. Layout Required. * parametertype - Type of the parameter. System.Type","title":"HttpRequest Parameters Options"},{"location":"WebService-target/#httprequest-headers-options","text":"<header> defines a single Http-header to be included in Http Request: name - Name of the header parameter. layout - Layout that should be use to calculate the value for the parameter. Layout Required. NLog 4.6 allows override of Http-header SoapAction for Protocol Soap11","title":"HttpRequest Headers Options"},{"location":"WebService-target/#web-service-options","text":"url - Web service URI. Layout Required. NLog 5.0 changed datatype from string to Layout. encoding - Encoding. Encoding name like \"utf-8\", \"ascii\" or \"utf-16\". See Encoding class on MSDN includeBOM - Skip or add Byte-order-mark (BOM) for UTF-8. Only used if encoding is set to UTF-8, because a BOM is optional in UTF-8. default: false . For more info on BOM, check Wikipedia . Possible options: null : doesn\u2019t change BOM. true : always include UTF-8 BOM UTF-8 encodings. false : default, always skip BOM on UTF-8 encodings. escapeDataRfc3986 - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to standard Rc3986, set this option to 'true' (Available from NLog 4.4) escapeDataNLogLegacy - NLog will by default encode parameters as UTF8 and escape special characters according to Rfc2396. To escape data according to the old non-standard NLog style, set this option to 'true' (Available from NLog 4.4) Protocol - Protocol to be used when calling web service. Default: Soap11 Possible values: JsonPost - JSON POST - introduced in NLog 4.4 - ContentType \"application/json\" XmlPost - XML POST - introduced in NLog 4.4 - ContentType \"application/xml\" HttpGet - Use HTTP GET Protocol. HttpPost - Use HTTP POST Protocol. ContentType \"application/x-www-form-urlencoded\" Soap11 - Use SOAP 1.1 Protocol. Remember to configure Namespace + MethodName Soap12 - Use SOAP 1.2 Protocol. Remember to configure Namespace + MethodName Namespace - Web service namespace for soap:Envelope (Soap11 + Soap12) MethodName - Web service method name for soap:Envelope (Soap11 + Soap12) PreAuthenticate - Indicates whether to pre-authenticate the HttpWebRequest (Requires 'Authorization' in Headers parameters) ProxyType - Configuration of HttpWebRequest.Proxy. Default: DefaultWebProxy (Introduced with NLog 4.5) Possible values: DefaultWebProxy - Default proxy configuration from WebRequest.DefaultWebProxy (defaultProxy in app.config) AutoProxy - WebRequest.GetSystemWebProxy() with default network credentials (Not supported on NetCore) ProxyAddress - User defined proxy address retrieved from the ProxyAddress parameter. NoProxy - Disables use of proxy (fast) ProxyAddress - User defined proxy address, include port separated by a colon (Introduced with NLog 4.5) UserAgent - User defined Http-Header 'User-Agent' for the web-request (Introduced with NLog 4.7.11)","title":"Web Service Options"},{"location":"WebService-target/#remarks","text":"The web service must implement a method that accepts a number of string parameters.","title":"Remarks"},{"location":"WebService-target/#example","text":"","title":"Example"},{"location":"WebService-target/#example-config","text":"<nlog> <targets> <target type='WebService' name='ws' url='http://localhost:1234/logme/post' protocol='HttpPost' encoding='UTF-8'> <parameter name='param1' type='System.String' layout='${message}'/> <parameter name='param2' type='System.String' layout='${level}'/> </target> </targets> <rules> <logger name='*'writeTo='ws'></logger> </rules> </nlog>","title":"Example config:"},{"location":"WebService-target/#example-api-controller","text":"public class LogMeController : ApiController { /// <summary> /// We need a complex type for modelbinding because /// of content-type: \"application/x-www-form-urlencoded\" /// in <see cref=\"WebServiceTarget\"/> /// </summary> public class ComplexType { public string Param1 { get; set; } public string Param2 { get; set; } } /// <summary> /// Post /// </summary> public void Post([FromBody] ComplexType complexType) { //do something } }","title":"Example API controller"},{"location":"WebService-target/#example-with-json-document","text":"NLog v4.5 supports sending custom JSON document using a single nameless parameter, instead individual named parameters: <target type=\"WebService\" name=\"ws\" url=\"http://localhost:1234/logme/jsonpost\" protocol=\"JsonPost\"> <parameter name=\"\"> <layout xsi:type=\"JsonLayout\"> <attribute name='logger' layout='${logger}' /> <attribute name='level' layout='${level}' /> <attribute name=\"message\" layout=\"${message}\" /> </layout> </parameter> </target>","title":"Example with JSON document"},{"location":"Webservice-Target-for-Splunk/","text":"Example config for Splunk: You have to authorize against splunk see header attribute Your content must be wrapped in <parameter name=\"event\"> <target xsi:type=\"WebService\" name=\"Splunk\" url=\"http(s)://SPLUNKSERVER/services/collector/event\" protocol=\"JsonPost\" encoding=\"utf-8\" preAuthenticate=\"true\"> <header name='Authorization' layout='Splunk YOURTOKEN' /> <!-- OR from config <header name='Authorization' layout='Splunk ${configsetting:name=Splunk.Token}' /> --> <parameter name='sourcetype' layout='_json'/> <parameter name=\"event\"> <layout xsi:type=\"JsonLayout\"> <attribute name=\"Exception\" encode=\"false\" layout=\"${exception:format=@}\" /> <attribute name=\"Logger\" layout=\"${logger}\" /> <attribute name=\"Level\" layout=\"${level}\"/> <attribute name=\"Date\" layout=\"${longdate}\"/> </layout> </parameter> </target> Alternative TCP/UDP config for Splunk Setup Splunk Input: - From the Splunk Settings , select Data Inputs - Click Add new for TCP (or UDP) - Configure the TCP (or UDP) port to use - On the page Input Settings you can (optionally) specify various things about the data you are going to be sending. There are two particularly useful settings here, the sourcetype and index - Click Review and then Submit Setup NLog Network Target: <target xsi:type=\"Network\" name=\"Splunk\" address=\"tcp://<splunk-address>:<splunk-port>\" newLine=\"true\" layout=\"${level}|${logger}|${message}|{exception:format=tostring}\"> </target> Splunk supports SYSLOG format for TCP/UDP, so maybe try out NLog.Targets.Syslog Notice that UDP-protocol has restrictions for log-message size, so they can become discarded.","title":"Webservice Target for Splunk"},{"location":"Webservice-Target-for-Splunk/#example-config-for-splunk","text":"You have to authorize against splunk see header attribute Your content must be wrapped in <parameter name=\"event\"> <target xsi:type=\"WebService\" name=\"Splunk\" url=\"http(s)://SPLUNKSERVER/services/collector/event\" protocol=\"JsonPost\" encoding=\"utf-8\" preAuthenticate=\"true\"> <header name='Authorization' layout='Splunk YOURTOKEN' /> <!-- OR from config <header name='Authorization' layout='Splunk ${configsetting:name=Splunk.Token}' /> --> <parameter name='sourcetype' layout='_json'/> <parameter name=\"event\"> <layout xsi:type=\"JsonLayout\"> <attribute name=\"Exception\" encode=\"false\" layout=\"${exception:format=@}\" /> <attribute name=\"Logger\" layout=\"${logger}\" /> <attribute name=\"Level\" layout=\"${level}\"/> <attribute name=\"Date\" layout=\"${longdate}\"/> </layout> </parameter> </target>","title":"Example config for Splunk:"},{"location":"Webservice-Target-for-Splunk/#alternative-tcpudp-config-for-splunk","text":"Setup Splunk Input: - From the Splunk Settings , select Data Inputs - Click Add new for TCP (or UDP) - Configure the TCP (or UDP) port to use - On the page Input Settings you can (optionally) specify various things about the data you are going to be sending. There are two particularly useful settings here, the sourcetype and index - Click Review and then Submit Setup NLog Network Target: <target xsi:type=\"Network\" name=\"Splunk\" address=\"tcp://<splunk-address>:<splunk-port>\" newLine=\"true\" layout=\"${level}|${logger}|${message}|{exception:format=tostring}\"> </target> Splunk supports SYSLOG format for TCP/UDP, so maybe try out NLog.Targets.Syslog Notice that UDP-protocol has restrictions for log-message size, so they can become discarded.","title":"Alternative TCP/UDP config for Splunk"},{"location":"When-Filter/","text":"Filter events in the config. Platforms Supported: All Configuration Syntax <rules> <logger ... > <filters defaultAction=\"Neutral | Ignore | Log | LogFinal | IgnoreFinal\"> <when condition=\"Condition\" action=\"Enum\"/> </filters> </logger> </rules> Parameters defaultAction - default filter action when no match. Default Ignore . Introduced with NLog 4.6. Before NLog 5.0 the default was Neutral . Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and ignore any following logging-rules. Log - The message should be logged. LogFinal - The message should be logged and ignore any following logging-rules. Neutral - No decision filterdefaultaction - Alternative name for defaultAction to match actual API. Introduced with NLog 5.0 Filtering Options condition - Condition expression. Condition Required. See section Conditions below. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and ignore any following logging-rules. Log - The message should be logged. LogFinal - The message should be logged and ignore any following logging-rules. Neutral - The filter doesn't want to decide whether to log or discard the message. Conditions Conditions are expressions used with the <when> filter. They consist of one or more tests. They are used in the filter to determine if an action will be taken. Predefined Tokens message - LogEvent formatted message logger - Logger name level - LogLevel object exception - Exception object (Introduced with NLog 5.0) ${layout} - All available layout-options (except stacktrace). Condition Language The filter expressions are written in a special mini-language. The language consists of: * relational operators: == , != , < , <= , >= and > Note: Some predefined XML characters may need to be escaped. For example, if you try to use the '<' character, the XML parser will interpret it as an opening tag which results in an error in the configuration file. Instead, use the escaped version of '<' ( &lt; ) in this context. * boolean operators: and , or , not * string literals which are always evaluated as layouts - ${somerenderer} * boolean literals - true and false * numeric literals - e.g. 12345 (integer literal) and 12345.678 (floating point literal) * log level literals - LogLevel.Trace , LogLevel.Debug , ... LogLevel.Fatal * predefined keywords to access the most common log event properties - level , message and logger * braces - to override default priorities and group expressions together * condition functions - to perform string and object tests * Single quotes should be escaped with another single quote. Condition Functions The following condition functions are available: * contains(s1,s2) Determines whether the second string is a substring of the first one. Returns: true when the second string is a substring of the first string, false otherwise. * ends-with(s1,s2) Determines whether the second string is a suffix of the first one. Returns: true when the second string is a prefix of the first string, false otherwise. * equals(o1,o2) Compares two objects for equality. Returns: true when two objects are equal, false otherwise. Notice that 'o1' == 'o2' or 'o1' != 'o2' will be faster and reduces memory allocations. * length(s) Returns the length of a string. Notice that 's' != '' is faster than length('s') > 0 , and reduces memory allocation. * starts-with(s1,s2) Determines whether the second string is a prefix of the first one. Returns: true when the second string is a prefix of the first string, false otherwise. * regex-matches(input, pattern, options) Introduced in NLog 4.5. Indicates whether the regular expression pattern finds a match in the specified input string. options is an optional comma separated list of values from the RegexOptions enumeration. Returns : true when a match is found in the input string, false otherwise. Example : regex-matches('${message}', '^foo$', 'ignorecase,singleline') Quotes Single quotes should be escaped with another single quote. Example: contains('${message}', 'Cannot insert the value NULL into column ''Col1') Extensibility New custom condition functions methods can also be added. NLog 4.7 allows you to register your own condition methods using LogFactory.Setup() . Where a lambda can be registered like this: LogManager.Setup().SetupExtensions(s => s.RegisterConditionMethod(\"hasParameters\", evt => evt.Parameters?.Length > 0) ); And a static method like this: LogManager.Setup().SetupExtensions(s => s.RegisterConditionMethod(\"hasPriority\", typeof(NLogConditionMethods).GetMethod(\"HasPriority\", BindingFlags.Static)) ); Alternative way of adding custom condition methods is creating a public static class with a static function and mark the class and method with the attributes [ConditionMethods] and [ConditionMethod] respectively. You can find a sample implementation of a custom filter here Then you have to tell NLog where to find your assembly (Ex. NLog.ConditionMethodsAssembly.dll ) <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.netfx35.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" > <extensions> <add assembly=\"NLog.ConditionMethodsAssembly\" /> </extensions> ... <nlog> Examples Here are several examples with conditions: <rules> <logger name=\"*\" writeTo=\"file\"> <filters defaultAction=\"Log\"> <when condition=\"exception != null\" action=\"Log\" /> <when condition=\"length(message) > 100\" action=\"Ignore\" /> <when condition=\"'${OnHasProperties:1}' != ''\" action=\"Ignore\" /> <when condition=\"logger == 'MyApps.SomeClass'\" action=\"Ignore\" /> <when condition=\"(level >= LogLevel.Debug and contains(message, 'PleaseDontLogThis')) or level==LogLevel.Warn\" action=\"Ignore\" /> <when condition=\"not starts-with(message, 'PleaseLogThis')\" action=\"Ignore\" /> <when condition=\"contains(message, '&quot;Bob&quot;')\" action=\"Ignore\" /> <!-- \"Bob\" --> </filters> </logger> </rules>","title":"When Filter"},{"location":"When-Filter/#configuration-syntax","text":"<rules> <logger ... > <filters defaultAction=\"Neutral | Ignore | Log | LogFinal | IgnoreFinal\"> <when condition=\"Condition\" action=\"Enum\"/> </filters> </logger> </rules>","title":"Configuration Syntax"},{"location":"When-Filter/#parameters","text":"defaultAction - default filter action when no match. Default Ignore . Introduced with NLog 4.6. Before NLog 5.0 the default was Neutral . Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and ignore any following logging-rules. Log - The message should be logged. LogFinal - The message should be logged and ignore any following logging-rules. Neutral - No decision filterdefaultaction - Alternative name for defaultAction to match actual API. Introduced with NLog 5.0","title":"Parameters"},{"location":"When-Filter/#filtering-options","text":"condition - Condition expression. Condition Required. See section Conditions below. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and ignore any following logging-rules. Log - The message should be logged. LogFinal - The message should be logged and ignore any following logging-rules. Neutral - The filter doesn't want to decide whether to log or discard the message.","title":"Filtering Options"},{"location":"When-Filter/#conditions","text":"Conditions are expressions used with the <when> filter. They consist of one or more tests. They are used in the filter to determine if an action will be taken.","title":"Conditions"},{"location":"When-Filter/#predefined-tokens","text":"message - LogEvent formatted message logger - Logger name level - LogLevel object exception - Exception object (Introduced with NLog 5.0) ${layout} - All available layout-options (except stacktrace).","title":"Predefined Tokens"},{"location":"When-Filter/#condition-language","text":"The filter expressions are written in a special mini-language. The language consists of: * relational operators: == , != , < , <= , >= and > Note: Some predefined XML characters may need to be escaped. For example, if you try to use the '<' character, the XML parser will interpret it as an opening tag which results in an error in the configuration file. Instead, use the escaped version of '<' ( &lt; ) in this context. * boolean operators: and , or , not * string literals which are always evaluated as layouts - ${somerenderer} * boolean literals - true and false * numeric literals - e.g. 12345 (integer literal) and 12345.678 (floating point literal) * log level literals - LogLevel.Trace , LogLevel.Debug , ... LogLevel.Fatal * predefined keywords to access the most common log event properties - level , message and logger * braces - to override default priorities and group expressions together * condition functions - to perform string and object tests * Single quotes should be escaped with another single quote.","title":"Condition Language"},{"location":"When-Filter/#condition-functions","text":"The following condition functions are available: * contains(s1,s2) Determines whether the second string is a substring of the first one. Returns: true when the second string is a substring of the first string, false otherwise. * ends-with(s1,s2) Determines whether the second string is a suffix of the first one. Returns: true when the second string is a prefix of the first string, false otherwise. * equals(o1,o2) Compares two objects for equality. Returns: true when two objects are equal, false otherwise. Notice that 'o1' == 'o2' or 'o1' != 'o2' will be faster and reduces memory allocations. * length(s) Returns the length of a string. Notice that 's' != '' is faster than length('s') > 0 , and reduces memory allocation. * starts-with(s1,s2) Determines whether the second string is a prefix of the first one. Returns: true when the second string is a prefix of the first string, false otherwise. * regex-matches(input, pattern, options) Introduced in NLog 4.5. Indicates whether the regular expression pattern finds a match in the specified input string. options is an optional comma separated list of values from the RegexOptions enumeration. Returns : true when a match is found in the input string, false otherwise. Example : regex-matches('${message}', '^foo$', 'ignorecase,singleline')","title":"Condition Functions"},{"location":"When-Filter/#quotes","text":"Single quotes should be escaped with another single quote. Example: contains('${message}', 'Cannot insert the value NULL into column ''Col1')","title":"Quotes"},{"location":"When-Filter/#extensibility","text":"New custom condition functions methods can also be added. NLog 4.7 allows you to register your own condition methods using LogFactory.Setup() . Where a lambda can be registered like this: LogManager.Setup().SetupExtensions(s => s.RegisterConditionMethod(\"hasParameters\", evt => evt.Parameters?.Length > 0) ); And a static method like this: LogManager.Setup().SetupExtensions(s => s.RegisterConditionMethod(\"hasPriority\", typeof(NLogConditionMethods).GetMethod(\"HasPriority\", BindingFlags.Static)) ); Alternative way of adding custom condition methods is creating a public static class with a static function and mark the class and method with the attributes [ConditionMethods] and [ConditionMethod] respectively. You can find a sample implementation of a custom filter here Then you have to tell NLog where to find your assembly (Ex. NLog.ConditionMethodsAssembly.dll ) <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.netfx35.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" > <extensions> <add assembly=\"NLog.ConditionMethodsAssembly\" /> </extensions> ... <nlog>","title":"Extensibility"},{"location":"When-Filter/#examples","text":"Here are several examples with conditions: <rules> <logger name=\"*\" writeTo=\"file\"> <filters defaultAction=\"Log\"> <when condition=\"exception != null\" action=\"Log\" /> <when condition=\"length(message) > 100\" action=\"Ignore\" /> <when condition=\"'${OnHasProperties:1}' != ''\" action=\"Ignore\" /> <when condition=\"logger == 'MyApps.SomeClass'\" action=\"Ignore\" /> <when condition=\"(level >= LogLevel.Debug and contains(message, 'PleaseDontLogThis')) or level==LogLevel.Warn\" action=\"Ignore\" /> <when condition=\"not starts-with(message, 'PleaseLogThis')\" action=\"Ignore\" /> <when condition=\"contains(message, '&quot;Bob&quot;')\" action=\"Ignore\" /> <!-- \"Bob\" --> </filters> </logger> </rules>","title":"Examples"},{"location":"When-Layout-Renderer/","text":"Only outputs the inner layout when the specified condition has been met. See Conditions . Platforms Supported: All Configuration Syntax ${when:when=Condition:inner=Layout:else=Layout} or by using ambient property to modify output of other layout renderer: ${other:when=Condition} Parameters Transformation Options when - Condition that must be met for the inner layout to be printed. Condition Required. inner - Wrapped layout. Layout else - Layout if the condition is not true (introduced in NLog 4.3.5) Examples print the message when the logger name is equal to \"logger\": ``` ${message:when=logger=='logger'} convert a layout string result to a bit (1 or 0) that can be inserted into a SQL bit field.: ${when:when='${aspnet-request:serverVariable=HTTPS}' == 'on':inner=1:else=0} Write \"Good\" if the loglevel is trace/debug/info and otherwise \"Bad\": ${when:when=level<=LogLevel.Info:inner=Good:else=Bad} Write suffix to property-value when available: ${when:when='${event-properties:item=PropName}'=='':else= ${event-properties:item=PropName} Secs} ``` Escaping Since NLog 4.2 When using : and } in a internal layout those characters need to be escaped (there is no need to escape \\ ). : because it's a value separator. } because it's the end of the layout Working examples: ${when:when=1 == 1:Inner=Test\\: Hello} ${when:when=1 == 1:Inner=Test\\\\Hello} ${when:when=1 == 1:Inner=Test\\Hello} ${when:when=1 == 1:Inner=Test{Hello\\}} Before NLog 4.2 The colon (:) character should be wrapped within {literal:text=\\:} instead of placed directly within the inner layout. Working Example Configuration layout=\"${when:when=1 == 1:inner=Test${literal:text=\\:} Hello${literal:text=\\:} World}\" Output Test: Hello: World Non-working Example Configuration layout=\"${when:when=1 == 1:inner=Test: Hello: World}\" Output World When the colon character is not wrapped only the last literal instance, in this case the word 'World', appears. :star: Workaround identified by: @reedyrm","title":"When Layout Renderer"},{"location":"When-Layout-Renderer/#configuration-syntax","text":"${when:when=Condition:inner=Layout:else=Layout} or by using ambient property to modify output of other layout renderer: ${other:when=Condition}","title":"Configuration Syntax"},{"location":"When-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"When-Layout-Renderer/#transformation-options","text":"when - Condition that must be met for the inner layout to be printed. Condition Required. inner - Wrapped layout. Layout else - Layout if the condition is not true (introduced in NLog 4.3.5)","title":"Transformation Options"},{"location":"When-Layout-Renderer/#examples","text":"print the message when the logger name is equal to \"logger\": ``` ${message:when=logger=='logger'} convert a layout string result to a bit (1 or 0) that can be inserted into a SQL bit field.: ${when:when='${aspnet-request:serverVariable=HTTPS}' == 'on':inner=1:else=0} Write \"Good\" if the loglevel is trace/debug/info and otherwise \"Bad\": ${when:when=level<=LogLevel.Info:inner=Good:else=Bad} Write suffix to property-value when available: ${when:when='${event-properties:item=PropName}'=='':else= ${event-properties:item=PropName} Secs} ```","title":"Examples"},{"location":"When-Layout-Renderer/#escaping","text":"","title":"Escaping"},{"location":"When-Layout-Renderer/#since-nlog-42","text":"When using : and } in a internal layout those characters need to be escaped (there is no need to escape \\ ). : because it's a value separator. } because it's the end of the layout Working examples: ${when:when=1 == 1:Inner=Test\\: Hello} ${when:when=1 == 1:Inner=Test\\\\Hello} ${when:when=1 == 1:Inner=Test\\Hello} ${when:when=1 == 1:Inner=Test{Hello\\}}","title":"Since NLog 4.2"},{"location":"When-Layout-Renderer/#before-nlog-42","text":"The colon (:) character should be wrapped within {literal:text=\\:} instead of placed directly within the inner layout. Working Example Configuration layout=\"${when:when=1 == 1:inner=Test${literal:text=\\:} Hello${literal:text=\\:} World}\" Output Test: Hello: World Non-working Example Configuration layout=\"${when:when=1 == 1:inner=Test: Hello: World}\" Output World When the colon character is not wrapped only the last literal instance, in this case the word 'World', appears. :star: Workaround identified by: @reedyrm","title":"Before NLog 4.2"},{"location":"WhenContains-filter/","text":"Matches when the calculated layout contains the specified substring. This filter is deprecated in favour of \\ which is based on conditions. Platforms Supported: All Configuration Syntax <rules> <logger ... > <filters> <whenContains layout=\"Layout\" substring=\"String\" action=\"Enum\" ignoreCase=\"Boolean\"/> </filters> </logger> </rules> Parameters Filtering Options layout - Layout to be used to filter log messages. Layout Required. substring - Substring to be matched. Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"WhenContains filter"},{"location":"WhenContains-filter/#configuration-syntax","text":"<rules> <logger ... > <filters> <whenContains layout=\"Layout\" substring=\"String\" action=\"Enum\" ignoreCase=\"Boolean\"/> </filters> </logger> </rules>","title":"Configuration Syntax"},{"location":"WhenContains-filter/#parameters","text":"","title":"Parameters"},{"location":"WhenContains-filter/#filtering-options","text":"layout - Layout to be used to filter log messages. Layout Required. substring - Substring to be matched. Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"Filtering Options"},{"location":"WhenEmpty-Layout-Renderer/","text":"Outputs alternative layout when the inner layout produces empty result. Platforms Supported: All Configuration Syntax ${whenEmpty:whenEmpty=Layout:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:whenEmpty=Layout} Parameters Transformation Options whenEmpty - Layout to be rendered when original layout produced empty result. Layout Required. inner - Wrapped layout. Layout","title":"WhenEmpty Layout Renderer"},{"location":"WhenEmpty-Layout-Renderer/#configuration-syntax","text":"${whenEmpty:whenEmpty=Layout:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:whenEmpty=Layout}","title":"Configuration Syntax"},{"location":"WhenEmpty-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"WhenEmpty-Layout-Renderer/#transformation-options","text":"whenEmpty - Layout to be rendered when original layout produced empty result. Layout Required. inner - Wrapped layout. Layout","title":"Transformation Options"},{"location":"WhenEqual-filter/","text":"Matches when the calculated layout is equal to the specified substring. This filter is deprecated in favour of \\ which is based on contitions. Platforms Supported: All Configuration Syntax <rules> <logger ... > <filters> <whenEqual ignoreCase=\"Boolean\" layout=\"Layout\" action=\"Enum\" compareTo=\"String\"/> </filters> </logger> </rules> Parameters Filtering Options layout - Layout to be used to filter log messages. Layout Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. compareTo - String to compare the layout to. Required. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"WhenEqual filter"},{"location":"WhenEqual-filter/#configuration-syntax","text":"<rules> <logger ... > <filters> <whenEqual ignoreCase=\"Boolean\" layout=\"Layout\" action=\"Enum\" compareTo=\"String\"/> </filters> </logger> </rules>","title":"Configuration Syntax"},{"location":"WhenEqual-filter/#parameters","text":"","title":"Parameters"},{"location":"WhenEqual-filter/#filtering-options","text":"layout - Layout to be used to filter log messages. Layout Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. compareTo - String to compare the layout to. Required. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"Filtering Options"},{"location":"WhenNotContains-filter/","text":"Matches when the calculated layout does NOT contain the specified substring. This filter is deprecated in favour of \\ which is based on contitions. Platforms Supported: All Configuration Syntax <rules> <logger ... > <filters> <whenNotContains layout=\"Layout\" substring=\"String\" action=\"Enum\" ignoreCase=\"Boolean\"/> </filters> </logger> </rules> Parameters Filtering Options layout - Layout to be used to filter log messages. Layout Required. substring - Substring to be matched. Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"WhenNotContains filter"},{"location":"WhenNotContains-filter/#configuration-syntax","text":"<rules> <logger ... > <filters> <whenNotContains layout=\"Layout\" substring=\"String\" action=\"Enum\" ignoreCase=\"Boolean\"/> </filters> </logger> </rules>","title":"Configuration Syntax"},{"location":"WhenNotContains-filter/#parameters","text":"","title":"Parameters"},{"location":"WhenNotContains-filter/#filtering-options","text":"layout - Layout to be used to filter log messages. Layout Required. substring - Substring to be matched. Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"Filtering Options"},{"location":"WhenNotEqual-filter/","text":"Matches when the calculated layout is NOT equal to the specified substring. This filter is deprecated in favour of \\ which is based on contitions. Platforms Supported: All Configuration Syntax <rules> <logger ... > <filters> <whenNotEqual ignoreCase=\"Boolean\" layout=\"Layout\" action=\"Enum\" compareTo=\"String\"/> </filters> </logger> </rules> Parameters Filtering Options layout - Layout to be used to filter log messages. Layout Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. compareTo - String to compare the layout to. Required. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"WhenNotEqual filter"},{"location":"WhenNotEqual-filter/#configuration-syntax","text":"<rules> <logger ... > <filters> <whenNotEqual ignoreCase=\"Boolean\" layout=\"Layout\" action=\"Enum\" compareTo=\"String\"/> </filters> </logger> </rules>","title":"Configuration Syntax"},{"location":"WhenNotEqual-filter/#parameters","text":"","title":"Parameters"},{"location":"WhenNotEqual-filter/#filtering-options","text":"layout - Layout to be used to filter log messages. Layout Required. action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. compareTo - String to compare the layout to. Required. ignoreCase - Indicates whether to ignore case when comparing strings. Boolean Default: False","title":"Filtering Options"},{"location":"WhenRepeated-Filter/","text":"Matches when the calculated layout has already been logged. Useful if having an aggressive logger, and wants to throttle the output. Introduced with NLog ver. 4.5 Configuration Syntax <rules> <logger ... > <filters defaultAction=\"Log\"> <whenRepeated layout=\"Layout\" timeoutSeconds=\"30\" action=\"Ignore\" /> </filters> </logger> </rules> Can also be combined with FilteringWrapper-target . Parameters Filtering Options layout - Layout to be used to filter log messages. Layout Required. timeoutSeconds - How long to ignore identical messages before logging again (Default 10 secs) action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. includeFirst - Should action also be applied to the initial logevent? When enabled then it will only perform the first logging if the messages continues after the initial timeout. (Default: false) Logging Options FilterCountPropertyName - Tell how many identical log messages has been ignored. By adding LogEvent-Property with this name to the next LogEvent after timeout expires. FilterCountMessageAppendFormat - Tell how many identical log messages has been ignored. By appending to LogEVent-Message to the next LogEvent after timeout expires (Ex. \" (Hits: {0}\") Advanced Parameters MaxLength - Max number of characters to include when checking for identical messages (Default 1000 characters) MaxFilterCacheSize - Max number of unique log messages to keep in cache, before starting to prune (Default 50000) DefaultFilterCacheSize - Initial start size of the cache for keep track of unique log messages (Default 1000) OptimizeBufferDefaultLength - Initial allocated size of the reusable buffers (Default 1000)","title":"WhenRepeated Filter"},{"location":"WhenRepeated-Filter/#configuration-syntax","text":"<rules> <logger ... > <filters defaultAction=\"Log\"> <whenRepeated layout=\"Layout\" timeoutSeconds=\"30\" action=\"Ignore\" /> </filters> </logger> </rules> Can also be combined with FilteringWrapper-target .","title":"Configuration Syntax"},{"location":"WhenRepeated-Filter/#parameters","text":"","title":"Parameters"},{"location":"WhenRepeated-Filter/#filtering-options","text":"layout - Layout to be used to filter log messages. Layout Required. timeoutSeconds - How long to ignore identical messages before logging again (Default 10 secs) action - Action to be taken when filter matches. Required. Possible values: Ignore - The message should not be logged. IgnoreFinal - The message should not be logged and processing should be finished. Log - The message should be logged. LogFinal - The message should be logged and processing should be finished. Neutral - The filter doesn't want to decide whether to log or discard the message. includeFirst - Should action also be applied to the initial logevent? When enabled then it will only perform the first logging if the messages continues after the initial timeout. (Default: false)","title":"Filtering Options"},{"location":"WhenRepeated-Filter/#logging-options","text":"FilterCountPropertyName - Tell how many identical log messages has been ignored. By adding LogEvent-Property with this name to the next LogEvent after timeout expires. FilterCountMessageAppendFormat - Tell how many identical log messages has been ignored. By appending to LogEVent-Message to the next LogEvent after timeout expires (Ex. \" (Hits: {0}\")","title":"Logging Options"},{"location":"WhenRepeated-Filter/#advanced-parameters","text":"MaxLength - Max number of characters to include when checking for identical messages (Default 1000 characters) MaxFilterCacheSize - Max number of unique log messages to keep in cache, before starting to prune (Default 50000) DefaultFilterCacheSize - Initial start size of the cache for keep track of unique log messages (Default 1000) OptimizeBufferDefaultLength - Initial allocated size of the reusable buffers (Default 1000)","title":"Advanced Parameters"},{"location":"Who-Is-Using-NLog/","text":"NLog is being used in a number of software projects, both commercial and open source. If you are using NLog in your product, feel free to expand this page by adding short information about your project and/or company (make sure you have permission to use your company name and/or logo). Open source projects The following open source software projects are using or supporting NLog: * Logging - https://github.com/akovac35/Logging * SimplePM (programming contests management system) - https://github.com/SirkadirovTeam/SimplePM_Server * Castle Project/Windsor Container - https://github.com/castleproject/Core/blob/master/docs/logging.md * Ninject - http://ninject.org/ * Common Infrastructure Libraries for .NET - http://netcommon.sourceforge.net/ * EasyLOB - http://www.easylob.com * TeamCity Configuration Monitor - http://teamcityconfmonitor.codeplex.com/ * MassTransit - http://masstransit-project.com/ * Topshelf - http://topshelf-project.com/ * ServiceStack - https://docs.servicestack.net/logging * ReflectInsight Extensions - https://insightextensions.codeplex.com/ * Fop2DD - https://github.com/KeenSystemsNL/Fop2DD * Ember Media Manager - http://embermediamanager.org/ * ArchiSteamFarm - https://github.com/JustArchiNET/ArchiSteamFarm * Sonarr - https://github.com/Sonarr/Sonarr * Radarr - https://github.com/Radarr/Radarr * Jackett - https://github.com/Jackett/Jackett * SCM Backup - https://scm-backup.org/ Commercial software Gibraltar - https://nlog-project.org/2009/11/01/gibraltar-adapter-for-nlog-released.html TradeBullet - http://www.tradebullet.com LiteStock - http://www.lightweightlabs.com ReflectInsight by ReflectSoftware - http://www.reflectsoftware.com/ Nemo Documents - http://www.nemo-docs.com Misk.com - https://www.misk.com/ VisioForge - http://www.visioforge.com elmah.io - https://elmah.io","title":"Who Is Using NLog"},{"location":"Who-Is-Using-NLog/#open-source-projects","text":"The following open source software projects are using or supporting NLog: * Logging - https://github.com/akovac35/Logging * SimplePM (programming contests management system) - https://github.com/SirkadirovTeam/SimplePM_Server * Castle Project/Windsor Container - https://github.com/castleproject/Core/blob/master/docs/logging.md * Ninject - http://ninject.org/ * Common Infrastructure Libraries for .NET - http://netcommon.sourceforge.net/ * EasyLOB - http://www.easylob.com * TeamCity Configuration Monitor - http://teamcityconfmonitor.codeplex.com/ * MassTransit - http://masstransit-project.com/ * Topshelf - http://topshelf-project.com/ * ServiceStack - https://docs.servicestack.net/logging * ReflectInsight Extensions - https://insightextensions.codeplex.com/ * Fop2DD - https://github.com/KeenSystemsNL/Fop2DD * Ember Media Manager - http://embermediamanager.org/ * ArchiSteamFarm - https://github.com/JustArchiNET/ArchiSteamFarm * Sonarr - https://github.com/Sonarr/Sonarr * Radarr - https://github.com/Radarr/Radarr * Jackett - https://github.com/Jackett/Jackett * SCM Backup - https://scm-backup.org/","title":"Open source projects"},{"location":"Who-Is-Using-NLog/#commercial-software","text":"Gibraltar - https://nlog-project.org/2009/11/01/gibraltar-adapter-for-nlog-released.html TradeBullet - http://www.tradebullet.com LiteStock - http://www.lightweightlabs.com ReflectInsight by ReflectSoftware - http://www.reflectsoftware.com/ Nemo Documents - http://www.nemo-docs.com Misk.com - https://www.misk.com/ VisioForge - http://www.visioforge.com elmah.io - https://elmah.io","title":"Commercial software"},{"location":"Windows-Identity-Layout-Renderer/","text":"Thread Windows identity information (username). Platforms Supported: All - Requires nuget-package NLog.WindowsIdentity with NLog 5.0 Configuration Syntax ${windows-identity:userName=Boolean:domain=Boolean} Parameters Rendering Options userName - Indicates whether username should be included. Boolean Default: True domain - Indicates whether domain name should be included. Boolean Default: True Notes ${environment-user} is an alternative that depends on Environment.UserName , which is compatible with both Windows/Linux (and less overhead). ${identity} is an alternative that depends on Thread.CurrentPrincipal . ${aspnet-user-identity} is an alternative that only works on ASP.NET Applications with identity enabled.","title":"Windows Identity Layout Renderer"},{"location":"Windows-Identity-Layout-Renderer/#configuration-syntax","text":"${windows-identity:userName=Boolean:domain=Boolean}","title":"Configuration Syntax"},{"location":"Windows-Identity-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Windows-Identity-Layout-Renderer/#rendering-options","text":"userName - Indicates whether username should be included. Boolean Default: True domain - Indicates whether domain name should be included. Boolean Default: True","title":"Rendering Options"},{"location":"Windows-Identity-Layout-Renderer/#notes","text":"${environment-user} is an alternative that depends on Environment.UserName , which is compatible with both Windows/Linux (and less overhead). ${identity} is an alternative that depends on Thread.CurrentPrincipal . ${aspnet-user-identity} is an alternative that only works on ASP.NET Applications with identity enabled.","title":"Notes"},{"location":"WrapLine-layout-renderer/","text":"Wraps the result of another layout output at specified line length. Platforms Supported: All Introduced in NLog 4.3.4 Configuration Syntax ${wrapline=Integer:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:wrapline=Integer} Parameters Transformation Options inner - Wrapped layout. Layout. Default attribute. wrapline - Indicates wrapping position. Integer greater than 0. Default: 80 Examples ${wrapline:${message}} ${wrapline:Inner=${message}:WrapLine=80} ${message:wrapline=80}","title":"WrapLine layout renderer"},{"location":"WrapLine-layout-renderer/#configuration-syntax","text":"${wrapline=Integer:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:wrapline=Integer}","title":"Configuration Syntax"},{"location":"WrapLine-layout-renderer/#parameters","text":"","title":"Parameters"},{"location":"WrapLine-layout-renderer/#transformation-options","text":"inner - Wrapped layout. Layout. Default attribute. wrapline - Indicates wrapping position. Integer greater than 0. Default: 80","title":"Transformation Options"},{"location":"WrapLine-layout-renderer/#examples","text":"${wrapline:${message}} ${wrapline:Inner=${message}:WrapLine=80} ${message:wrapline=80}","title":"Examples"},{"location":"XML-config-include-Example/","text":"Example with a <include /> and <variable /> in the XML config base file: d:\\nlog-file.config File to be included. Contains one target and needs ${productName} <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <!-- This file will be included. --> <!-- Note: Attributes on the \"nlog\" element are ignored for this file, the ones of the main config will be used. --> <!-- the variable ${productName} must be defined in the main nlog.config --> <targets> <target name=\"file1\" xsi:type=\"File\" fileName=\"D:\\logs\\${productName}\\${shortdate}.log\" layout=\"${time} [${level:uppercase=true}] |${logger}| ${message} ${exception}\" /> </targets> </nlog> nlog.config The main file. e.g. in the root folder of your application. Contains in this example no targets, only <include />, , ` <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Off\" > <!-- override productName in includes, so it could be used in d:\\nlog-file.config --> <variable name=\"productName\" value=\"myProduct\"/> <include file=\"D:\\nlog-file.config\" ignoreErrors=\"true\" /> <!-- note: will be set after the include are loaded --> <variable name=\"myVar\" value=\"myValue\"/> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"file1\" enabled=\"false\" /> <logger name=\"PerformanceLogger\" minlevel=\"Trace\" writeTo=\"file1\" enabled=\"false\" /> <!-- not enabled, only when tracing --> </rules> </nlog>","title":"XML config include Example"},{"location":"XML-config-include-Example/#base-file-dnlog-fileconfig","text":"File to be included. Contains one target and needs ${productName} <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <!-- This file will be included. --> <!-- Note: Attributes on the \"nlog\" element are ignored for this file, the ones of the main config will be used. --> <!-- the variable ${productName} must be defined in the main nlog.config --> <targets> <target name=\"file1\" xsi:type=\"File\" fileName=\"D:\\logs\\${productName}\\${shortdate}.log\" layout=\"${time} [${level:uppercase=true}] |${logger}| ${message} ${exception}\" /> </targets> </nlog>","title":"base file: d:\\nlog-file.config"},{"location":"XML-config-include-Example/#nlogconfig","text":"The main file. e.g. in the root folder of your application. Contains in this example no targets, only <include />, , ` <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\" internalLogLevel=\"Off\" > <!-- override productName in includes, so it could be used in d:\\nlog-file.config --> <variable name=\"productName\" value=\"myProduct\"/> <include file=\"D:\\nlog-file.config\" ignoreErrors=\"true\" /> <!-- note: will be set after the include are loaded --> <variable name=\"myVar\" value=\"myValue\"/> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"file1\" enabled=\"false\" /> <logger name=\"PerformanceLogger\" minlevel=\"Trace\" writeTo=\"file1\" enabled=\"false\" /> <!-- not enabled, only when tracing --> </rules> </nlog>","title":"nlog.config"},{"location":"Xml-Encode-Layout-Renderer/","text":"Converts the result of another layout output to be XML-compliant. Platforms Supported: All Configuration Syntax ${xml-encode:xmlEncode=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:xmlEncode=Boolean} Parameters Transformation Options xmlEncode - Indicates whether to apply XML encoding. Boolean Default: True inner - Wrapped layout. Layout","title":"Xml Encode Layout Renderer"},{"location":"Xml-Encode-Layout-Renderer/#configuration-syntax","text":"${xml-encode:xmlEncode=Boolean:inner=Layout} or by using ambient property to modify output of other layout renderer: ${other:xmlEncode=Boolean}","title":"Configuration Syntax"},{"location":"Xml-Encode-Layout-Renderer/#parameters","text":"","title":"Parameters"},{"location":"Xml-Encode-Layout-Renderer/#transformation-options","text":"xmlEncode - Indicates whether to apply XML encoding. Boolean Default: True inner - Wrapped layout. Layout","title":"Transformation Options"},{"location":"XmlLayout/","text":"A specialized layout that renders to XML. Platforms Supported: All Introduced in NLog 4.6 <target name=\"xmlFile\" xsi:type=\"File\" fileName=\"${logFileNamePrefix}.xml\" > <layout xsi:type=\"XmlLayout\" includeEventProperties=\"false\" elementName='logevent'> <attribute name=\"time\" layout=\"${longdate}\" /> <attribute name=\"level\" layout=\"${level:upperCase=true}\"/> <element name=\"message\" value=\"${message}\" /> </layout> </target> This would write: <logevent time=\"2010-01-01 12:34:56.0000\" level=\"ERROR\"> <message>hello, world</message> </logevent> Parameters Root ElementName - Name of the top level XML element Default: logevent ElementValue - Value inside the top level XML element Layout ElementEncode - Xml Encode the value for the top level XML element Boolean Default: True > Ensures always valid XML, but gives a performance hit IndentXml - Insert newlines and simplistic indention of output. Boolean . Default: False IncludeEmptyValue - Whether a ElementValue with empty value should be included in the output Boolean Default: False MaxRecursionLimit - How far should the XML serializer follow object references before backing off. Integer. Default 1 ( 0 = No object reflection) IncludeEventProperties - Include all events properties of a logevent? Default: false . Before NLog 5.0 option was named IncludeAllProperties IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc ExcludeProperties - Comma separated string with names which properties to exclude. Only used when IncludeEventProperties is true. Case sensitive. Default empty When a name contains a comma, single quote the value. E.g. 'value,withquote',value2. PropertiesElementName - Element name to use when rendering properties. Support string-format where {0} means property-key-name. Skips closing element tag when having configured PropertiesElementValueAttribute PropertiesElementKeyAttribute - Attribute name to use when rendering property-key. When null (or empty) then key-attribute is not included. Will replace newlines in attribute-value with &#13;&#10; PropertiesElementValueAttribute - Attribute name to use when rendering property-value. When null (or empty) then value-attribute is not included and value is formatted as XML-element-value. Skips closing element tag when using attribute for value Will replace newlines in attribute-value with &#13;&#10; PropertiesCollectionItemName - Element name to use for rendering IList -collections items Elements <element> defines childs elements to render: Name - Name of the element. Default 'item' Value - Value inside the element Layout Encode - Xml Encode the value Boolean Default: True Configuration parameters for Root can also be used for each <element> -element. Attributes <attribute> defines the attributes to render: Name - Name of the attribute. Required. Layout - Layout that will be rendered as the attribute's value. Layout Required. Encode - Xml Encode the attribute value. Boolean Default: True IncludeEmptyValue - - Whether an attribute with empty value should be included in the output Boolean Examples XML with attributes and elements XmlLayout <layout type='XmlLayout' > <attribute name='logger' layout='${logger}' includeEmptyValue='true' /> <attribute name='level' layout='${uppercase:${level}}' includeEmptyValue='true' /> <element name='message' value='${message}' /> <element name='exception' value='${exception:format=message}' /> <element name='location'> <attribute name='class-name' layout='${callsite:methodName=false}' includeEmptyValue='true' /> </element> </layout> Xml Output <logevent logger=\"logger1\" level=\"INFO\"> <message>My log message</message> <exception>My exception message</exception> <location class-name=\"MyNamespace.MyClass\"></location> </logevent> LogEventInfo Properties Default Output XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\"> </layout> Xml Output <logevent> <property key=\"PropertyName\">PropertyValue</property> </logevent> LogEventInfo Properties with element-name override XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesElementName=\"myparm\"> </layout> Xml Output <logevent> <myparm key=\"PropertyName\">PropertyValue</myparm> </logevent> LogEventInfo Properties with element-name as property-name XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesElementKeyAttribute=\"\" propertiesElementName=\"{0}\"> </layout> Xml Output <logevent> <PropertyName>PropertyValue</PropertyName> </logevent> LogEventInfo Properties Value as attribute: XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesElementValueAttribute=\"value\"> </layout> Xml Output <logevent> <property key=\"PropertyName\" value=\"PropertyValue\"/> </logevent> LogEventInfo Properties Dictionary-object Default Output XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\"> </layout> Xml Output <logevent> <property key=\"PropertyName\"><property key=\"DictionaryKey\">DictionaryValue</property></property> </logevent> LogEventInfo Properties List-object Default Output XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\"> </layout> Xml Output <logevent> <property key=\"PropertyName\"><item>ListValue1</item><item>ListValue2</item></property> </logevent> LogEventInfo Properties List-object with element-name override XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesCollectionItemName=\"element\"> </layout> Xml Output <logevent> <property key=\"PropertyName\"><element>ListValue1</element><element>ListValue2</element></property> </logevent>","title":"XmlLayout"},{"location":"XmlLayout/#parameters","text":"","title":"Parameters"},{"location":"XmlLayout/#root","text":"ElementName - Name of the top level XML element Default: logevent ElementValue - Value inside the top level XML element Layout ElementEncode - Xml Encode the value for the top level XML element Boolean Default: True > Ensures always valid XML, but gives a performance hit IndentXml - Insert newlines and simplistic indention of output. Boolean . Default: False IncludeEmptyValue - Whether a ElementValue with empty value should be included in the output Boolean Default: False MaxRecursionLimit - How far should the XML serializer follow object references before backing off. Integer. Default 1 ( 0 = No object reflection) IncludeEventProperties - Include all events properties of a logevent? Default: false . Before NLog 5.0 option was named IncludeAllProperties IncludeScopeProperties - Indicates whether to include ScopeProperty-Layout-Renderer dictionary. Default: false . Before NLog 5.0 option was named IncludeMdlc or IncludeMdc ExcludeProperties - Comma separated string with names which properties to exclude. Only used when IncludeEventProperties is true. Case sensitive. Default empty When a name contains a comma, single quote the value. E.g. 'value,withquote',value2. PropertiesElementName - Element name to use when rendering properties. Support string-format where {0} means property-key-name. Skips closing element tag when having configured PropertiesElementValueAttribute PropertiesElementKeyAttribute - Attribute name to use when rendering property-key. When null (or empty) then key-attribute is not included. Will replace newlines in attribute-value with &#13;&#10; PropertiesElementValueAttribute - Attribute name to use when rendering property-value. When null (or empty) then value-attribute is not included and value is formatted as XML-element-value. Skips closing element tag when using attribute for value Will replace newlines in attribute-value with &#13;&#10; PropertiesCollectionItemName - Element name to use for rendering IList -collections items","title":"Root"},{"location":"XmlLayout/#elements","text":"<element> defines childs elements to render: Name - Name of the element. Default 'item' Value - Value inside the element Layout Encode - Xml Encode the value Boolean Default: True Configuration parameters for Root can also be used for each <element> -element.","title":"Elements"},{"location":"XmlLayout/#attributes","text":"<attribute> defines the attributes to render: Name - Name of the attribute. Required. Layout - Layout that will be rendered as the attribute's value. Layout Required. Encode - Xml Encode the attribute value. Boolean Default: True IncludeEmptyValue - - Whether an attribute with empty value should be included in the output Boolean","title":"Attributes"},{"location":"XmlLayout/#examples","text":"","title":"Examples"},{"location":"XmlLayout/#xml-with-attributes-and-elements","text":"XmlLayout <layout type='XmlLayout' > <attribute name='logger' layout='${logger}' includeEmptyValue='true' /> <attribute name='level' layout='${uppercase:${level}}' includeEmptyValue='true' /> <element name='message' value='${message}' /> <element name='exception' value='${exception:format=message}' /> <element name='location'> <attribute name='class-name' layout='${callsite:methodName=false}' includeEmptyValue='true' /> </element> </layout> Xml Output <logevent logger=\"logger1\" level=\"INFO\"> <message>My log message</message> <exception>My exception message</exception> <location class-name=\"MyNamespace.MyClass\"></location> </logevent>","title":"XML with attributes and elements"},{"location":"XmlLayout/#logeventinfo-properties-default-output","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\"> </layout> Xml Output <logevent> <property key=\"PropertyName\">PropertyValue</property> </logevent>","title":"LogEventInfo Properties Default Output"},{"location":"XmlLayout/#logeventinfo-properties-with-element-name-override","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesElementName=\"myparm\"> </layout> Xml Output <logevent> <myparm key=\"PropertyName\">PropertyValue</myparm> </logevent>","title":"LogEventInfo Properties with element-name override"},{"location":"XmlLayout/#logeventinfo-properties-with-element-name-as-property-name","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesElementKeyAttribute=\"\" propertiesElementName=\"{0}\"> </layout> Xml Output <logevent> <PropertyName>PropertyValue</PropertyName> </logevent>","title":"LogEventInfo Properties with element-name as property-name"},{"location":"XmlLayout/#logeventinfo-properties-value-as-attribute","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesElementValueAttribute=\"value\"> </layout> Xml Output <logevent> <property key=\"PropertyName\" value=\"PropertyValue\"/> </logevent>","title":"LogEventInfo Properties Value as attribute:"},{"location":"XmlLayout/#logeventinfo-properties-dictionary-object-default-output","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\"> </layout> Xml Output <logevent> <property key=\"PropertyName\"><property key=\"DictionaryKey\">DictionaryValue</property></property> </logevent>","title":"LogEventInfo Properties Dictionary-object Default Output"},{"location":"XmlLayout/#logeventinfo-properties-list-object-default-output","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\"> </layout> Xml Output <logevent> <property key=\"PropertyName\"><item>ListValue1</item><item>ListValue2</item></property> </logevent>","title":"LogEventInfo Properties List-object Default Output"},{"location":"XmlLayout/#logeventinfo-properties-list-object-with-element-name-override","text":"XmlLayout <layout xsi:type=\"XmlLayout\" includeEventProperties=\"true\" propertiesCollectionItemName=\"element\"> </layout> Xml Output <logevent> <property key=\"PropertyName\"><element>ListValue1</element><element>ListValue2</element></property> </logevent>","title":"LogEventInfo Properties List-object with element-name override"},{"location":"_Sidebar/","text":"Home Getting started .NET Framework ASP.NET Core 6 .NET Core Console How to use structured logging Troubleshooting Internal log FAQ Configuration All targets, layouts and layout renderers Popular: File-target ColoredConsole-target Database-target Mail-target Using NLog with NLog.config Using NLog with appsettings.json Programmatic Configuration Configure from code Sandcastle documentation Advanced Add LogEvent Context details Filtering log messages Optimize Logging Performance NLog properties with Microsoft Extension Logging NLog GetCurrentClassLogger and Microsoft ILogger Using Time Sources Installing targets Visual Studio support Who is using NLog Advanced Examples Extending NLog Write custom extensions How to write a custom target How to write a custom layout renderer Writing custom conditions Properties constraints for custom extensions Register your custom component","title":" Sidebar"},{"location":"_Sidebar/#home","text":"Getting started .NET Framework ASP.NET Core 6 .NET Core Console How to use structured logging Troubleshooting Internal log FAQ","title":"Home"},{"location":"_Sidebar/#configuration","text":"All targets, layouts and layout renderers Popular: File-target ColoredConsole-target Database-target Mail-target Using NLog with NLog.config Using NLog with appsettings.json","title":"Configuration"},{"location":"_Sidebar/#programmatic-configuration","text":"Configure from code Sandcastle documentation","title":"Programmatic Configuration"},{"location":"_Sidebar/#advanced","text":"Add LogEvent Context details Filtering log messages Optimize Logging Performance NLog properties with Microsoft Extension Logging NLog GetCurrentClassLogger and Microsoft ILogger Using Time Sources Installing targets Visual Studio support Who is using NLog Advanced Examples","title":"Advanced"},{"location":"_Sidebar/#extending-nlog","text":"Write custom extensions How to write a custom target How to write a custom layout renderer Writing custom conditions Properties constraints for custom extensions Register your custom component","title":"Extending NLog"},{"location":"filters/","text":"See https://github.com/NLog/NLog/wiki/Filtering-log-messages","title":"Filters"}]}